[
    {
        "id": "986afd82ee909974",
        "type": "tab",
        "label": "Sinalizador_IoT_Produto_v1.1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b79a169e.a116d8",
        "type": "tab",
        "label": "Sinalizador_Injetoras_v1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "674c4d9b.3bfa14",
        "type": "tab",
        "label": "File Browser",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fcc6da58.250b58",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `argument` containing the updated properties of a table row by sending msg._rowProperty_ where `msg.topic` should contian the **index** or the object contains the index property.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.command`\n\n```\nmsg.command = \"columnHide\",\nmsg.argument = \"id\"\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `argument` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `argument` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `argument` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `argument` matching column field\n- `columnUnHide` unhide a column. `argument` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "91661a03.9d6408"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "91661a03.9d6408",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "91661a03.9d6408",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "payload",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "Table Data"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "id",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Table Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "label": {
                        "en-US": "Max Rows"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Tab"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Storage"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "ui-table-handler",
            "version": "0.2.1",
            "author": "cmeinert@gmx.net",
            "desc": "Universal handler for ui-table using advanced features like dynamic updates.",
            "keywords": "ui-table,tabulator,dashboard",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "91661a03.9d6408",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "dfb163e9.54309",
        "type": "subflow",
        "name": "scan",
        "info": "",
        "category": "ui-table",
        "in": [
            {
                "x": 51,
                "y": 85,
                "wires": [
                    {
                        "id": "87ead126.bd998"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 357,
                "y": 85,
                "wires": [
                    {
                        "id": "87ead126.bd998",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ipString",
                "type": "str",
                "value": "http://192.168.2.",
                "ui": {
                    "icon": "font-awesome/fa-feed",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "start",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-arrow-circle-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "end",
                "type": "num",
                "value": "255",
                "ui": {
                    "icon": "font-awesome/fa-arrow-circle-left",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    },
                    "label": {}
                }
            },
            {
                "name": "suffix",
                "type": "str",
                "value": "/json",
                "ui": {
                    "icon": "font-awesome/fa-address-card-o",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    },
                    "label": {}
                }
            }
        ],
        "color": "#A6BBCF",
        "icon": "font-awesome/fa-stethoscope"
    },
    {
        "id": "829b9077.0c8e3",
        "type": "subflow",
        "name": "ui-table handler (2)",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n- delete custom colum order and restore colum order from the tabulator json. This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n- delete custom column widths\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnWidth\"\n}\n```\n- delete tableCache\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"tableCache\"\n}\n```\n\n## background\nui-table warps the powerfull tabluator library. This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "e602ede1.36585"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "e602ede1.36585",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "e602ede1.36585",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "e602ede1.36585",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a93284da.462418",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "MQTT OUT",
        "style": {
            "label": true,
            "fill": "#e3f3d3",
            "color": "#000000",
            "stroke": "#000000"
        },
        "nodes": [
            "a65068fa74520ce5",
            "7633ea003f901f3b",
            "2740f6f8ddc97348",
            "391890a05e4e7ce6",
            "d683ec4664b62bc6",
            "0e81164bc81f5837",
            "e0fb8dc96c721446"
        ],
        "x": 1554,
        "y": 39,
        "w": 532,
        "h": 202
    },
    {
        "id": "7321907a.ee288",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "MQTT IN",
        "style": {
            "stroke": "#000000",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9ad9dc7fd493d504",
            "e32c024af412fe5a",
            "30115bed7a5f68f1",
            "ff4d8bfeb016df28",
            "1f577c9f4883308e",
            "658d22dfaafc1d6b",
            "dd995a651d1dc7ec",
            "0912e56897103f92",
            "4265364ec833c5f8",
            "2a21ffedd6cd0109",
            "aea29f17af494767",
            "1489764.8783b8a",
            "441dc6f0.a03448",
            "66101c35.0443e4",
            "8f2ddbf9.030d88",
            "bbd23c5.f5643c",
            "f0ea0153.5a50b",
            "70bd1062.f436f",
            "e5fe689d.ece6a8",
            "64b5c749.eebb08",
            "5a000ad0.28af04",
            "54e352c8.74056c",
            "976e9fb.59cb36",
            "a4c94323.4dccf",
            "eb7d18686335278b",
            "8fbc8760c50db03c",
            "5a0cfb62417c321f",
            "8eab0ea2a3e75784",
            "5b1e1f4a95e636c2",
            "8b71a2f29b78cad5",
            "d348875d72c343bc",
            "ec349f3b3013ba0f",
            "7c1fddbfa19182ef",
            "490b47c687aab3d7",
            "21d92f88bab1646b",
            "ea1fa2179048a1a7",
            "7d8afd112c4d240a",
            "95b263d0999acab3",
            "80f6f6f2d712fb7b",
            "a4f965b8c7ea4f5d",
            "f008569c1a3599c2",
            "30fded0a30a884cf",
            "7c9a1ed626757dba",
            "39c1eb8bd37c9e64",
            "cea544e19930f2d4",
            "486b8533ba12b506",
            "641b44acaac13d06",
            "92239a3c5cc89b16",
            "67750c2c471fb293",
            "2d70b7bf78bfc9f4",
            "be335deca55c3d9b",
            "e6fbee5ee9011a28",
            "af59f655dbcef04a",
            "910652968b0de9f7",
            "33f516155378c60c",
            "f3de6f1501163f3f",
            "6dd659648d5eedf5"
        ],
        "x": 34,
        "y": 59,
        "w": 1402,
        "h": 962
    },
    {
        "id": "ac77b882.60d688",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "TELEGRAM",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "790d909757b2b6a4",
            "0d0982331bd7e793",
            "2c4323711c4c6b8a",
            "7e7745740455865c",
            "ea672a7704f6391a",
            "ed3cb095ccee16c9",
            "032b13e226f6c431",
            "3cbc62ef81210202",
            "1e31c57183d924bf",
            "b7aaa6e71f1de5e7",
            "45b2d0f5a296019e",
            "5ee484d0ae34f2d3",
            "409c494487c56f04",
            "1909d516da5035e6",
            "fa1b2383119f6cd1",
            "9e59c17584091717",
            "d677f52c01d3fdd4",
            "e44f420d4f21a748",
            "2c64a3c3a697fab3",
            "09db53ffdb7db890",
            "18aebb78285cf32a",
            "355648fedf17ab71",
            "3c96ffbee587d319",
            "83db33f803e96dcd",
            "7b5e9835b4de4932",
            "4a6c8b0e49fbe786",
            "60654806529f49f0",
            "e83b3cf3e62ee5c3",
            "a5e6e7cf17490c11",
            "4acb3252adca595a",
            "366812e1.4d83fe",
            "6c15a2dc.fcc8ac",
            "67ffec7f.df7944",
            "a8107502.cd6668",
            "5dfae462.2f63fc",
            "3391b238.6dcc5e",
            "a30ecc55.8bb3d",
            "40578a8b.8eba64"
        ],
        "x": 94,
        "y": 2059,
        "w": 952,
        "h": 922
    },
    {
        "id": "1504f413.2fc83c",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "FILES",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#ffefbf",
            "color": "#000000"
        },
        "nodes": [
            "ead8d2a45ff35148",
            "d2e8ed9e8e177e17",
            "9f2ab65af5ae388e",
            "8da76a3f484aa635",
            "202437dd29801716",
            "0d9e7426178f8bef",
            "35b16469ed35b179",
            "372d856f5ede5f0b",
            "06b94020e23a6886",
            "858736762d7b2457",
            "a4fa91d68005c75c"
        ],
        "x": 94,
        "y": 1799,
        "w": 712,
        "h": 222
    },
    {
        "id": "822c3780a45a9041",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "Dashboard Individual",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d59d38012e7b4aaa",
            "5073046078bc8633",
            "88dc9aec1d9026cd",
            "aa95499224ace9b0",
            "47493818d817e28b",
            "7c7a19a64f40d0af",
            "63724ab6a4ba01f2",
            "0c30b63f883016f4",
            "5ffe12ff40787a4c",
            "d3cbcda1.c274b",
            "a8f298c5.155fd8",
            "98723328.bd031",
            "cd8db1af.5eefb",
            "e151f051682dee15",
            "5c6b2155ea6bbb67",
            "a42e5b0ca9cb0498",
            "1ea0783d02a0484f",
            "9888af06fbea5354",
            "239802e9717738e1",
            "b6ca060716a4f878",
            "e6401f0a865462b8",
            "db542acc44f8718d",
            "562ad9cf6ffef88a",
            "bc2f7a13ddee397c",
            "cb9ed6f169bbb140",
            "66796c150b33f719",
            "e11e06adbe9cfe50",
            "1e1d1267766b9614",
            "182a10176e81afc5",
            "edf7d55ca2b9dc0e",
            "a111867d5a32035e",
            "7345c8fc3bb55383",
            "c44212ae80dcdb72",
            "fd6c346609ab6932",
            "cea07abdeea8ec7b",
            "d51c4a74d2098eac",
            "9f16231c1c007635",
            "ccf8d98bf109be1e",
            "417473bf8f2d8a69"
        ],
        "x": 1474,
        "y": 1799,
        "w": 1472,
        "h": 722
    },
    {
        "id": "3717a59d168d826b",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "Dashboard Geral",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d447f70d1bd2549e",
            "cc6626c1f5abdb4d",
            "677ac102c233ddee",
            "316e6b2b045f09a8",
            "fa3d3c37ea37fd91",
            "8d95535f975e9375",
            "784567b1707f266a",
            "d0232751d7d8859b",
            "7f1e2efd5d613af9",
            "85ec293f8710ac09",
            "d688812a.1acd5",
            "3449de0a.70f5c2",
            "28a9130e.8ff01c",
            "2c31b7be.e7a598",
            "82fe9082.4b3b8",
            "eba00348117a10a1",
            "12f73deb.db3af2",
            "d0c836bf9a9a535c",
            "79dfd895.9821d8",
            "284fa71e8da0b6e9",
            "1041f965165ecbf5",
            "b74ee7f06dd661d3",
            "d0fe25719d86c492",
            "8e8486fc2dbeb83a",
            "131b4b8dc460a66c",
            "28f00ec4bd73751b",
            "88f6758cb074cd63",
            "eba40c2bbdbd197b",
            "db7f9cea636732e6",
            "edab5463a821987a",
            "0f0a8690d26363a8",
            "1efae357e679c6f0",
            "4b3884529a9ae4e3"
        ],
        "x": 1534,
        "y": 1059,
        "w": 1242,
        "h": 622
    },
    {
        "id": "352edda8f59a3cab",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "Configurações",
        "style": {
            "stroke": "#000000",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c48c485455f3bef1",
            "aa55b154f711f5e4",
            "ab6509ee71a5ccb7",
            "6bcdd152.6258a",
            "10f0149063340a3c",
            "297cc793.e52118",
            "6117f459.9ed8dc",
            "bc2a2fd6.cc499",
            "29c7f485.1eab0c",
            "f57884c1.34b248",
            "848fe849.c216e8",
            "c2592d82.0954",
            "31bd603a.0a4c2",
            "2d7adbbe.106514",
            "5ce3fe80.ebb2d",
            "ca1e2b57.702fc8",
            "a805550e.521c18",
            "712da170.ac1f2",
            "34540a23.ec7106",
            "e239bb66.dce908",
            "5a33bc3b2a4775b3",
            "acb56509.d35378",
            "99fe6a68.94aa68",
            "0ee165efa3e9a6e7",
            "af4bf9c8.041158",
            "effd9e0f8c88bc45",
            "c1582c55cbee06fc",
            "24302e8f.c58b02",
            "6f36f15d.4a451",
            "815ba61b32d31833",
            "71a310297ef075ad",
            "0ee6eb7d932046c7",
            "f36a1277d750c653",
            "3106013f6ebd2435",
            "1c55be19a8c9fd17",
            "598063c8b28f9650",
            "8ab5a928c3ad0ddc",
            "797b9c61b8647a5c",
            "f2222e4d8c0add6a",
            "233c036ea98d016f",
            "48951c0a55e91a72",
            "f86c8f593b9d6d2a",
            "68b8b9caeac92ec6",
            "1f3b47b7053c8409",
            "a494bf8233d61c28",
            "3480bec80c1422e0",
            "e95389ef51a73ed5",
            "de233bd3d1ea564c",
            "63091b79b208f34f",
            "c3531fa1671a52e4",
            "762558374619fb9a",
            "9c2ae7ca7ae94e81",
            "71f6e1a76f253672",
            "2a6e0ce883925f77",
            "40b2d8ef052d9f59",
            "454bb2c7a57826ec",
            "5807098756557cf9",
            "684c6dc4b967cd09",
            "106763079d8a471a",
            "78c28a4569ba1999",
            "4d9bcf9bcc04b7f1",
            "1bd4de93037badd5",
            "1deb1d0e8b3c56f7",
            "da13b5efb38a8cbe",
            "07d48c4273ec8942",
            "b791dd8afc66e827",
            "f1372b28009e7be4",
            "796d2a59c4c12f9d",
            "6177e9f7beff6420",
            "a70707a51bf50683",
            "d1d671813ee10f73",
            "ae55c09bfb767c69",
            "3b5c09028095631f",
            "452c258c30530535",
            "edede61c0d770ffe",
            "ca259a3b864d8270",
            "06a1756c3d8d1903",
            "684c82a2f6eb0abe",
            "1da51a3734e49495",
            "a7cfe588245ed7f5",
            "5e07e23a0370662e",
            "fdd13a46e185c8eb",
            "ecf796734a073562",
            "a978bf1dc6a72f5e"
        ],
        "x": 1614,
        "y": 2859,
        "w": 1082,
        "h": 1242
    },
    {
        "id": "464c9e9c201f923a",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "List Equipments",
        "style": {
            "stroke": "#000000",
            "fill": "#ffdf7f",
            "fill-opacity": "0.73",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "a5181bf9.a33268",
            "4f46932f.981d7c",
            "d076d6ee.62b1b8",
            "574a0282.5c107c",
            "e8298205.06d65",
            "3c9b5419b4bd45f1",
            "5c62a30cd09e7391",
            "216d7a8444752629",
            "c9577ad005bab3b2"
        ],
        "x": 1554,
        "y": 319,
        "w": 1012,
        "h": 202
    },
    {
        "id": "874d38f878083d50",
        "type": "group",
        "z": "986afd82ee909974",
        "name": "Timeline",
        "style": {
            "stroke": "#000000",
            "fill": "#d1d1d1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d4621deb.adcb3",
            "c2bb9c52.5d73",
            "ce090a5e.662658",
            "1d5be367.89640d",
            "05d2f5607c5b3d6f",
            "fb2ce33434415ee8",
            "6ec6859d02da3a5f",
            "5e58566d2621be86",
            "f42cf29d1c3a96da",
            "d1cbaaa80a35f8b6",
            "52254f729d148a30",
            "f8f3c7d95d68c214",
            "2612b81d1d540a0a"
        ],
        "x": 1574,
        "y": 759,
        "w": 972,
        "h": 242
    },
    {
        "id": "8e8486fc2dbeb83a",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "x": 2080,
        "y": 1540,
        "wires": [
            [
                "28a9130e.8ff01c",
                "12f73deb.db3af2",
                "8d95535f975e9375",
                "82fe9082.4b3b8"
            ]
        ]
    },
    {
        "id": "bc2f7a13ddee397c",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "x": 1920,
        "y": 2140,
        "wires": [
            [
                "1e1d1267766b9614"
            ]
        ]
    },
    {
        "id": "b791dd8afc66e827",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "x": 2520,
        "y": 3940,
        "wires": [
            [
                "5807098756557cf9"
            ]
        ]
    },
    {
        "id": "f1372b28009e7be4",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "x": 2520,
        "y": 3980,
        "wires": [
            [
                "684c6dc4b967cd09"
            ]
        ]
    },
    {
        "id": "796d2a59c4c12f9d",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "x": 2520,
        "y": 4020,
        "wires": [
            [
                "106763079d8a471a"
            ]
        ]
    },
    {
        "id": "6177e9f7beff6420",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "x": 2520,
        "y": 4060,
        "wires": [
            [
                "78c28a4569ba1999"
            ]
        ]
    },
    {
        "id": "a70707a51bf50683",
        "type": "junction",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "x": 2280,
        "y": 4000,
        "wires": [
            [
                "1bd4de93037badd5",
                "da13b5efb38a8cbe",
                "07d48c4273ec8942",
                "1deb1d0e8b3c56f7"
            ]
        ]
    },
    {
        "id": "8f859957.374788",
        "type": "mqtt-broker",
        "name": "test.mosquitto.org",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "5",
        "cleansession": true,
        "birthTopic": "status",
        "birthQos": "0",
        "birthPayload": "connected",
        "birthMsg": {},
        "closeTopic": "status",
        "closeQos": "0",
        "closePayload": "disconnected",
        "closeMsg": {},
        "willTopic": "status",
        "willQos": "0",
        "willPayload": "failed connection",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "bab3ea8ecb465b5b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "72296687.029568",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b6348f89.0a471",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspMQTT.local",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5e51b17f.0e703",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspMQTT.local",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "8ef79b5bbf5b3e7b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspMQTT.local",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "33d8ee821ca6870f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "raspMQTT.local",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5e57c9592cebae5d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "87bc79f8.b27fa8",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba2b6bb3631a7eac",
        "type": "ui_group",
        "name": "Tabela Tempo e Status",
        "tab": "ad37ae762c673d1a",
        "order": 3,
        "disp": true,
        "width": "23",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8669d6dc222f6a40",
        "type": "ui_group",
        "name": "Renomear Sinalizador",
        "tab": "42eb289fbf2d10d8",
        "order": 1,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "a5c77f56.c9f86",
        "type": "ui_group",
        "name": "Lista Sinalizadores Smart",
        "tab": "b7b67c0c.798c7",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "4b29cbbf.bb9374",
        "type": "ui_group",
        "name": "Sinalizadores - Detalhado",
        "tab": "d4e22530.8a5da8",
        "order": 1,
        "disp": true,
        "width": 28,
        "collapse": false
    },
    {
        "id": "2e329927.ce2b26",
        "type": "ui_group",
        "name": "Tabela Geral Smart",
        "tab": "fcf7d6eb.d60ce8",
        "order": 4,
        "disp": true,
        "width": "23",
        "collapse": false
    },
    {
        "id": "bb15abb8.10dae8",
        "type": "ui_group",
        "name": "Resumo Sinalizador Smart",
        "tab": "fcf7d6eb.d60ce8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b5deeefa.dab7b",
        "type": "ui_group",
        "name": "Log Paradas Smart",
        "tab": "fcf7d6eb.d60ce8",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c54f908.e18107",
        "type": "ui_group",
        "name": "Renomear Sinalizador Smart",
        "tab": "b7b67c0c.798c7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1e7a6209.a38a7e",
        "type": "ui_group",
        "name": "Excluir Sinalizador",
        "tab": "42eb289fbf2d10d8",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": false
    },
    {
        "id": "33401f87.1001c",
        "type": "ui_group",
        "name": "Gerar CSV",
        "tab": "42eb289fbf2d10d8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ead3fc9.832a3",
        "type": "ui_group",
        "name": "Timeline chart",
        "tab": "35250d78.e38892",
        "order": 1,
        "disp": false,
        "width": "25",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4942f1a2.7b048",
        "type": "ui_group",
        "name": "Lista Equipamentos",
        "tab": "31455946.9b6186",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "79b4d5c2.bfe4ac",
        "type": "ui_group",
        "name": "Resumo Individual",
        "tab": "30c4fa48.b40b76",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2514b6c1.23661a",
        "type": "ui_group",
        "name": "Avisos de Paradas",
        "tab": "ad37ae762c673d1a",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad37ae762c673d1a",
        "type": "ui_tab",
        "name": "Dashboard Geral",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "42eb289fbf2d10d8",
        "type": "ui_tab",
        "name": "Configurações_Produto",
        "icon": "settings",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d4e22530.8a5da8",
        "type": "ui_tab",
        "d": true,
        "name": "Central",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fcf7d6eb.d60ce8",
        "type": "ui_tab",
        "d": true,
        "name": "Dashboard_Smart",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b7b67c0c.798c7",
        "type": "ui_tab",
        "d": true,
        "name": "Configurações_Smart",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "87bc79f8.b27fa8",
        "type": "ui_tab",
        "name": "Files",
        "icon": "file_download",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "35250d78.e38892",
        "type": "ui_tab",
        "name": "Timeline",
        "icon": "timeline",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "31455946.9b6186",
        "type": "ui_tab",
        "name": "Dispositivos",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "30c4fa48.b40b76",
        "type": "ui_tab",
        "name": "Dashboard Individual",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5ba970885f10555c",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "e47131ebc98edfb4",
        "order": 3,
        "width": "6",
        "height": "3"
    },
    {
        "id": "1634b29f.652e8d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "a5c77f56.c9f86",
        "order": 3,
        "width": 11,
        "height": 1
    },
    {
        "id": "36f6c753.43d588",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "4b29cbbf.bb9374",
        "order": 2,
        "width": 24,
        "height": 1
    },
    {
        "id": "a2ad51bf.421a1",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "4b29cbbf.bb9374",
        "order": 4,
        "width": 24,
        "height": 1
    },
    {
        "id": "dff8934.3aac27",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "4b29cbbf.bb9374",
        "order": 5,
        "width": 24,
        "height": 1
    },
    {
        "id": "d47a5eab.57aab",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "2123866.7d8727a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "eb9caa7b.fdb258",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 6,
        "width": 9,
        "height": 1
    },
    {
        "id": "c576e05a.2a969",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 7,
        "width": 9,
        "height": 1
    },
    {
        "id": "c8ec79cc.435cd8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 8,
        "width": 9,
        "height": 1
    },
    {
        "id": "7d49a8e2.292568",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "5cb2d5d2.d2098c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 10,
        "width": 9,
        "height": 1
    },
    {
        "id": "6e9f689f.596b18",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "1385c244.3d463e",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 12,
        "width": 9,
        "height": 1
    },
    {
        "id": "57c95a56.4fd2a4",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "2e329927.ce2b26",
        "order": 13,
        "width": 9,
        "height": 1
    },
    {
        "id": "5913b03b.65008",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "bb15abb8.10dae8",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "d201a08.e8ce06",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b5deeefa.dab7b",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "99ccf79c.652278",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b5deeefa.dab7b",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "d9cc4a9a.680e58",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "b5deeefa.dab7b",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "8e3da893.8b7ec8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 13,
        "height": 1
    },
    {
        "id": "83c3d4e0.7193b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "657a1ca5.619d54",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "5f2c5773.ccac38",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "a0b20136.27fdb",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "c05736b4667e3ba3",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Notify Theme",
                "default": "#4B7930",
                "baseColor": "#5baf30",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#5baf30",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#5baf30",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#c2c2c2",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#82d25a",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#5baf30",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Sinalizador IoT",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 10,
                "gy": 10,
                "cx": 6,
                "cy": 6,
                "px": 15,
                "py": 15
            }
        }
    },
    {
        "id": "e9888d43a74be4e5",
        "type": "telegram bot",
        "botname": "Eder_testbot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "fcc25e57.4073a",
        "type": "telegram bot",
        "botname": "TestBot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "debf09c0.071018",
        "type": "telegram bot",
        "botname": "Sinalizador_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "0629872192503cf0",
        "type": "telegram bot",
        "botname": "NotifyOrakolo_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "517f5ac4.21b994",
        "type": "telegram bot",
        "botname": "NotifySmart_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "270590d0.3af0a",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "database-tcc-1.cc2f1j2t6wmy.us-east-1.rds.amazonaws.com",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "hamasakiamaral8*tcc",
        "passwordFieldType": "str"
    },
    {
        "id": "20ae1e52d1eef983",
        "type": "postgreSQLConfig",
        "name": "myuser@timescale:5432/iot",
        "host": "timescale",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "iot",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "myuser",
        "userFieldType": "str",
        "password": "???",
        "passwordFieldType": "str"
    },
    {
        "id": "0896cba727c33420",
        "type": "ui_group",
        "name": "Tabela Resumo",
        "tab": "30c4fa48.b40b76",
        "order": 2,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2c09e8f6e779fc72",
        "type": "ui_group",
        "name": "Gráfico Pizza",
        "tab": "30c4fa48.b40b76",
        "order": 4,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f6f68f22969f7d5",
        "type": "ui_group",
        "name": "Descrição",
        "tab": "30c4fa48.b40b76",
        "order": 3,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c24fbbad82b953e6",
        "type": "ui_spacer",
        "z": "674c4d9b.3bfa14",
        "name": "spacer",
        "group": "160e81fb.f1c86e",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "afc6408dcea8cf59",
        "type": "ui_spacer",
        "z": "674c4d9b.3bfa14",
        "name": "spacer",
        "group": "160e81fb.f1c86e",
        "order": 12,
        "width": 6,
        "height": 1
    },
    {
        "id": "1d6d4814a87a09cf",
        "type": "ui_spacer",
        "z": "674c4d9b.3bfa14",
        "name": "spacer",
        "group": "160e81fb.f1c86e",
        "order": 14,
        "width": 20,
        "height": 1
    },
    {
        "id": "2c36f2c81e945f34",
        "type": "ui_spacer",
        "z": "674c4d9b.3bfa14",
        "name": "spacer",
        "group": "160e81fb.f1c86e",
        "order": 15,
        "width": 20,
        "height": 1
    },
    {
        "id": "b7c768d637ef6fce",
        "type": "ui_group",
        "name": "Período",
        "tab": "ad37ae762c673d1a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "86ac27f58ca47d87",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "79b4d5c2.bfe4ac",
        "order": 4,
        "width": "3",
        "height": "1"
    },
    {
        "id": "f4f6b202d5b20fa6",
        "type": "ui_group",
        "name": "Significado das Cores",
        "tab": "42eb289fbf2d10d8",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a2f4f22ca13f66e9",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "f4f6b202d5b20fa6",
        "order": 8,
        "width": "4",
        "height": "1"
    },
    {
        "id": "e7b7b2f76e032d0c",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "f4f6b202d5b20fa6",
        "order": 13,
        "width": 6,
        "height": 1
    },
    {
        "id": "08ad689706f7bb35",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "f4f6b202d5b20fa6",
        "order": 14,
        "width": 6,
        "height": 1
    },
    {
        "id": "4aedd2a2224754f2",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "f4f6b202d5b20fa6",
        "order": 17,
        "width": 6,
        "height": 1
    },
    {
        "id": "7abf24637d3cf98c",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "f4f6b202d5b20fa6",
        "order": 18,
        "width": 6,
        "height": 1
    },
    {
        "id": "60cc487736115eb1",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "2514b6c1.23661a",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "b3be540617e196ac",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "2514b6c1.23661a",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "78e62465a19c7230",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "2514b6c1.23661a",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "b748584561413636",
        "type": "ui_spacer",
        "z": "986afd82ee909974",
        "name": "spacer",
        "group": "2514b6c1.23661a",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "4d3cebb6afa36f5f",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "35250d78.e38892",
        "order": 2,
        "disp": false,
        "width": "30",
        "collapse": false
    },
    {
        "id": "91661a03.9d6408",
        "type": "function",
        "z": "fcc6da58.250b58",
        "d": true,
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// prepare command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif  (   msg.hasOwnProperty(tableDataProp) &&\n        !(msg.hasOwnProperty('tab') && msg.hasOwnProperty('name')) && // msg origin from ui-control node\n        !(msg.hasOwnProperty('ui_control') && msg.ui_control.hasOwnProperty('callback')) // msg origin from callback\n    ) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        if (msg[tableDataProp].hasOwnProperty(tableIndex)) {\n            msg.topic=msg[tableDataProp][tableIndex];\n        } else {\n            status.text=\"msg.topic not defined!\";\n            return [{payload:status},null];\n        }\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).length===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && (Number(msg.topic)-maxRows)>0) {\n        node.send([null, { payload: { \"command\": \"deleteRow\", \"arguments\": [Number(msg.topic)-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.command,\"msg\":msg,\"object\":msg.argument})\n    if (msg.hasOwnProperty(\"command\") && msg.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.argument)) {\n                    status.text=msg.argument+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.argument+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.argument)) {\n                    delete tableData[msg.argument];\n                    status.text=msg.argument+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.argument]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.argument];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.argument]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.argument]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.argument;\n                maxStore=msg.argument;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.argument;\n                maxRows=msg.argument;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        if (msg.ui_control.tabulator.hasOwnProperty('columns')) {\n            msg.ui_control.tabulator.columns.forEach((column,index) => {\n                if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                    column.visible=tableConfig.ResponsiveLayout;\n                    return;\n                }\n            });\n        }\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            // node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "87ead126.bd998",
        "type": "function",
        "z": "dfb163e9.54309",
        "d": true,
        "name": "scan subnet",
        "func": "var ipString = env.get('ipString') || '';\nvar start = env.get('start') || 1;\nvar end = env.get('end') || 255;\nvar suffix = env.get('suffix') || '/json';\n\nif (!msg.payload.hasOwnProperty(\"command\")) { // if no command scan complete subnet\n    for (let i=start; i<end+1; i++){\n        node.send({\"url\":ipString+i+\"/json\"})\n    }\n} else { // message form popup menue\n    switch (msg.payload.command){\n        case \"updateDevice\":\n            if (msg.payload.hasOwnProperty(\"$localip\") && \n                msg.payload.name===\"ESP Easy Mega\") {\n                    node.status({fill:\"green\", shape:\"dot\", text:\"scan \"+msg.payload.$localip})\n                    return({\"url\":\"http://\"+msg.payload.$localip+\"/json\"});\n            }\n            break;\n        case \"updateDevices\":\n            for (let i=start; i<end+1; i++){\n                node.send({\"url\":ipString+i+\"/json\"})\n            }\n            break;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 206,
        "y": 85,
        "wires": [
            []
        ],
        "icon": "node-red/white-globe.svg"
    },
    {
        "id": "e602ede1.36585",
        "type": "function",
        "z": "829b9077.0c8e3",
        "d": true,
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n    \n// deep search for a column\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":\"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\")) {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n    msg.payload=[];\n    for (let device in tableData) {\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[device]) {\n            continue;\n        }\n        // merge edits into table\n        if (tableEdit && tableEdit.hasOwnProperty(device)) {\n            let tableRow = RED.util.cloneMessage(tableData[device]);\n            Object.keys(tableEdit[device]).forEach((field) => {\n                tableRow[field]=tableEdit[device][field];\n            });\n            msg.payload.push(tableRow);\n        } else {\n            msg.payload.push(tableData[device]);\n        }\n    }\n    \n    status.fill=\"blue\";\n    status.text+=\" \"+msg.payload.length+\" rows restored\";\n    return [{payload:status},msg];\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"unknown callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark es edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let device in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(device)) {\n                    msg.ignoredDevices.push({\"text\":device,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":device})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n}\n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "9ad9dc7fd493d504",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Conf_Principal",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar day = date.getDate().toString().padStart(2, '0')\nvar month = (date.getMonth()+1).toString().padStart(2, '0')\nvar year = date.getFullYear()\nvar hours = (date.getHours()-3).toString().padStart(2, '0')\nvar minutes = date.getMinutes().toString().padStart(2, '0')\nvar seconds = date.getSeconds().toString().padStart(2, '0')\nvar current_date = day+\"/\"+month+\"/\"+year;\n\nvar color_values = flow.get(\"color_values\", \"bank1\")\nvar sinalizadores = flow.get('sinalizadores', \"bank1\")\nvar pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nfunction calculaTempo(totalTime){   //recebe em milisegundos\n    var diffDays = Math.floor(totalTime / 86400000); // days\n    var diffHrs = Math.floor((totalTime % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.floor(((totalTime % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    var diffSecs = Math.floor((((totalTime % 86400000) % 3600000) % 60000)/1000);  //seconds\n    diffSecs = diffSecs < 10 ? \"0\" + diffSecs : diffSecs;\n    var testvar = diffHrs + (diffDays*24)\n    var calculatedTime = diffHrs+\":\"+diffMins+\":\"+diffSecs\n    return calculatedTime;\n}\n\n\nvar mensagem = msg.payload  //Ex.: VT300-green\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\nvar current_status = separator[1]  //status Ex.: green\nvar clientID = separator[0] //cliente   Ex.: VT300\n\nvar pos_clientNome\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].clientID == clientID){\n        pos_clientNome = j\n    }\n}\n    \nfor(var i=0; i<sinalizadores.length; i++){ //varre o vetor\n    if(sinalizadores[i].clientID == clientID){   //encontra o sinalizador no vetor\n        pos_atual = i   //guarda a posição desse sinalizador no vetor\n    }\n}\n\n//atualiza o status. Ex: green vira Em operação\nif (current_status == \"green\") {\n    current_status = color_values.green\n}\nelse if (current_status == \"red\") {\n    current_status = color_values.red\n    sinalizadores[pos_atual].stop_counter = sinalizadores[pos_atual].stop_counter + 1 //add contagem de paradas\n}\nelse if (current_status == \"yellow\") {\n    current_status = color_values.yellow\n}\nelse if (current_status == \"blue\") {\n    current_status = color_values.blue\n    sinalizadores[pos_atual].stop_counter = sinalizadores[pos_atual].stop_counter + 1 //add contagem de paradas\n}\nelse if (current_status == \"gray\") {\n    current_status = color_values.gray\n}\n\n//verifica se veio o mesmo status que ja estava\nif(sinalizadores[pos_atual].current_status == current_status){  \n    //node.warn(\"Mesmo status para este sinalizador\")\n}\nelse{\n    //atualiza o tempo \n    var time_status_change = date.getTime()\n    var total_time_last_status = time_status_change - sinalizadores[pos_atual].time_current_status  //tempo total em milisegundos\n\n    if (sinalizadores[pos_atual].current_status == color_values.yellow) {\n        sinalizadores[pos_atual].time_yellow = total_time_last_status + sinalizadores[pos_atual].time_yellow;\n        sinalizadores[pos_atual].time_yellow_str = calculaTempo(sinalizadores[pos_atual].time_yellow)\n    }\n    else if (sinalizadores[pos_atual].current_status == color_values.green) {\n        sinalizadores[pos_atual].time_green = total_time_last_status + sinalizadores[pos_atual].time_green;\n        sinalizadores[pos_atual].time_green_str = calculaTempo(sinalizadores[pos_atual].time_green)\n    }\n    else if (sinalizadores[pos_atual].current_status == color_values.blue) {\n        sinalizadores[pos_atual].time_blue = total_time_last_status + sinalizadores[pos_atual].time_blue;\n        sinalizadores[pos_atual].time_blue_str = calculaTempo(sinalizadores[pos_atual].time_blue)\n    }\n    else if (sinalizadores[pos_atual].current_status == color_values.red) {\n        sinalizadores[pos_atual].time_red = total_time_last_status + sinalizadores[pos_atual].time_red;\n        sinalizadores[pos_atual].time_red_str = calculaTempo(sinalizadores[pos_atual].time_red)\n    }\n    else if (sinalizadores[pos_atual].current_status == color_values.gray) {\n        sinalizadores[pos_atual].time_gray = total_time_last_status + sinalizadores[pos_atual].time_gray;\n        sinalizadores[pos_atual].time_gray_str = calculaTempo(sinalizadores[pos_atual].time_gray)\n    }\n\n    //Se foi uma parada, incrementa o contador de paradas\n    if(current_status == color_values.red || current_status == color_values.blue){\n        ++sinalizadores[pos_atual].stop_counter;\n    }\n\n    //att variaveis\n    sinalizadores[pos_atual].current_status = current_status  //atualiza status\n    sinalizadores[pos_atual].time_current_status = date.getTime()    //atualiza o tempo em milisegundos\n    sinalizadores[pos_atual].time_change_str = new_time //atualiza o tempo formatado\n    sinalizadores[pos_atual].current_date = new_date   //atualiza a data\n}\n\n\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\nmsg = {};\nmsg.payload = sinalizadores\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar pos_atual = 0;\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\nvar color_values = {\n    green   : \"Em operação\",\n    red     : \"Parada não programada\",\n    yellow  : \"Setup\",\n    blue    : \"Parada programada\",\n    gray    : \"Offline\"\n}\n\nflow.set(\"color_values\", color_values, \"bank1\")\n\n",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 660,
        "wires": [
            [
                "1489764.8783b8a"
            ]
        ],
        "info": "Função recebe a mensagem enviada pelo controle (IHM)\n\nCom essa mensagem, ele verifica se está vindo de uma nova torre (não cadastrada) ou de uma torre já cadastrada.\n\nNo caso de uma nova, ele cria um novo objeto para esta nova torre, e inclui no final do vetor de objetos global \"torres\". E atualiza o status.\nNo caso de ser uma mensagem de uma torre já cadastrada, ele atualiza o tempo e o status de acordo com a mensagem."
    },
    {
        "id": "c3d72441871d92e1",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 GREEN",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-00:11:22:33:44:55-green",
        "payloadType": "str",
        "x": 420,
        "y": 1200,
        "wires": [
            [
                "e5650ec4.06045"
            ]
        ]
    },
    {
        "id": "f50fa23cee2de87c",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 RED",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-00:11:22:33:44:55-red",
        "payloadType": "str",
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "58fd4b6c.f12524"
            ]
        ]
    },
    {
        "id": "3d028920833e770e",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 BLUE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-00:11:22:33:44:55-blue",
        "payloadType": "str",
        "x": 410,
        "y": 1280,
        "wires": [
            [
                "c66e0af8.25b4f8"
            ]
        ]
    },
    {
        "id": "9a00df2c24119557",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 YELLOW",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-00:11:22:33:44:55-yellow",
        "payloadType": "str",
        "x": 420,
        "y": 1320,
        "wires": [
            [
                "69bb37ee.e6b6d8"
            ]
        ]
    },
    {
        "id": "a50325b066de72f2",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-green",
        "payloadType": "str",
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "ceb41ec2.f4343"
            ]
        ]
    },
    {
        "id": "00cdf80438abd5b3",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-red",
        "payloadType": "str",
        "x": 400,
        "y": 1660,
        "wires": [
            [
                "841fd246.9d31e"
            ]
        ]
    },
    {
        "id": "d7e8e6269d49bf83",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-blue",
        "payloadType": "str",
        "x": 410,
        "y": 1700,
        "wires": [
            [
                "ee54734a.10e1"
            ]
        ]
    },
    {
        "id": "75655b01a0677888",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-yellow",
        "payloadType": "str",
        "x": 410,
        "y": 1740,
        "wires": [
            [
                "559cec80.5953e4"
            ]
        ]
    },
    {
        "id": "e32c024af412fe5a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Update Function",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar day = date.getDate().toString().padStart(2, '0')\nvar month = (date.getMonth()+1).toString().padStart(2, '0')\nvar year = date.getFullYear()\nvar hours = (date.getHours()-3).toString().padStart(2, '0')\nvar minutes = date.getMinutes().toString().padStart(2, '0')\nvar seconds = date.getSeconds().toString().padStart(2, '0')\nvar current_date = day+\"/\"+month+\"/\"+year;\n\nvar sinalizadores = flow.get('sinalizadores', \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nfunction calculaTempo(totalTime){   //recebe em milisegundos\n    var diffDays = Math.floor(totalTime / 86400000); // days\n    var diffHrs = Math.floor((totalTime % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.floor(((totalTime % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    var diffSecs = Math.floor((((totalTime % 86400000) % 3600000) % 60000)/1000);  //seconds\n    diffSecs = diffSecs < 10 ? \"0\" + diffSecs : diffSecs;\n    var testvar = diffHrs + (diffDays*24)\n    var calculatedTime = diffHrs+\":\"+diffMins+\":\"+diffSecs\n    return calculatedTime;\n}\n\n//atualiza o tempo\nfor(var j=0; j<sinalizadores.length; j++){\n    var time_status_troca = date.getTime()\n    var timeTotal = time_status_troca - sinalizadores[j].time_current_status  //tempo total em milisegundos\n\n    if(sinalizadores[j].current_status == color_values.green){\n        sinalizadores[j].time_green = timeTotal + sinalizadores[j].time_green;\n        sinalizadores[j].time_green_str = calculaTempo(sinalizadores[j].time_green)\n    }\n    else if(sinalizadores[j].current_status == color_values.red){\n        sinalizadores[j].time_red = timeTotal + sinalizadores[j].time_red;\n        sinalizadores[j].time_red_str = calculaTempo(sinalizadores[j].time_red)\n    }\n    else if(sinalizadores[j].current_status == color_values.yellow){\n        sinalizadores[j].time_yellow = timeTotal + sinalizadores[j].time_yellow;\n        sinalizadores[j].time_yellow_str = calculaTempo(sinalizadores[j].time_yellow)\n    }\n    else if(sinalizadores[j].current_status == color_values.blue){\n        sinalizadores[j].time_blue = timeTotal + sinalizadores[j].time_blue;\n        sinalizadores[j].time_blue_str = calculaTempo(sinalizadores[j].time_blue)\n    }\n    else if(sinalizadores[j].current_status == color_values.gray){\n        sinalizadores[j].time_gray = timeTotal + sinalizadores[j].time_gray;\n        sinalizadores[j].time_gray_str = calculaTempo(sinalizadores[j].time_gray)\n    }\n            \n    sinalizadores[j].time_current_status = date.getTime()\n    sinalizadores[j].current_date = new_date\n}\n\n\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\n\nmsg = {};\nmsg.payload = sinalizadores\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 720,
        "wires": [
            [
                "441dc6f0.a03448"
            ]
        ]
    },
    {
        "id": "30115bed7a5f68f1",
        "type": "mqtt in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "topic": "esp32/Sinalizador_IHM",
        "qos": "2",
        "datatype": "auto",
        "broker": "8f859957.374788",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 720,
        "wires": [
            [
                "1f577c9f4883308e",
                "490b47c687aab3d7"
            ]
        ],
        "info": "Tópico resposnsavel por receber mensagem das IHMs.\r\nA mensagem contem um identificador e um status, no seguinte formato:\r\nID-status\r\n\r\nExemplo: test-green"
    },
    {
        "id": "ff4d8bfeb016df28",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "IHM Command",
        "info": "Tópico destinado para receber as mensagens vindas das IHMs, quando algum dos\nseus botões for pressionado.\nA mensagem deve chegar com o seguinte formato: id-macAddress-color\nEx: AA100-00:11:22:33:44:55-green",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "ead8d2a45ff35148",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "Config msg - csv",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar newPayload = {};\n\nvar date = new Date();\n\nvar year = date.getFullYear();\nvar month = date.getMonth() < 9 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1); // getMonth() is zero-based\nvar day  = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\nvar hours = (date.getHours()-3) < 10 ? \"0\" + (date.getHours()-3) : (date.getHours()-3);\nvar minutes = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\nvar seconds = date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds();\n\n\nnewPayload.Cliente = msg.payload[pos_atual].name\nnewPayload.Status = msg.payload[pos_atual].current_status\nnewPayload.Data = msg.payload[pos_atual].current_date\nnewPayload.Tempo_Verde = msg.payload[pos_atual].time_green_str\nnewPayload.Tempo_Vermelho = msg.payload[pos_atual].time_red_str\nnewPayload.Tempo_Amarelo = msg.payload[pos_atual].time_yellow_str\nnewPayload.Tempo_Azul = msg.payload[pos_atual].time_blue_str\nnewPayload.Tempo_Cinza = msg.payload[pos_atual].time_gray_str\nnewPayload.Horario = hours+\":\"+minutes+\":\"+seconds\nnewPayload.Count_stop = msg.payload[pos_atual].stop_counter\n\n// Generate out file name pattern\nmsg.fname = \"Sinalizador\"+newPayload.Cliente+\"-\"+ day + month + year + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/pi/Documents/datalog/Produto/\"+ msg.fname;\n\n// We save the current payload into a different place on the msg object\nmsg.filecontent = newPayload;\n\n// We are passing the file name search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"pattern\":msg.fname};\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.fname});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1880,
        "wires": [
            [
                "d2e8ed9e8e177e17"
            ]
        ],
        "info": "Configuração da mensagem do arquivo .csv que irá ser gerado.\n\nSeta o caminho da pasta onde o arquivo deve ser salvo."
    },
    {
        "id": "9f2ab65af5ae388e",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 1960,
        "wires": [
            [
                "0d9e7426178f8bef"
            ],
            [
                "8da76a3f484aa635"
            ]
        ]
    },
    {
        "id": "8da76a3f484aa635",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1980,
        "wires": [
            [
                "202437dd29801716"
            ]
        ]
    },
    {
        "id": "202437dd29801716",
        "type": "csv",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Cliente,Status,Data,Tempo_Verde,Tempo_Vermelho,Tempo_Amarelo,Tempo_Azul,Tempo_Cinza,Horario,Count_stop",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 1980,
        "wires": [
            [
                "372d856f5ede5f0b"
            ]
        ]
    },
    {
        "id": "0d9e7426178f8bef",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1940,
        "wires": [
            [
                "35b16469ed35b179"
            ]
        ]
    },
    {
        "id": "35b16469ed35b179",
        "type": "csv",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "Cliente,Status,Data,Tempo_Verde,Tempo_Vermelho,Tempo_Amarelo,Tempo_Azul,Tempo_Cinza,Horario,Count_stop",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 1940,
        "wires": [
            [
                "372d856f5ede5f0b"
            ]
        ]
    },
    {
        "id": "372d856f5ede5f0b",
        "type": "file",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 710,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "06b94020e23a6886",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1940,
        "wires": []
    },
    {
        "id": "858736762d7b2457",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "IN_Conf_CSV_VT300",
        "links": [
            "462a057fd489911e",
            "1489764.8783b8a"
        ],
        "x": 135,
        "y": 1880,
        "wires": [
            [
                "ead8d2a45ff35148"
            ]
        ]
    },
    {
        "id": "a4fa91d68005c75c",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "CSV File",
        "info": "Estrutura para gerar o arquivo .csv\n\nestrutura unica para cada sinalizador\n\n",
        "x": 180,
        "y": 1840,
        "wires": []
    },
    {
        "id": "a65068fa74520ce5",
        "type": "mqtt out",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "",
        "topic": "esp32/Sinalizador_Torre",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8f859957.374788",
        "x": 1950,
        "y": 140,
        "wires": []
    },
    {
        "id": "7633ea003f901f3b",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "Config msg torre",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nvar clientID = msg.payload[pos_atual].clientID\nvar current_status = msg.payload[pos_atual].current_status\n\nif(current_status == color_values.green){\n    current_status = \"green\"\n}\nelse if(current_status == color_values.red){\n    current_status = \"red\"\n}\nelse if(current_status == color_values.yellow){\n    current_status = \"yellow\"\n}\nelse if(current_status == color_values.blue){\n    current_status = \"blue\"\n}\n\nvar message = clientID+\"-\"+current_status\n//var mensagem = current_status\n\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 140,
        "wires": [
            [
                "a65068fa74520ce5"
            ]
        ]
    },
    {
        "id": "2740f6f8ddc97348",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "MQTT_OUT",
        "info": "Envia o comando de acionamento para a torre.\n\nPara cada sinalizador, uma estrutura dessa deve ser feita.\n\nPara cada sinalizador deve-se criar um tópico, onde a torre irá se inscrever.",
        "x": 1650,
        "y": 100,
        "wires": []
    },
    {
        "id": "391890a05e4e7ce6",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "IN_MQTT",
        "links": [
            "462a057fd489911e",
            "1489764.8783b8a"
        ],
        "x": 1595,
        "y": 140,
        "wires": [
            [
                "7633ea003f901f3b"
            ]
        ]
    },
    {
        "id": "c48c485455f3bef1",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "links": [
            "462a057fd489911e",
            "cf0515bab0560a30",
            "2a21ffedd6cd0109",
            "1489764.8783b8a",
            "441dc6f0.a03448",
            "f57884c1.34b248",
            "ca1e2b57.702fc8",
            "34540a23.ec7106",
            "9e8a4c4a.e692c"
        ],
        "x": 1855,
        "y": 3040,
        "wires": [
            [
                "10f0149063340a3c"
            ]
        ]
    },
    {
        "id": "aa55b154f711f5e4",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Renomear Sinalizador",
        "info": "",
        "x": 1930,
        "y": 2940,
        "wires": []
    },
    {
        "id": "ab6509ee71a5ccb7",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att variavel para mudar",
        "func": "var id_to_change_name = flow.get(\"id_to_change_name\", \"bank1\")||\" \"\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar name_to_change = msg.payload\n\nfor(var i=0; i<sinalizadores.length; i++){\n    if(sinalizadores[i].name == name_to_change){\n        id_to_change_name = sinalizadores[i].clientID\n    }\n}\n\nflow.set(\"id_to_change_name\", id_to_change_name, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//var id_para_mudar = \" \"0\n//flow.set(\"id_para_mudar\", id_para_mudar, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 3060,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel \"id_para_mudar\", indicando qual o sinalizador que foi selecionado no Drop Down menu para ser renomeado."
    },
    {
        "id": "2c4323711c4c6b8a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "func": "var chatID = msg.payload.chatId;\n\nvar helpMessage = \"/help - Mostra os comandos\";\n\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"/file - arquivo .csv\";\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"/list - lista de Sinalizadores\";\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"\\r\\nYour chat id is: \"+ msg.payload.chatId;\nhelpMessage += \"\\r\\n\"\n\n\n\nmsg.payload.content = helpMessage\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2300,
        "wires": [
            [
                "67ffec7f.df7944"
            ]
        ]
    },
    {
        "id": "7e7745740455865c",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Comando Help",
        "info": "Comando /help do telegram\n\nRetorna o chatID da conversa/grupo",
        "x": 200,
        "y": 2260,
        "wires": []
    },
    {
        "id": "ed3cb095ccee16c9",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "func": "var chatID = flow.get(\"chatID\", \"bank1\");\n\nvar doc = Buffer.from(msg.payload);\n\nvar fileOptions = {\n    filename : msg.filename,\n    contentType : \"text/csv\"\n}\n\nvar payload = {\n    type: \"document\",\n    chatId: chatID,\n    content: doc,\n    fileOptions : fileOptions\n}\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2480,
        "wires": [
            [
                "a8107502.cd6668"
            ]
        ],
        "info": "Prepara o arquivo csv para ser enviado pelo Telegram"
    },
    {
        "id": "032b13e226f6c431",
        "type": "file in",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 710,
        "y": 2480,
        "wires": [
            [
                "ed3cb095ccee16c9"
            ]
        ]
    },
    {
        "id": "3cbc62ef81210202",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "create question",
        "func": "var chatID = msg.payload.chatId;\n\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar arrTorres = []\n\nfor(var i=0; i<sinalizadores.length; i++){\n    arrTorres[i] = sinalizadores[i].name\n}\n\nmsg.payload.type = 'message';\nmsg.payload.content = 'Deseja o arquivo de qual Sinalizador?';\n//msg.payload.options = {reply_to_message_id : msg.payload.messageId}\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    keyboard: [\n      arrTorres],\n      'resize_keyboard' : true, \n      'one_time_keyboard' : true\n  })\n};\n\nmsg.payload.options = opts;\n\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2420,
        "wires": [
            [
                "1e31c57183d924bf"
            ]
        ]
    },
    {
        "id": "b7aaa6e71f1de5e7",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Comando File",
        "info": "Comando /file\n\nFunção: enviar o arquivo .csv do sinalizador desejado\n\nDepois de acionar o comando:\n- Retorna pergunta de qual sinalizador\n- Espera a resposta na mensagem enviada\n- Pega o sinalizador respondido, procura no sistema, busca o arquivo .csv correspondente, e envia o arquivo",
        "x": 190,
        "y": 2380,
        "wires": []
    },
    {
        "id": "d683ec4664b62bc6",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 80,
        "wires": []
    },
    {
        "id": "1f577c9f4883308e",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 680,
        "wires": []
    },
    {
        "id": "5ee484d0ae34f2d3",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "func": "node.warn(\"Oi\")\nvar chatID = msg.payload.chatId;\nflow.set(\"chatID\", chatID, \"bank1\");\n\nvar message = \"Olá, eu sou o Notify Bot!\"\nmessage += \"\\r\\n\"\nmessage += \"Eu te avisarei quando houver algum tipo de parada, em qualquer Sinalizador Notify cadastrado.\"\nmessage += \"\\r\\n\"\nmessage += \"/help: visualizar comandos\"\n\nmsg.payload.content = message\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2140,
        "wires": [
            [
                "6c15a2dc.fcc8ac"
            ]
        ]
    },
    {
        "id": "409c494487c56f04",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Comando Oi",
        "info": "Ao receber um \"Oi\", o bot responde o usuário, se identificando",
        "x": 190,
        "y": 2100,
        "wires": []
    },
    {
        "id": "1909d516da5035e6",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "property": "achou",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sim",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nao",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 2480,
        "wires": [
            [
                "032b13e226f6c431"
            ],
            []
        ]
    },
    {
        "id": "9e59c17584091717",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "func": "var allClients =flow.get(\"allClients\", \"bank1\")\n\nvar chatID = msg.payload.chatId;\n\nvar resposta = \"Segue a lista de Equipamentos Notify cadastrados:\"\nresposta += \"\\r\\n\\r\\n\"\n\nresposta += \"Torres: \"\nresposta += \"\\r\\n\"\nfor(var i=0; i<allClients.length; i++){\n    \n    if(allClients[i].type == \"Torre\"){\n        resposta += \"- \"+allClients[i].name\n        //resposta += \" : \"+allClients[i].conectividade\n        if(allClients[i].connectivity == true){\n            resposta += \" 🟢\"\n        }\n        else if(allClients[i].connectivity == false){\n            resposta += \" 🔴\"\n        }\n        resposta += \"\\r\\n\"\n    }\n}\nresposta += \"\\r\\n\"\nresposta += \"IHMs: \"\nresposta += \"\\r\\n\"\nfor(var j=0; j<allClients.length; j++){\n    \n    if(allClients[j].type == \"IHM\"){\n        resposta += \"- \"+allClients[j].name\n        //resposta += \" : \"+allClients[j].conectividade\n        if(allClients[j].connectivity == true){\n            resposta += \" 🟢\"\n        }\n        else if(allClients[j].connectivity == false){\n            resposta += \" 🔴\"\n        }\n        resposta += \"\\r\\n\"\n    }\n    \n}\n\nmsg.payload.content = resposta\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2620,
        "wires": [
            [
                "d677f52c01d3fdd4"
            ]
        ]
    },
    {
        "id": "e44f420d4f21a748",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Comando List",
        "info": "Comando /list: bot retorna uma lista com os sinalizadores cadastrados ",
        "x": 190,
        "y": 2580,
        "wires": []
    },
    {
        "id": "441819dbc0ae1969",
        "type": "change",
        "z": "986afd82ee909974",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "stopLog",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "resumo_sinalizadores",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2480,
        "y": 4660,
        "wires": [
            []
        ]
    },
    {
        "id": "18aebb78285cf32a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "É um comando?",
        "func": "var message = msg.payload.content\nvar resposta\nvar chatID = msg.payload.chatId;\n\n\nvar allClients = flow.get(\"allClients\", \"bank1\")||[]\nvar isCliente = false\nvar isComando = false\n\nvar comandos = [[\"oi\"],\n                [\"Oi\"],\n                [\"/list\"],\n                [\"/help\"],\n                [\"/file\"],\n                [\"SIM\"],\n                [\"NAO\"],\n                [\"/reset\"]\n]\n\nfor(var i=0; i<allClients.length; i++){\n    if(message == allClients[i].name){\n        isCliente = true\n    }\n}\n\nfor(var j=0; j<comandos.length; j++){\n    if(comandos[j] == message){\n        isComando = true\n    }\n}\n\nif(isCliente == false && isComando == false){\n    node.warn(\"Mensagem diferente de qualquer comando que eu aceito\")\n    resposta = \"Desculpa, não reconheço este comando. Para visualizar os comandos, digite /help\"\n}\n\n\nmsg.payload.content = resposta\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2760,
        "wires": [
            [
                "355648fedf17ab71"
            ]
        ],
        "info": "Verifica se é algum comando. Se não for, ele responde dizendo que não reconheceu o comando e diz que se o usuario quiser verificar os comandos, basta digital /help"
    },
    {
        "id": "658d22dfaafc1d6b",
        "type": "mqtt in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "topic": "esp32/connection",
        "qos": "2",
        "datatype": "auto",
        "broker": "8f859957.374788",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 980,
        "wires": [
            [
                "dd995a651d1dc7ec"
            ]
        ],
        "info": "Topico onde os ESPs vao responder a chamada"
    },
    {
        "id": "1770ab66cbba92f4",
        "type": "mqtt out",
        "z": "986afd82ee909974",
        "name": "",
        "topic": "esp32/hi",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8f859957.374788",
        "x": 2160,
        "y": 4480,
        "wires": [],
        "info": "Topico onde o broker vai realizar uma chamada para todos os ESPs."
    },
    {
        "id": "b05ed611a3745a70",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "Chamada",
        "func": "var askForClients = \"hi\"\n\nmsg.payload = askForClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 4480,
        "wires": [
            [
                "1770ab66cbba92f4"
            ]
        ]
    },
    {
        "id": "dd995a651d1dc7ec",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Preenche chamada",
        "func": "var chamada = flow.get(\"chamada\")||[];\n\nvar objChamada = {};\n\nvar mensagem = msg.payload  //Ex.: AA100-IHM\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\nobjChamada.clientID = separator[0] //cliente   Ex.: AA100\nobjChamada.type = separator[1]  //Ex: IHM \n\nvar podeAdicionar = true\n\nfor(var j=0; j<chamada.length; j++){\n    if(chamada[j].clientID == objChamada.clientID && chamada[j].type == objChamada.type){ //se ja existe no vetor\n        podeAdicionar = false\n    }\n}\n\nif(podeAdicionar == true){\n    chamada.push(objChamada)\n}\n\n\nflow.set(\"chamada\", chamada)\n\nmsg.payload = chamada\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 980,
        "wires": [
            []
        ],
        "info": "Recebe a resposta dos ESPs, e cria um vetor com todos que responderam"
    },
    {
        "id": "f9d782fc897ce1c8",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 4520,
        "wires": [
            [
                "5b6cdffd.a2d7b"
            ]
        ]
    },
    {
        "id": "6abd5399b6a496f2",
        "type": "delay",
        "z": "986afd82ee909974",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2000,
        "y": 4540,
        "wires": [
            [
                "69fd460ee859c6e1"
            ]
        ]
    },
    {
        "id": "69fd460ee859c6e1",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "Confere a chamada",
        "func": "var chamada = flow.get(\"chamada\")||[]\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\n var isOnline = false\n\nfor(var i=0; i<allClients.length; i++){\n    \n    for(var j=0; j<chamada.length; j++){\n        \n        if(allClients[i].clientID === chamada[j].clientID){\n            \n            if(allClients[i].type === chamada[j].type){\n                //client online\n                isOnline = true; \n            }\n              \n        }\n    }\n    if(isOnline == true){\n        allClients[i].connectivity = true\n    }\n    else{\n        allClients[i].connectivity = false\n    }\n    isOnline = false\n}\n\nchamada = []\n\nflow.set(\"chamada\", chamada)\nflow.set(\"allClients\", allClients, \"bank1\")\n\nmsg.payload = chamada\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 4540,
        "wires": [
            []
        ],
        "info": "Depois de esperar 5s da chamada, verifica quem respondeu, e atualiza a variavel \"conectividade\" de cada cliente, com \"Offline\" ou \"Online\"."
    },
    {
        "id": "0912e56897103f92",
        "type": "mqtt in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "topic": "esp32/compliment",
        "qos": "2",
        "datatype": "auto",
        "broker": "8f859957.374788",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "5a000ad0.28af04",
                "976e9fb.59cb36",
                "d348875d72c343bc"
            ]
        ],
        "info": "Topico onde os ESPs vao se apresentar toda vez que se conectarem com o broker\r\n\r\nA mensagem contem um identificador e seu mac address, no seguinte formato:\r\nID-mac address\r\n\r\nExemplo: test-9C:9C:1F:C5:A3:88"
    },
    {
        "id": "4265364ec833c5f8",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Cadastra equipamento",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar podeAdd = true\nvar allClients = flow.get(\"allClients\", \"bank1\")||[]\n\nvar cliente = {};\n\nvar mensagem = msg.payload  //Ex.: AA100-IHM-00:11:22:33:44:55\nvar separator = mensagem.split(\"-\")  //separa a mensagem\n\nvar pos\n\n//verifica se esse cliente eh novo ou nao\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].macAdd == separator[2]){   //equipamento ja cadastrado\n        pos = j;\n        podeAdd = false\n        allClients[j].connectivity = true   //atualiza status de conexão\n        allClients[j].current_date = new_date   //atualiza data atual\n    }\n}\n\ncliente.clientID = separator[0] //cliente   Ex.: AA100\ncliente.name = separator[0]     //nome. Default = ID\ncliente.type = separator[1]  //Ex: IHM \ncliente.macAdd = separator[2]   //Ex: 00:11:22:33:44:55\ncliente.connectivity = true\ncliente.registration_date = new_date\ncliente.registration_time = new_time\ncliente.current_date = new_date\ncliente.connection_lost = 0\n\nif(podeAdd == true){    //novo equipamento - insere na lista\n    allClients.push(cliente)\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\n\nmsg.payload = allClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "2a21ffedd6cd0109"
            ]
        ],
        "info": "Recebe o cumprimento de cada aparelho conectado com o broker, e inclui no vetor de clientes"
    },
    {
        "id": "ef8685af138873ec",
        "type": "comment",
        "z": "986afd82ee909974",
        "name": "Chamada dos clients",
        "info": "A cada 10 minutos, é feito uma especie de chamada para todos os clientes.\n",
        "x": 1720,
        "y": 4480,
        "wires": []
    },
    {
        "id": "2a21ffedd6cd0109",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "mode": "link",
        "links": [
            "574a0282.5c107c",
            "88dc9aec1d9026cd",
            "c48c485455f3bef1"
        ],
        "x": 755,
        "y": 320,
        "wires": []
    },
    {
        "id": "3c96ffbee587d319",
        "type": "delay",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 320,
        "y": 2620,
        "wires": [
            [
                "9e59c17584091717"
            ]
        ]
    },
    {
        "id": "69c5658159d06be5",
        "type": "comment",
        "z": "986afd82ee909974",
        "name": "Reseta Sinalizadores",
        "info": "Os sinalizadores serão resetados, automaticamente, todos os dias, à meia-noite.\nOu podem ser resetados manualmente através da dashboard, pelo botão reset sinalizadores.",
        "x": 1720,
        "y": 4620,
        "wires": []
    },
    {
        "id": "aea29f17af494767",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "ESP is Connected",
        "info": "Toda vez que um ESP se conecta com o broker, ele envia uma mensagem contendo seu ID e seu tipo. EX: AA100-Torre",
        "x": 170,
        "y": 320,
        "wires": []
    },
    {
        "id": "7b5e9835b4de4932",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "switch answer",
        "func": "var date = new Date();\nvar year = date.getFullYear();\nvar month = date.getMonth() < 9 ? \"0\" + (date.getMonth() + 1) : (date.getMonth() + 1); // getMonth() is zero-based\nvar day  = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\nvar hours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\nvar minutes  = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n\nvar sinalizador_selecionado = msg.payload.content\nvar achou = \"nao\";\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar position\nfor(var i=0; i<sinalizadores.length; i++){\n    if(sinalizadores[i].name == sinalizador_selecionado){\n        position = i\n        node.warn(\"Achei\")\n        achou = \"sim\";\n        \n    }\n}\n\nif(achou == \"sim\"){\n    var fname = \"Sinalizador\"+sinalizadores[position].name+\"-\"+ day + month + year + \".csv\";\n    msg.filename = \"/home/pi/Documents/datalog/Produto/\"+fname\n}\nelse{\n    achou = \"nao\"\n}\n\nmsg.achou = achou;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2480,
        "wires": [
            [
                "1909d516da5035e6"
            ]
        ],
        "info": "Recebe a resposta do usuário, e checa se existe o Sinalizador que ele escreveu.\n\n- Se sim, retorna o arquivo correspondente;\n- Se nao, avisa o usuario que nao encontrou"
    },
    {
        "id": "60654806529f49f0",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Confirm reset",
        "func": "msg.payload.type = 'message';\nmsg.payload.content = 'Tem certeza de que deseja realizar o reset dos sinalizadores?';\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    keyboard: [\n      ['SIM'],\n      ['NAO']],\n      'resize_keyboard' : true, \n      'one_time_keyboard' : true\n  })\n};\n\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2880,
        "wires": [
            [
                "e83b3cf3e62ee5c3"
            ]
        ]
    },
    {
        "id": "a5e6e7cf17490c11",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SIM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NAO",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 2940,
        "wires": [
            [
                "3391b238.6dcc5e"
            ],
            []
        ]
    },
    {
        "id": "7ebc07e0d6119bb8",
        "type": "change",
        "z": "986afd82ee909974",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Confirmação Reiniciar",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Tem certeza de que quer reiniciar os sinalizadores?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 4660,
        "wires": [
            [
                "df34d2682e6ca66b"
            ]
        ]
    },
    {
        "id": "564e86643330d46b",
        "type": "switch",
        "z": "986afd82ee909974",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2290,
        "y": 4660,
        "wires": [
            [
                "441819dbc0ae1969"
            ]
        ]
    },
    {
        "id": "f85853f3.3244b",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "Full events array",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\n\nvar newPayload = {}\n\n//passa os parametros para outra variavel\nnewPayload.clientID = msg.payload[pos_atual].clientID                   //ID do cliente (String)\nnewPayload.name = msg.payload[pos_atual].name                           //nome do cliente (String)\nnewPayload.current_status = msg.payload[pos_atual].current_status       //status atual (String)\nnewPayload.time_change_str = msg.payload[pos_atual].time_change_str     //tempo da mudança de status (String)\nnewPayload.current_date = msg.payload[pos_atual].current_date           //data atual (String)\nnewPayload.time_started = msg.payload[pos_atual].time_current_status    //tempo que esse status iniciou (int milisegundos)\nnewPayload.time_ended = 0                                               //tempo que esse status finalizou (int)\n\n\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")||[]\nvar new_line = true\n\nfor(var j=resumo_sinalizadores.length-1; j>=0; j--){\n    if(resumo_sinalizadores[j].clientID == newPayload.clientID){\n        if (resumo_sinalizadores[j].current_status == newPayload.current_status) {\n            new_line = false\n            break\n        }\n        break\n    }\n    \n}\n\nif(new_line == true){\n    resumo_sinalizadores.push(newPayload)\n    if (resumo_sinalizadores.length > 1000) {\n        // Delete oldest message if > 1000\n        resumo_sinalizadores.shift();\n        resumo_sinalizadores.length = 1000;\n    }\n\n    for (var i = resumo_sinalizadores.length - 2; i >= 0; i--) {\n        if (resumo_sinalizadores[i].clientID == newPayload.clientID) {//achou o evento anterior do mesmo sinalizador\n            resumo_sinalizadores[i].time_ended = newPayload.time_started    //att tempo de fim daquele evento\n            break;\n        }\n    }\n}\nelse{\n    node.warn(\"Sinalizador ja estava neste status - nao add log\")\n}\n\n\nflow.set(\"resumo_sinalizadores\", resumo_sinalizadores, \"bank1\")\n\n\nmsg = {}\nmsg.payload = resumo_sinalizadores\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 660,
        "wires": [
            [
                "9d54fb4c.b5b728"
            ]
        ]
    },
    {
        "id": "69a29a44.5a2594",
        "type": "link in",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "462a057fd489911e",
            "1489764.8783b8a"
        ],
        "x": 1615,
        "y": 660,
        "wires": [
            [
                "f85853f3.3244b"
            ]
        ]
    },
    {
        "id": "25a15ae6.a99d26",
        "type": "comment",
        "z": "986afd82ee909974",
        "name": "Lista todos os eventos",
        "info": "Lista todos os eventos de todos os Sinalizadores, dentro de uma array.\nEvento = botão pressionado\n\nCada objeto contem:\n - ID: cientID\n - Nome: name\n - Status atual: current_status\n - Hora da troca: time_change_str\n - Data: current_date",
        "x": 1700,
        "y": 620,
        "wires": []
    },
    {
        "id": "1489764.8783b8a",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "mode": "link",
        "links": [
            "391890a05e4e7ce6",
            "69a29a44.5a2594",
            "784567b1707f266a",
            "858736762d7b2457",
            "88dc9aec1d9026cd",
            "c48c485455f3bef1",
            "d0232751d7d8859b",
            "d3cbcda1.c274b"
        ],
        "x": 875,
        "y": 660,
        "wires": []
    },
    {
        "id": "441dc6f0.a03448",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "784567b1707f266a",
            "88dc9aec1d9026cd",
            "1898153b.159a6b",
            "c48c485455f3bef1",
            "574a0282.5c107c"
        ],
        "x": 875,
        "y": 720,
        "wires": []
    },
    {
        "id": "54f39603.5f2018",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 IHM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-ihm-00:11:22:33:44:55",
        "payloadType": "str",
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "8652110a.c6eb1"
            ]
        ]
    },
    {
        "id": "4de9cd37.499e04",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AA100 Torre",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AA100-signalyzer-55:44:33:22:11:00",
        "payloadType": "str",
        "x": 170,
        "y": 1120,
        "wires": [
            [
                "597484fd.12ea8c"
            ]
        ]
    },
    {
        "id": "28e527c8.6f0a48",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AB100 IHM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-ihm-AA:BB:CC:DD:EE:FF",
        "payloadType": "str",
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "b3be575c.62e288"
            ]
        ]
    },
    {
        "id": "ac4d7567.dfe7a8",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AB100 Torre",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AB100-signalyzer-FF:EE:DD:CC:BB:AA",
        "payloadType": "str",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "aed4dae.7383728"
            ]
        ]
    },
    {
        "id": "6bcdd152.6258a",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Excluir Sinalizador",
        "info": "",
        "x": 1920,
        "y": 2900,
        "wires": []
    },
    {
        "id": "10f0149063340a3c",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "List Clients",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar i\nvar client_array = []\n\n\nfunction removeDuplicates(arr) {\n    return arr.filter((item, \n        index) => arr.indexOf(item) === index);\n}\n\nfor(var j=0; j<allClients.length; j++){\n    client_array[j] = allClients[j].name\n}\n\nclient_array = removeDuplicates(client_array)\nclient_array = client_array.sort()\n\nmsg = {};\nmsg.options = client_array\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "297cc793.e52118",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att Variavel para excluir",
        "func": "var id_to_delete = flow.get(\"id_to_delete\", \"bank1\")||\" \"\nvar sinalizadores = flow.get(\"sinalizadores\",\"bank1\")\nvar name_to_delete = msg.payload    //reccebe o nome do sinalizador para excluir\n\n//procura pelo sinalizador cujo nome foi passado, e pega o ID dele\nfor(var i=0; i<sinalizadores.length; i++){ \n    if(sinalizadores[i].name == name_to_delete){\n        id_to_delete = sinalizadores[i].clientID\n    }\n}\n\nflow.set(\"id_to_delete\", id_to_delete, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//var id_para_excluir = \" \"\n//flow.set(\"id_para_excluir\", id_para_excluir, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 3020,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel \"id_para_excluir\", indicando qual o sinalizador que foi selecionado no Drop Down menu para ser excluído."
    },
    {
        "id": "6117f459.9ed8dc",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Exclui Sinalizador ",
        "func": "var id_to_delete = flow.get(\"id_to_delete\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\n\n//deleta do vetor sinalizadores\nfor(var i=0; i<sinalizadores.length; i++){\n    if (sinalizadores[i].clientID == id_to_delete){\n        sinalizadores.splice(i, 1);\n    }\n}\n\n//deleta do vetor allClients\nfor(var j=0; j<allClients.length; j++){\n    if (allClients[j].clientID == id_to_delete){\n        allClients.splice(j, 1);\n        --j;\n    }\n}\n\n//deleta do vetor resumo_sinalizadores\nfor(var k=0; k<resumo_sinalizadores.length; k++){\n    if(resumo_sinalizadores[k].clientID == id_to_delete){\n        resumo_sinalizadores.splice(k, 1)\n        --k;\n    }\n}\n\n//att vetores flow\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\nflow.set(\"allClients\", allClients, \"bank1\")\nflow.set(\"resumo_sinalizadores\", resumo_sinalizadores, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 3480,
        "wires": [
            [
                "34540a23.ec7106"
            ]
        ],
        "info": "Função que exclui o sinalizador selecionado pelo Drop Down menu\nRetira ele da lista de objetos \"sinalizadores\" e \"allClients\""
    },
    {
        "id": "bc2a2fd6.cc499",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Clear input ",
        "func": "msg = {}\nmsg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 3240,
        "wires": [
            [
                "effd9e0f8c88bc45"
            ]
        ]
    },
    {
        "id": "29c7f485.1eab0c",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "links": [
            "f57884c1.34b248",
            "ca1e2b57.702fc8",
            "34540a23.ec7106"
        ],
        "x": 1695,
        "y": 3240,
        "wires": [
            [
                "bc2a2fd6.cc499"
            ]
        ]
    },
    {
        "id": "f57884c1.34b248",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "mode": "link",
        "links": [
            "29c7f485.1eab0c",
            "8f2ddbf9.030d88",
            "c48c485455f3bef1",
            "ae55c09bfb767c69"
        ],
        "x": 1795,
        "y": 3080,
        "wires": []
    },
    {
        "id": "848fe849.c216e8",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Confere novo nome",
        "func": "var new_name = flow.get(\"new_name\")\nnew_name = msg.payload\n//var id_para_mudar = flow.get(\"id_para_mudar\", \"bank1\")\nvar position\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nnode.warn(new_name)\n\nvar name_can_change = flow.get(\"name_can_change\")\nname_can_change = true\n\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].name == new_name){\n        node.warn(\"Esse nome ja esta sendo utilizado por outro equipamento!\")\n        name_can_change = false\n    }\n}\n\nflow.set(\"new_name\", new_name)\nflow.set(\"name_can_change\", name_can_change)\nmsg = {};\nmsg.payload = name_can_change\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar new_name = \"\"\nflow.set(\"new_name\", new_name)\n\nvar name_can_change = true\nflow.set(\"name_can_change\", name_can_change)",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "c2592d82.0954",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "func": "var name_can_change = flow.get(\"name_can_change\")\n\nmsg = {}\nmsg.payload = name_can_change\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3420,
        "wires": [
            [
                "31bd603a.0a4c2"
            ]
        ]
    },
    {
        "id": "31bd603a.0a4c2",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2150,
        "y": 3420,
        "wires": [
            [
                "2d7adbbe.106514",
                "a7cfe588245ed7f5"
            ],
            [
                "5ce3fe80.ebb2d"
            ]
        ]
    },
    {
        "id": "2d7adbbe.106514",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att novo nome",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n//var resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar id_to_change_name = flow.get(\"id_to_change_name\", \"bank1\")\nvar new_name = flow.get(\"new_name\")\n\n\nfor(var j=0; j<allClients.length; j++){\n    if (allClients[j].clientID == id_to_change_name){\n        allClients[j].name = new_name\n    }\n}\n\nfor(var i=0; i<sinalizadores.length; i++){\n    if (sinalizadores[i].clientID == id_to_change_name){\n        sinalizadores[i].name = new_name\n    }\n}\n\n/*\nfor(var l=0; l<resumo_sinalizadores.length; l++){\n    if(resumo_sinalizadores[l].nome == id_para_mudar){\n        resumo_sinalizadores[l].nome = new_name\n    }\n}\n*/\n\nflow.set(\"allClients\", allClients, \"bank1\")\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\n//flow.set(\"resumo_sinalizadores\", resumo_sinalizadores, \"bank1\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3400,
        "wires": [
            [
                "ca1e2b57.702fc8"
            ]
        ],
        "info": "Atualiza o novo nome do sinalizador selecionado para renomear.\nAtualiza nas variaveis \"sinalizadores\" e \"allClients\""
    },
    {
        "id": "5ce3fe80.ebb2d",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Nome ja usado",
        "func": "msg = {}\nmsg.topic = \"AVISO\"\nmsg.payload = \"Este nome já está sendo utilizado. Digite outro nome.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 3440,
        "wires": [
            [
                "24302e8f.c58b02"
            ]
        ]
    },
    {
        "id": "ca1e2b57.702fc8",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "links": [
            "29c7f485.1eab0c",
            "1898153b.159a6b",
            "784567b1707f266a",
            "c48c485455f3bef1"
        ],
        "x": 2455,
        "y": 3400,
        "wires": []
    },
    {
        "id": "a805550e.521c18",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Confirmação Excluir",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Tem certeza de que quer excluir esse sinalizadore?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2030,
        "y": 3480,
        "wires": [
            [
                "6f36f15d.4a451"
            ]
        ]
    },
    {
        "id": "712da170.ac1f2",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2350,
        "y": 3480,
        "wires": [
            [
                "6117f459.9ed8dc",
                "ecf796734a073562"
            ]
        ]
    },
    {
        "id": "34540a23.ec7106",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "links": [
            "29c7f485.1eab0c",
            "c48c485455f3bef1",
            "1898153b.159a6b",
            "784567b1707f266a",
            "ae55c09bfb767c69"
        ],
        "x": 2655,
        "y": 3480,
        "wires": []
    },
    {
        "id": "66101c35.0443e4",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "bbd23c5.f5643c",
            "ceb41ec2.f4343",
            "841fd246.9d31e",
            "ee54734a.10e1",
            "559cec80.5953e4",
            "a4c94323.4dccf"
        ],
        "x": 635,
        "y": 660,
        "wires": [
            [
                "9ad9dc7fd493d504"
            ]
        ]
    },
    {
        "id": "8f2ddbf9.030d88",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "9e8a4c4a.e692c",
            "f57884c1.34b248"
        ],
        "x": 635,
        "y": 720,
        "wires": [
            [
                "e32c024af412fe5a"
            ]
        ]
    },
    {
        "id": "bbd23c5.f5643c",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 355,
        "y": 720,
        "wires": []
    },
    {
        "id": "e5650ec4.06045",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "6dd659648d5eedf5"
        ],
        "x": 555,
        "y": 1200,
        "wires": []
    },
    {
        "id": "58fd4b6c.f12524",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "6dd659648d5eedf5"
        ],
        "x": 555,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c66e0af8.25b4f8",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "6dd659648d5eedf5"
        ],
        "x": 555,
        "y": 1280,
        "wires": []
    },
    {
        "id": "69bb37ee.e6b6d8",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "6dd659648d5eedf5"
        ],
        "x": 555,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ceb41ec2.f4343",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 515,
        "y": 1620,
        "wires": []
    },
    {
        "id": "841fd246.9d31e",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 495,
        "y": 1660,
        "wires": []
    },
    {
        "id": "ee54734a.10e1",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 515,
        "y": 1700,
        "wires": []
    },
    {
        "id": "559cec80.5953e4",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 515,
        "y": 1740,
        "wires": []
    },
    {
        "id": "9e8a4c4a.e692c",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "8f2ddbf9.030d88",
            "c48c485455f3bef1",
            "d3cbcda1.c274b"
        ],
        "x": 275,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f0ea0153.5a50b",
        "type": "mqtt in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "topic": "willTopic",
        "qos": "2",
        "datatype": "auto",
        "broker": "8f859957.374788",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "70bd1062.f436f",
                "21d92f88bab1646b"
            ]
        ]
    },
    {
        "id": "70bd1062.f436f",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Att conectividade",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar mensagem = msg.payload  //Ex: AA100-IHM-00:11:22:33:44:55\nvar separator = mensagem.split(\"-\")  //separa a mensagem\n\nvar id = separator[0]\nvar type = separator[1]\n\nmsg = {};\n\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].clientID == id && allClients[i].type == type){\n\n        if(allClients[i].connectivity != false){    //confere se ja nao estava em falso\n            allClients[i].connectivity = false\n            msg.payload = allClients[i].clientID + \"-gray\"\n            ++allClients[i].connection_lost;\n        }\n    }\n}\nfor (var j=0; j< sinalizadores.length; j++){\n    if(sinalizadores[j].clientID == id){\n        if(type == \"IHM\" && sinalizadores[j].ihm_connectivity != false){\n            sinalizadores[j].ihm_connectivity = false\n        }\n        else if (type == \"Torre\" && sinalizadores[j].tower_connectivity != false){\n            sinalizadores[j].tower_connectivity = false\n        }\n    }\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 140,
        "wires": [
            [
                "a4c94323.4dccf"
            ]
        ]
    },
    {
        "id": "e5fe689d.ece6a8",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "LWT check",
        "info": "",
        "x": 140,
        "y": 100,
        "wires": []
    },
    {
        "id": "366812e1.4d83fe",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "3449de0a.70f5c2",
            "6c15a2dc.fcc8ac",
            "67ffec7f.df7944",
            "a8107502.cd6668"
        ],
        "x": 795,
        "y": 2140,
        "wires": [
            [
                "790d909757b2b6a4"
            ]
        ]
    },
    {
        "id": "6c15a2dc.fcc8ac",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "366812e1.4d83fe"
        ],
        "x": 415,
        "y": 2140,
        "wires": []
    },
    {
        "id": "67ffec7f.df7944",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "366812e1.4d83fe"
        ],
        "x": 415,
        "y": 2300,
        "wires": []
    },
    {
        "id": "a8107502.cd6668",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "366812e1.4d83fe"
        ],
        "x": 975,
        "y": 2480,
        "wires": []
    },
    {
        "id": "64b5c749.eebb08",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "5a000ad0.28af04"
        ],
        "x": 475,
        "y": 320,
        "wires": [
            [
                "4265364ec833c5f8",
                "54e352c8.74056c",
                "8fbc8760c50db03c"
            ]
        ]
    },
    {
        "id": "597484fd.12ea8c",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "f3de6f1501163f3f"
        ],
        "x": 275,
        "y": 1120,
        "wires": []
    },
    {
        "id": "5a000ad0.28af04",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "links": [
            "64b5c749.eebb08",
            "9b08c959.7f03d8"
        ],
        "x": 295,
        "y": 360,
        "wires": []
    },
    {
        "id": "8652110a.c6eb1",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "f3de6f1501163f3f"
        ],
        "x": 275,
        "y": 1160,
        "wires": []
    },
    {
        "id": "aed4dae.7383728",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "f3de6f1501163f3f"
        ],
        "x": 275,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b3be575c.62e288",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "f3de6f1501163f3f"
        ],
        "x": 275,
        "y": 1260,
        "wires": []
    },
    {
        "id": "53f8a41a.fc9d1c",
        "type": "link in",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "5dfae462.2f63fc"
        ],
        "x": 1895,
        "y": 4480,
        "wires": [
            [
                "b05ed611a3745a70"
            ]
        ]
    },
    {
        "id": "5b6cdffd.a2d7b",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [],
        "x": 1825,
        "y": 4520,
        "wires": []
    },
    {
        "id": "3650a27e.536ade",
        "type": "link in",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "5dfae462.2f63fc"
        ],
        "x": 1895,
        "y": 4540,
        "wires": [
            [
                "6abd5399b6a496f2"
            ]
        ]
    },
    {
        "id": "5dfae462.2f63fc",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "3650a27e.536ade",
            "53f8a41a.fc9d1c"
        ],
        "x": 275,
        "y": 2660,
        "wires": []
    },
    {
        "id": "3391b238.6dcc5e",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "links": [
            "dee0db1d.699398"
        ],
        "x": 495,
        "y": 2940,
        "wires": []
    },
    {
        "id": "dee0db1d.699398",
        "type": "link in",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "3391b238.6dcc5e"
        ],
        "x": 2355,
        "y": 4700,
        "wires": [
            [
                "441819dbc0ae1969"
            ]
        ]
    },
    {
        "id": "54e352c8.74056c",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Cadastra Sinalizador",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")||[]\nvar sinalizador = {};\n\nvar mensagem = msg.payload  //Ex.: AA100-IHM-00:11:22:33:44:55\nvar separator = mensagem.split(\"-\")  //separa a mensagem\nvar clientID = separator[0]\nvar type = separator[1]\nvar macAdd = separator[2]\n\nvar position\nvar exist = false\n\nfor(var i=0; i<sinalizadores.length; i++){  //varre o vetor sinalizadores\n    \n    if(sinalizadores[i].clientID == clientID){  //se encontrou sinalizador com mesmo clientID\n        position = i\n        exist = true\n        if(type == \"ihm\"){\n            sinalizadores[i].ihm_connectivity = true\n        }\n        else{\n            sinalizadores[i].tower_connectivity = true\n        }\n    }\n}\n\nif(exist == true){  //sinalizador ja existe no vetor\n    if(type == \"ihm\" && sinalizadores[position].ihm_mac == \"\"){   //IHM ainda nao cadastrada\n        sinalizadores[position].ihm_mac = macAdd\n        sinalizadores[position].ihm_connectivity = true\n    }\n  \n    else if(type == \"signalyzer\" && sinalizadores[position].tower_mac == \"\"){  //Torre ainda nao cadastrada\n        sinalizadores[position].tower_mac = macAdd\n        sinalizadores[position].tower_connectivity = true\n    }\n}\nelse{   //add novo sinalizador no vetor\n    sinalizador.clientID = clientID\n    sinalizador.name = clientID\n    sinalizador.current_status = \"\"\n    sinalizador.current_date = new_date\n    sinalizador.time_green = 0\n    sinalizador.time_red = 0\n    sinalizador.time_yellow = 0\n    sinalizador.time_blue = 0\n    sinalizador.time_gray = 0\n    sinalizador.time_green_str = \"00:00:00\"\n    sinalizador.time_red_str = \"00:00:00\"\n    sinalizador.time_yellow_str = \"00:00:00\"\n    sinalizador.time_blue_str = \"00:00:00\"\n    sinalizador.time_gray_str = \"00:00:00\"\n    sinalizador.time_current_status = 0\n    sinalizador.time_change_str = \"00:00:00\"\n    sinalizador.stop_counter = 0\n    \n    if(type == \"ihm\"){\n        sinalizador.ihm_mac = macAdd\n        sinalizador.tower_mac = \"\"\n        sinalizador.ihm_connectivity = true\n    }\n    else if(type == \"signalyzer\"){\n        sinalizador.ihm_mac = \"\"\n        sinalizador.tower_mac = macAdd\n        sinalizador.tower_connectivity = true\n    }\n    \n    sinalizadores.push(sinalizador)\n}\n\n\nflow.set(\"sinalizadores\", sinalizadores, \"bank1\")\n\nmsg = {}\nmsg.payload = sinalizadores\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "2a21ffedd6cd0109"
            ]
        ],
        "info": "Gerencia o vetor sinalizadores"
    },
    {
        "id": "a30ecc55.8bb3d",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Verifica mensagem recebida",
        "info": "",
        "x": 240,
        "y": 2720,
        "wires": []
    },
    {
        "id": "40578a8b.8eba64",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Reset sinalizadores",
        "info": "",
        "x": 210,
        "y": 2840,
        "wires": []
    },
    {
        "id": "976e9fb.59cb36",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 280,
        "wires": []
    },
    {
        "id": "69cbe048.65839",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "a4a54ce4.ad0f6",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "Generate array for csv",
        "func": "var resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar sinalizador_name = flow.get(\"sinalizador_csv\", \"bank1\")\n\nvar date_begin = msg.payload.date_begin\nvar date_end = msg.payload.date_end\n\nvar separator_date_begin = date_begin.split(\"T\")\nvar separator_date_end = date_end.split(\"T\")\n\nvar new_date_begin = separator_date_begin[0]\nvar new_date_end = separator_date_end[0]\n\nvar new_separator_date_begin = new_date_begin.split(\"-\")\nvar new_separator_date_end = new_date_end.split(\"-\")\n\nvar day_begin = new_separator_date_begin[2]\nvar month_begin = new_separator_date_begin[1]\nvar year_begin = new_separator_date_begin[0]\n\nvar day_end = new_separator_date_end[2]\nvar month_end = new_separator_date_end[1]\nvar year_end = new_separator_date_end[0]\n\nvar formated_date_begin = day_begin+\"/\"+month_begin+\"/\"+year_begin\nvar formated_date_end = day_end+\"/\"+month_end+\"/\"+year_end\n\nvar sinalizador_array = []\n\nfunction checkDate(date_resumo_str, date_begin, date_end){\n    \n    var d1 = date_begin.split(\"/\");\n    var d2 = date_end.split(\"/\");\n    var c = date_resumo_str.split(\"/\");\n    \n    var from = new Date(d1[2], parseInt(d1[1])-1, d1[0]);  // -1 because months are from 0 to 11\n    var to   = new Date(d2[2], parseInt(d2[1])-1, d2[0]);\n    var check = new Date(c[2], parseInt(c[1])-1, c[0]);\n    \n    if(check >= from && check <= to){\n        return true\n    }\n    else{\n        return false\n    }\n}\n\n//encontra o sinalizador selecionado pelo usuario\nfor(var i=0; i<resumo_sinalizadores.length; i++){\n    if(resumo_sinalizadores[i].name == sinalizador_name){\n        var flag = checkDate(resumo_sinalizadores[i].current_date, formated_date_begin, formated_date_end)\n        \n        if(flag == true){\n            sinalizador_array.push(resumo_sinalizadores[i])\n        }\n    }\n}\n\n\n// Generate out file name pattern\nmsg.fname = \"Sinalizador\"+sinalizador_name+\"-\"+day_begin+month_begin+year_begin+\"-\"+day_end+month_end+year_end+\".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/pi/Documents/datalog/customized/\"+ msg.fname;\n\n// We save the current payload into a different place on the msg object\nmsg.filecontent = sinalizador_array;\n\n// We are passing the file name search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"pattern\":msg.fname};\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.fname});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 4380,
        "wires": [
            [
                "dedc6900.8f97b8",
                "192d91f7.96dcce"
            ]
        ]
    },
    {
        "id": "b399e85c.ad7698",
        "type": "link in",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "e239bb66.dce908"
        ],
        "x": 1635,
        "y": 4320,
        "wires": [
            [
                "9f964c93.f74ec"
            ]
        ]
    },
    {
        "id": "d447f70d1bd2549e",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2230,
        "y": 1100,
        "wires": [
            [
                "d0c836bf9a9a535c"
            ]
        ]
    },
    {
        "id": "cc6626c1f5abdb4d",
        "type": "delay",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2210,
        "y": 1140,
        "wires": [
            [
                "d0c836bf9a9a535c"
            ]
        ]
    },
    {
        "id": "d59d38012e7b4aaa",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Att variavel",
        "func": "var id_to_show = flow.get(\"id_to_show\", \"bank1\")|| \" \"\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar name_to_show = msg.payload\n\nfor(var i=0; i<sinalizadores.length; i++){\n    if (sinalizadores[i].name == name_to_show){\n        id_to_show = sinalizadores[i].clientID\n    }\n}\n\nflow.set(\"id_to_show\", id_to_show, \"bank1\")\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//var parada_table = \" \"\n//flow.set(\"parada_table\",parada_table, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 1860,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel do sinalizador selecionado no dropdown menu"
    },
    {
        "id": "677ac102c233ddee",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "LOG Paradas",
        "info": "LOG com intuito de apresentar apenas os eventos de paradas, seja ela programada, ou não programada.",
        "x": 1670,
        "y": 1500,
        "wires": []
    },
    {
        "id": "316e6b2b045f09a8",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Somente paradas",
        "property": "payload.current_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Parada programada",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Parada não programada",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 1540,
        "wires": [
            [
                "8e8486fc2dbeb83a"
            ],
            [
                "8e8486fc2dbeb83a"
            ]
        ],
        "info": "Filtro para passar apenas quando for alguma parada"
    },
    {
        "id": "fa3d3c37ea37fd91",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar sinalizadores = msg.payload\n\nmsg = {};\nmsg.payload = sinalizadores[pos_atual]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1540,
        "wires": [
            [
                "316e6b2b045f09a8"
            ]
        ]
    },
    {
        "id": "8d95535f975e9375",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Config Log Paradas",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar stopLog = flow.get('stopLog', \"bank1\")|| [];\n\nstopLog.push(msg.payload);\nif (stopLog.length > 1000){\n    // Delete oldest message if > 20\n    stopLog.shift();\n    stopLog.length = 1000;\n} \n\n// store the value back\nflow.set('stopLog',stopLog, \"bank1\");\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = stopLog;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 1580,
        "wires": [
            [
                "eba00348117a10a1"
            ]
        ],
        "info": "Gera a array de objetos para então passar para o próximo nó"
    },
    {
        "id": "5073046078bc8633",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Select Clients",
        "func": "var sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar i\nvar client_array = []\n\nfor(i=0; i<sinalizadores.length; i++){\n    client_array[i] = sinalizadores[i].name\n}\n\nclient_array = client_array.sort()\n\nmsg = {};\nmsg.options = client_array\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1860,
        "wires": [
            []
        ],
        "info": "Cria uma array de todos os sinalizadores cadastrados.\nE passa essa array para as opções do Dropdown Menu."
    },
    {
        "id": "88dc9aec1d9026cd",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "IN_Select_Sinalizador",
        "links": [
            "462a057fd489911e",
            "cf0515bab0560a30",
            "2a21ffedd6cd0109",
            "1489764.8783b8a",
            "441dc6f0.a03448"
        ],
        "x": 1695,
        "y": 1860,
        "wires": [
            [
                "cea07abdeea8ec7b"
            ]
        ]
    },
    {
        "id": "aa95499224ace9b0",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2570,
        "y": 2300,
        "wires": [
            [
                "cd8db1af.5eefb"
            ]
        ]
    },
    {
        "id": "47493818d817e28b",
        "type": "delay",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2550,
        "y": 2340,
        "wires": [
            [
                "cd8db1af.5eefb"
            ]
        ]
    },
    {
        "id": "7c7a19a64f40d0af",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Tabela Resumo Individual",
        "info": "Tabela criada para mostrar o reusmo de todas as atividades de cada sinalizador.\n\nDados da tabela:\n- Status da ação\n- Hora da ação/mudança de status\n- \n\nEssa tabela mostra os dados de apenas um sinalizador, que é selecionado no Dropdown Menu",
        "x": 2810,
        "y": 2300,
        "wires": []
    },
    {
        "id": "784567b1707f266a",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "IN_Tabela_Geral",
        "links": [
            "462a057fd489911e",
            "cf0515bab0560a30",
            "1489764.8783b8a",
            "441dc6f0.a03448",
            "ca1e2b57.702fc8",
            "34540a23.ec7106"
        ],
        "x": 1615,
        "y": 1260,
        "wires": [
            [
                "d688812a.1acd5"
            ]
        ]
    },
    {
        "id": "d0232751d7d8859b",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "links": [
            "462a057fd489911e",
            "1489764.8783b8a"
        ],
        "x": 1615,
        "y": 1540,
        "wires": [
            [
                "fa3d3c37ea37fd91"
            ]
        ]
    },
    {
        "id": "63724ab6a4ba01f2",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Conf gráfico",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\nvar t_total = flow.get(\"t_total\")||0\nvar t_green = flow.get(\"t_green\")||0\nvar t_red = flow.get(\"t_red\") || 0\nvar t_yellow = flow.get(\"t_yellow\") || 0\nvar t_blue = flow.get(\"t_blue\") || 0\nvar t_gray = flow.get(\"t_gray\") || 0\n\nt_green = msg.payload.time_green\nt_red = msg.payload.time_red\nt_yellow = msg.payload.time_yellow\nt_blue = msg.payload.time_blue\nt_gray = msg.payload.time_gray\n\nt_total = t_green + t_red + t_yellow + t_blue + t_gray\n\nvar per_green = (t_green/t_total)*100\nvar per_red = (t_red/t_total)*100\nvar per_yellow = (t_yellow/t_total)*100\nvar per_blue = (t_blue/t_total)*100\nvar per_gray = (t_gray/t_total)*100\n\nper_green = per_green.toFixed(2)\nper_red = per_red.toFixed(2)\nper_yellow = per_yellow.toFixed(2)\nper_blue = per_blue.toFixed(2)\nper_gray = per_gray.toFixed(2)\n\nmsg.topic = msg.payload.name+\"(%)\"\n// make it part of the outgoing msg object\nmsg.payload=[{\n    \"series\": [\"Tempo\"],\n    \"data\": [ [per_green,per_red,per_yellow,per_blue,per_gray] ],\n    //\"labels\": [\"\", \"\", \"\", \"\", \"\"]\n    \"labels\": [color_values.green, color_values.red, color_values.yellow, color_values.blue, color_values.gray]\n}];\n\nflow.set(\"t_total\", t_total)\nflow.set(\"t_green\", t_green)\nflow.set(\"t_red\", t_red)\nflow.set(\"t_yellow\", t_yellow)\nflow.set(\"t_blue\", t_blue)\nflow.set(\"t_gray\", t_gray)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 2480,
        "wires": [
            [
                "66796c150b33f719"
            ]
        ],
        "info": "Recebe o objeto do sinalizador em questão e acessa os valores dos tempos de cada status.\nCom isso, faz as contas para definir a porcentagem de cada tempo em relação ao tempo total já decorrido.\n\nPassa essas informações de porcentagem para o nó do gráfico"
    },
    {
        "id": "0c30b63f883016f4",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Chart",
        "info": "Configurações para os gráficos pizzas ou de barra.\n\nDados: Porcentagem dos tempos de cada status.",
        "x": 2730,
        "y": 2400,
        "wires": []
    },
    {
        "id": "7f1e2efd5d613af9",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Tabela Geral",
        "info": "",
        "x": 2430,
        "y": 1160,
        "wires": []
    },
    {
        "id": "85ec293f8710ac09",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Conf msg Telegram",
        "func": "var resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\n\nvar size = resumo_sinalizadores.length\n\nvar sinalizador = resumo_sinalizadores[size-1].name\nvar status = resumo_sinalizadores[size-1].current_status\nvar horario = resumo_sinalizadores[size-1].time_change_str\n\nvar chatID = flow.get(\"chatID\", \"bank1\")\n\nvar message = \"Sinalizador: \"+sinalizador+\"\\r\\nStatus: \"+status+\"\\r\\nHorário: \"+horario\n\n//msg.payload = {chatId : -556367846, type : 'message', content : message};\nmsg.payload = {chatId : chatID, type : 'message', content : message};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 1640,
        "wires": [
            [
                "3449de0a.70f5c2"
            ]
        ]
    },
    {
        "id": "d688812a.1acd5",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "func": "var sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nmsg = {};\nmsg.payload = sinalizadores\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1260,
        "wires": [
            [
                "d447f70d1bd2549e",
                "cc6626c1f5abdb4d"
            ]
        ]
    },
    {
        "id": "5ffe12ff40787a4c",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Dropdown Menu",
        "info": "Utilizado para selecionar o sinalizador que deseja verificar a tabela de paradas e o grafico de pizza.\n\n1) Select Sinalizador\n    Nesse nó estão cadastrados as opções possiveis.\n    Para cada sinalizador novo, deve-se cadastrar uma nova opção neste nó\n    \n2) Função Att variável\n    Com a seleção no dropdown menu, esta função vai atualizar uma variavel flow.\n    Esta variavel é responsavel por indicar qual sinalizador foi selecionado.\n    \n3)ENTER\n    Botão criado para fazer um inject após o usuário selecionar o sinalizador no dropdown menu.\n    Este inject entra na função Sel Tabela Parada, que a partir da variavel flow setada no nó \"Att varivavel\", pega o veto de objetos do sinalizador escolhido.\n    Este vetor de objetos é gerado nas estruturas \"Tabela Paradas\".\n    Retorna então este vetor de objetos para o nó da tabela de paradas\n    \n4) Refresh\n    Botão que atualiza a tabela e o grafico ques estão sendo mostrados na dashboard",
        "x": 2160,
        "y": 1840,
        "wires": []
    },
    {
        "id": "3449de0a.70f5c2",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "links": [
            "366812e1.4d83fe"
        ],
        "x": 2735,
        "y": 1640,
        "wires": []
    },
    {
        "id": "e239bb66.dce908",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "links": [
            "b399e85c.ad7698"
        ],
        "x": 2115,
        "y": 2980,
        "wires": []
    },
    {
        "id": "e3fd6df9.5ef13",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "Att variavel csv",
        "func": "var sinalizador_csv = flow.get(\"sinalizador_csv\", \"bank1\")\n\nsinalizador_csv = msg.payload\n\nflow.set(\"sinalizador_csv\", sinalizador_csv, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 4320,
        "wires": [
            []
        ],
        "info": "Att a variavel flow para indicar qual sinalizador foi escolhido para gerar o arquivo csv."
    },
    {
        "id": "2ae68b5c.0ed8e4",
        "type": "csv",
        "z": "986afd82ee909974",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "clientID,name,current_status,time_change_str,current_date",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 2270,
        "y": 4380,
        "wires": [
            [
                "b6cf7c0a.88c5a",
                "7ac7c7b0.179348"
            ]
        ]
    },
    {
        "id": "b6cf7c0a.88c5a",
        "type": "file",
        "z": "986afd82ee909974",
        "name": "file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2410,
        "y": 4380,
        "wires": [
            []
        ]
    },
    {
        "id": "7ac7c7b0.179348",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 4300,
        "wires": []
    },
    {
        "id": "dedc6900.8f97b8",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 4340,
        "wires": []
    },
    {
        "id": "192d91f7.96dcce",
        "type": "change",
        "z": "986afd82ee909974",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2120,
        "y": 4380,
        "wires": [
            [
                "2ae68b5c.0ed8e4"
            ]
        ]
    },
    {
        "id": "d4621deb.adcb3",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\n\nvar dataItems = new Array(sinalizadores.length)\n\nfunction timeStamptoString(timestamp){\n    var date = new Date(timestamp)\n    var day = date.getDate().toString().padStart(2, '0')\n    var month = (date.getMonth()+1).toString().padStart(2, '0')\n    var year = date.getFullYear()\n    var hours = (date.getHours()-3).toString().padStart(2, '0')\n    var minutes = date.getMinutes().toString().padStart(2, '0')\n    var seconds = date.getSeconds().toString().padStart(2, '0')\n    return year+\"-\"+month+\"-\"+day+\"T\"+hours+\":\"+minutes+\":\"+seconds+\"-03:00\"\n}\n\nfunction getdataArr(id){\n    var arr = []\n    var y=0\n    for(var x=0; x<resumo_sinalizadores.length; x++){\n        if(resumo_sinalizadores[x].clientID == id){   //achou evento do sinalizador especificado\n            arr[y] = {\n                timeRange:[\n                    timeStamptoString(resumo_sinalizadores[x].time_started), \n                    timeStamptoString(resumo_sinalizadores[x].time_ended)\n                ],\n                val: resumo_sinalizadores[x].current_status\n            }\n            ++y;\n        }\n    }\n    return arr\n}\n\nfor(var i=0; i<sinalizadores.length; i++){  //varre o vetor sinalizadores\n    dataItems[i] = {\n        group: sinalizadores[i].name,\n        data: [\n            {\n                label: \"\",\n                data: getdataArr(sinalizadores[i].clientID)\n            }\n        ]\n    }\n}\n\nfor(var j=0; j<dataItems.length; j++){\n    dataItems[j].data[0].data[dataItems[j].data[0].data.length - 1].timeRange[1] = timeStamptoString(date.getTime())\n}\n\n\n\nmsg.payload = {};\n//msg.payload = dataItems\nmsg.payload.dataItems = dataItems\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "c2bb9c52.5d73",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1690,
        "y": 840,
        "wires": [
            [
                "d4621deb.adcb3",
                "5e58566d2621be86"
            ]
        ]
    },
    {
        "id": "ce090a5e.662658",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "",
        "links": [
            "9d54fb4c.b5b728",
            "1962862a2130f2cb"
        ],
        "x": 1845,
        "y": 820,
        "wires": [
            [
                "d4621deb.adcb3"
            ]
        ]
    },
    {
        "id": "9d54fb4c.b5b728",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [
            "ce090a5e.662658"
        ],
        "x": 1875,
        "y": 660,
        "wires": []
    },
    {
        "id": "8228e97f.f0d6b8",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 3020,
        "wires": [
            [
                "b8f396d736221e58"
            ]
        ]
    },
    {
        "id": "4571488e.69dea8",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 3020,
        "wires": []
    },
    {
        "id": "a4c94323.4dccf",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "mode": "link",
        "links": [
            "66101c35.0443e4"
        ],
        "x": 455,
        "y": 140,
        "wires": []
    },
    {
        "id": "a5181bf9.a33268",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2210,
        "y": 440,
        "wires": [
            [
                "e8298205.06d65"
            ]
        ]
    },
    {
        "id": "4f46932f.981d7c",
        "type": "delay",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 2200,
        "y": 480,
        "wires": [
            [
                "e8298205.06d65"
            ]
        ]
    },
    {
        "id": "d076d6ee.62b1b8",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar registration_date = \" \"\nvar registration_time = \" \"\n\nfor(var i=0; i<allClients.length; i++){\n    registration_date = allClients[i].registration_date\n    registration_time = allClients[i].registration_time\n    allClients[i].created_at = registration_date +\"-\"+registration_time\n}\n\nmsg = {}\nmsg.payload = allClients\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "574a0282.5c107c",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "",
        "links": [
            "2a21ffedd6cd0109",
            "441dc6f0.a03448"
        ],
        "x": 1605,
        "y": 480,
        "wires": [
            [
                "d076d6ee.62b1b8"
            ]
        ]
    },
    {
        "id": "d3cbcda1.c274b",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "",
        "links": [
            "1489764.8783b8a",
            "9e8a4c4a.e692c"
        ],
        "x": 1825,
        "y": 2220,
        "wires": [
            [
                "bc2f7a13ddee397c"
            ]
        ]
    },
    {
        "id": "28a9130e.8ff01c",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "conf msg led",
        "func": "var status = msg.payload.current_status\n\nmsg={}\nmsg.payload = status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 1520,
        "wires": [
            [
                "79dfd895.9821d8"
            ]
        ]
    },
    {
        "id": "2c31b7be.e7a598",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2410,
        "y": 1640,
        "wires": [
            [
                "85ec293f8710ac09"
            ]
        ]
    },
    {
        "id": "82fe9082.4b3b8",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "func": "var resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nvar clientiD = msg.payload.clientID\nvar flag = true\n\nfor(var i=resumo_sinalizadores.length - 2; i>=0; i--){\n    if (clientiD == resumo_sinalizadores[i].clientiD){\n        if(resumo_sinalizadores[i].current_status == color_values.gray){\n            flag = false\n            \n        }\n        break;\n    }\n}\n\nmsg = {}\nmsg.payload = flag\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1640,
        "wires": [
            [
                "2c31b7be.e7a598"
            ]
        ]
    },
    {
        "id": "88eba9fde58dd809",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "name": "",
        "group": "ba2b6bb3631a7eac",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "update",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "9e8a4c4a.e692c"
            ]
        ]
    },
    {
        "id": "5a33bc3b2a4775b3",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "group": "8669d6dc222f6a40",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1700,
        "y": 3080,
        "wires": [
            [
                "f57884c1.34b248"
            ]
        ]
    },
    {
        "id": "c64db80e8dcfa776",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "d": true,
        "name": "",
        "group": "ba2b6bb3631a7eac",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Reset Sinalizadores",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1720,
        "y": 4660,
        "wires": [
            [
                "7ebc07e0d6119bb8"
            ]
        ]
    },
    {
        "id": "acb56509.d35378",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "group": "1e7a6209.a38a7e",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1870,
        "y": 3480,
        "wires": [
            [
                "a805550e.521c18"
            ]
        ]
    },
    {
        "id": "99fe6a68.94aa68",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "group": "8669d6dc222f6a40",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1870,
        "y": 3420,
        "wires": [
            [
                "c2592d82.0954"
            ]
        ]
    },
    {
        "id": "d1005872.0e38b8",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "name": "Refresh V2",
        "group": "79b4d5c2.bfe4ac",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "update",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "9e8a4c4a.e692c"
            ]
        ]
    },
    {
        "id": "0ee165efa3e9a6e7",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Selecione o Sinalizador",
        "group": "8669d6dc222f6a40",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 2160,
        "y": 3060,
        "wires": [
            [
                "edede61c0d770ffe"
            ]
        ]
    },
    {
        "id": "af4bf9c8.041158",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Selecione o Sinalizador",
        "group": "1e7a6209.a38a7e",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 2160,
        "y": 3020,
        "wires": [
            [
                "452c258c30530535"
            ]
        ]
    },
    {
        "id": "9f964c93.f74ec",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Selecione o Sinalizador",
        "group": "33401f87.1001c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 1740,
        "y": 4320,
        "wires": [
            [
                "e3fd6df9.5ef13"
            ]
        ]
    },
    {
        "id": "a8f298c5.155fd8",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Select Sinalizador V2",
        "label": "",
        "tooltip": "",
        "place": "Selecione um Sinalizador",
        "group": "79b4d5c2.bfe4ac",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 2180,
        "y": 1900,
        "wires": [
            [
                "fd6c346609ab6932"
            ]
        ]
    },
    {
        "id": "effd9e0f8c88bc45",
        "type": "ui_text_input",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "label": "Novo nome",
        "tooltip": "",
        "group": "8669d6dc222f6a40",
        "order": 4,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1990,
        "y": 3240,
        "wires": [
            [
                "848fe849.c216e8",
                "5e07e23a0370662e"
            ]
        ]
    },
    {
        "id": "c1582c55cbee06fc",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "8669d6dc222f6a40",
        "order": 3,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Digite o novo nome e aperte em Salvar",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2070,
        "y": 3280,
        "wires": []
    },
    {
        "id": "98723328.bd031",
        "type": "ui_chart",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "pie chart V2",
        "group": "2c09e8f6e779fc72",
        "order": 1,
        "width": "6",
        "height": "5",
        "label": "{{msg.topic}}",
        "chartType": "pie",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2cb805",
            "#f91515",
            "#ffd91a",
            "#3744fb",
            "#8a8a8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2750,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "1f9dcfd7.89a64",
        "type": "ui_form",
        "z": "986afd82ee909974",
        "name": "",
        "label": "",
        "group": "33401f87.1001c",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Data inicio",
                "value": "date_begin",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Data fim",
                "value": "date_end",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "date_begin": "",
            "date_end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 1670,
        "y": 4380,
        "wires": [
            [
                "a4a54ce4.ad0f6"
            ]
        ]
    },
    {
        "id": "df34d2682e6ca66b",
        "type": "ui_toast",
        "z": "986afd82ee909974",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "topic": "",
        "name": "Confirmation",
        "x": 2130,
        "y": 4660,
        "wires": [
            [
                "564e86643330d46b"
            ]
        ]
    },
    {
        "id": "24302e8f.c58b02",
        "type": "ui_toast",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "AVISO",
        "name": "Nome ja existente",
        "x": 2530,
        "y": 3440,
        "wires": []
    },
    {
        "id": "6f36f15d.4a451",
        "type": "ui_toast",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Confirmation",
        "x": 2210,
        "y": 3480,
        "wires": [
            [
                "712da170.ac1f2"
            ]
        ]
    },
    {
        "id": "eba00348117a10a1",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "group": "2514b6c1.23661a",
        "name": "Log Paradas",
        "order": 3,
        "width": 5,
        "height": 3,
        "format": "\n<ul>\n <li ng-repeat=\"x in msg.payload\">\n <font color=\"red\"><b>{{x.name}}</b></font>\n    <ul>\n        <li><p><b>{{x.current_status}}</b></p></li>\n        <li><p><b>{{x.current_date}}-{{x.time_change_str}}</b></p></li>\n    </ul>\n </li>\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2490,
        "y": 1580,
        "wires": [
            []
        ],
        "info": "O LOG de paradas vai mostrar apenas o clientID, o status (que deve ser parada programada ou parada não programada), e o horário que a troca para este status ocorreu."
    },
    {
        "id": "12f73deb.db3af2",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "group": "2514b6c1.23661a",
        "name": "Aviso de Parada",
        "order": 2,
        "width": 5,
        "height": 3,
        "format": "<style>\n    h1{\n        font-size: 23px;\n    }\n    h2{\n        font-size: 18px;\n    }\n    p{\n        font-size: 14px;\n    }\n    body.nr-dashboard-theme md-content md-card{\n        border-radius: 10px;\n    }\n    .nr-dashboard-theme ui-card-panel{\n        border-radius: 10px;\n    }\n</style>\n\n<h1>\n    <font color=\"red\"><b><center>{{msg.payload.current_status}}</center></b></font>\n</h1>\n\n<h2>\n    <center><b>{{msg.payload.name}}</b></center>\n</h2>\n\n<h2>\n    <center><b>{{msg.payload.current_date}}-{{msg.payload.time_change_str}}</b></center>\n</h2>\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2260,
        "y": 1460,
        "wires": [
            []
        ],
        "info": "O LOG de paradas vai mostrar apenas o clientID, o status (que deve ser parada programada ou parada não programada), e o horário que a troca para este status ocorreu."
    },
    {
        "id": "1d5be367.89640d",
        "type": "ui_timelines_chart",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "group": "ead3fc9.832a3",
        "name": "Timeline Sinalizadores",
        "order": 2,
        "label": "Timeline Sinalizadores",
        "width": "25",
        "height": "12",
        "lineColors": [
            {
                "statusColor": "#2cb805",
                "statusValue": "Em operação"
            },
            {
                "statusColor": "#f91515",
                "statusValue": "Parada não programada"
            },
            {
                "statusColor": "#ffd91a",
                "statusValue": "Setup"
            },
            {
                "statusColor": "#3744fb",
                "statusValue": "Parada programada"
            },
            {
                "statusColor": "#8a8a8a",
                "statusValue": "Offline"
            }
        ],
        "xTickFormat": "HH:mm",
        "startDateTime": "",
        "endDateTime": "",
        "maxLineHeight": "50",
        "topMargin": "50",
        "xAxisLabelsFontSize": "14",
        "xAxisLabelslColor": "#000000",
        "yAxisLabelsFontSize": "16",
        "yAxisLabelslColor": "#000000",
        "timeFormat": "%Y-%m-%d %H:%M:%S",
        "resetZoomLabelFontSize": "24",
        "resetZoomLabelColor": "#08a654",
        "enableAnimations": false,
        "enableDateMarker": false,
        "forwardInputMessages": true,
        "x": 2420,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d0c836bf9a9a535c",
        "type": "ui_table",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "group": "ba2b6bb3631a7eac",
        "name": "Tabela Tempo e Status",
        "order": 2,
        "width": 23,
        "height": 5,
        "columns": [
            {
                "field": "name",
                "title": "Sinalizador",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "current_status",
                "title": "Status Atual",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "stop_counter",
                "title": "Nº Paradas",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_green_str",
                "title": "Tempo Verde",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_red_str",
                "title": "Tempo Vermelho",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_yellow_str",
                "title": "Tempo Amarelo",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_blue_str",
                "title": "Tempo Azul",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e8298205.06d65",
        "type": "ui_table",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "group": "4942f1a2.7b048",
        "name": "Lista Equipamentos",
        "order": 1,
        "width": "20",
        "height": "11",
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Nome",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type_equipment",
                "title": "Tipo",
                "width": "10%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "mac_address",
                "title": "MAC Address",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "connectivity_status",
                "title": "Conexão",
                "width": "10%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "created_at",
                "title": "Cadastrado em",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "updated_at",
                "title": "Atualizado em",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2450,
        "y": 460,
        "wires": []
    },
    {
        "id": "cd8db1af.5eefb",
        "type": "ui_table",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "group": "0896cba727c33420",
        "name": "Tabela Resumo V2",
        "order": 1,
        "width": "11",
        "height": 4,
        "columns": [
            {
                "field": "name",
                "title": "Nome",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "current_status",
                "title": "Status",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_change_str",
                "title": "Hora",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "current_date",
                "title": "Data",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2790,
        "y": 2340,
        "wires": []
    },
    {
        "id": "09db53ffdb7db890",
        "type": "telegram receiver",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Receive any message",
        "bot": "e9888d43a74be4e5",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 220,
        "y": 2760,
        "wires": [
            [
                "18aebb78285cf32a"
            ],
            [
                "18aebb78285cf32a"
            ]
        ],
        "info": "Verifica todas as mensagens enviadas ao bot, para verificar se é um comando ou não"
    },
    {
        "id": "83db33f803e96dcd",
        "type": "telegram receiver",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "bot": "e9888d43a74be4e5",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 210,
        "y": 2480,
        "wires": [
            [
                "7b5e9835b4de4932"
            ],
            []
        ]
    },
    {
        "id": "4acb3252adca595a",
        "type": "telegram receiver",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "bot": "e9888d43a74be4e5",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 210,
        "y": 2940,
        "wires": [
            [
                "a5e6e7cf17490c11"
            ],
            []
        ]
    },
    {
        "id": "0d0982331bd7e793",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "/help",
        "command": "/help",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2300,
        "wires": [
            [
                "2c4323711c4c6b8a"
            ]
        ]
    },
    {
        "id": "ea672a7704f6391a",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "/file",
        "command": "/file",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2420,
        "wires": [
            [
                "3cbc62ef81210202"
            ]
        ]
    },
    {
        "id": "45b2d0f5a296019e",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "Oi",
        "command": "Oi",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2140,
        "wires": [
            [
                "5ee484d0ae34f2d3"
            ]
        ]
    },
    {
        "id": "fa1b2383119f6cd1",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "/list",
        "command": "/list",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2620,
        "wires": [
            [
                "3c96ffbee587d319",
                "5dfae462.2f63fc"
            ]
        ]
    },
    {
        "id": "2c64a3c3a697fab3",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "oi",
        "command": "oi",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2200,
        "wires": [
            [
                "5ee484d0ae34f2d3"
            ]
        ]
    },
    {
        "id": "4a6c8b0e49fbe786",
        "type": "telegram command",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "/reset",
        "command": "/reset",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "e9888d43a74be4e5",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 170,
        "y": 2880,
        "wires": [
            [
                "60654806529f49f0"
            ]
        ]
    },
    {
        "id": "790d909757b2b6a4",
        "type": "telegram sender",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "bot": "e9888d43a74be4e5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 930,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "1e31c57183d924bf",
        "type": "telegram sender",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "send question",
        "bot": "e9888d43a74be4e5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 570,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "d677f52c01d3fdd4",
        "type": "telegram sender",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "send list",
        "bot": "e9888d43a74be4e5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 680,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "355648fedf17ab71",
        "type": "telegram sender",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "",
        "bot": "e9888d43a74be4e5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 650,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "e83b3cf3e62ee5c3",
        "type": "telegram sender",
        "z": "986afd82ee909974",
        "g": "ac77b882.60d688",
        "name": "send question",
        "bot": "e9888d43a74be4e5",
        "haserroroutput": false,
        "outputs": 1,
        "x": 540,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "79dfd895.9821d8",
        "type": "ui_led",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "order": 1,
        "group": "2514b6c1.23661a",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "Parada não programada",
                "valueType": "str"
            },
            {
                "color": "#0000ff",
                "value": "Parada programada",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 2470,
        "y": 1520,
        "wires": []
    },
    {
        "id": "cfe27c85.3f36f",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "name": "INSERT ",
        "query": "INSERT INTO public.equipement_logs(equipement_id, connectivity, color_status)\nVALUES ('{{msg.id}}', '{{msg.connectivity}}', '{{msg.status}}')",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 3020,
        "wires": [
            [
                "4571488e.69dea8"
            ]
        ]
    },
    {
        "id": "d2e8ed9e8e177e17",
        "type": "fs-file-lister",
        "z": "986afd82ee909974",
        "g": "1504f413.2fc83c",
        "name": "",
        "start": "/home/pi/Documents/datalog/Produto/",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 460,
        "y": 1880,
        "wires": [
            [
                "9f2ab65af5ae388e"
            ]
        ]
    },
    {
        "id": "b8f396d736221e58",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "function 1",
        "func": "var date = new Date(Date.now()).toISOString();\nvar id = '1d4e86fd-a3f3-47b6-8ef9-d6a1433bb2b8'\nvar connectivity = 'online'\nvar status = 'red'\n\nmsg.id = id\nmsg.connectivity = connectivity\nmsg.status = status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3020,
        "wires": [
            [
                "cfe27c85.3f36f"
            ]
        ]
    },
    {
        "id": "8b71a2f29b78cad5",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\nWHERE mac_address = '{{msg.payload.macAdd}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "5b1e1f4a95e636c2"
            ]
        ],
        "info": "Verifica se existe um equipamento com esse mac address no banco"
    },
    {
        "id": "05d2f5607c5b3d6f",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "TIMELINE",
        "info": "",
        "x": 1660,
        "y": 800,
        "wires": []
    },
    {
        "id": "072c312bff91b3f7",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 3080,
        "wires": [
            [
                "41c0d8e0766d2a5e"
            ]
        ]
    },
    {
        "id": "e72409b2a0b493b4",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement_logs\nWHERE color_status = '{{msg.color_status}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 3080,
        "wires": [
            [
                "a51a0e7dce491362"
            ]
        ]
    },
    {
        "id": "a51a0e7dce491362",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 3080,
        "wires": []
    },
    {
        "id": "41c0d8e0766d2a5e",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "function 2",
        "func": "var color_status = 'green'\n\nmsg.color_status = color_status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3080,
        "wires": [
            [
                "e72409b2a0b493b4"
            ]
        ]
    },
    {
        "id": "b5546d877ad73a86",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "name": "DELETE",
        "query": "DELETE FROM public.equipement\nWHERE mac_address = '{{msg.payload.macAdd}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 3140,
        "wires": [
            [
                "41bc827db63cb41e"
            ]
        ],
        "info": "Deleta linha da tabela\r\n\r\n"
    },
    {
        "id": "eb3cb0f25c8b8dee",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "function 3",
        "func": "var color_status = 'green'\nmsg.payload = {}\nmsg.payload.macAdd = '30:C6:F7:29:A5:40'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3140,
        "wires": [
            [
                "b5546d877ad73a86"
            ]
        ]
    },
    {
        "id": "8fd8c0e314420315",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 3140,
        "wires": [
            [
                "eb3cb0f25c8b8dee"
            ]
        ]
    },
    {
        "id": "41bc827db63cb41e",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 3140,
        "wires": []
    },
    {
        "id": "afe53f536daa3c35",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "name": "UPDATE",
        "query": "UPDATE public.equipement\nSET color_status = '{{msg.color_status}}'\nWHERE type_equipment = 'ihm'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 3200,
        "wires": [
            [
                "72bcbde94f60d9aa"
            ]
        ],
        "info": "Update linha da tabela"
    },
    {
        "id": "983ac5a8f3d4e86b",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "function 4",
        "func": "var color_status = 'red'\n\nmsg.color_status = color_status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 3200,
        "wires": [
            [
                "afe53f536daa3c35"
            ]
        ]
    },
    {
        "id": "59a6ceef16f4a06d",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 3200,
        "wires": [
            [
                "983ac5a8f3d4e86b"
            ]
        ]
    },
    {
        "id": "72bcbde94f60d9aa",
        "type": "debug",
        "z": "986afd82ee909974",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 3200,
        "wires": []
    },
    {
        "id": "e151f051682dee15",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "group": "4f6f68f22969f7d5",
        "name": "Descrição Sinalizador",
        "order": 1,
        "width": "10",
        "height": 6,
        "format": "<style>\n    h1 {\n        font-size: 30px;\n    }\n\n    h2 {\n        font-size: 20px;\n    }\n\n    p{\n        font-size: 15px\n    }\n\n    body.nr-dashboard-theme md-content md-card {\n        border-radius: 10px;\n    }\n\n    .nr-dashboard-theme ui-card-panel {\n        border-radius: 10px;\n    }\n</style>\n\n<h2>Sinalizador {{msg.payload.ihm.name}}</h2>\n\n<ul>\n    <li>\n        <b>Status Atual: </b>{{msg.payload.ihm.color_status}}\n    </li>\n    <li>\n        <b>Torre: </b>\n        <ul>\n            <li>ID: {{msg.payload.signalyzer.id}}</li>\n            <li>Conexão: {{msg.payload.signalyzer.connectivity_status}}</li>\n            <li>MAC Address: {{msg.payload.signalyzer.mac_address}}</li>\n            <li>Data Cadastro: {{msg.payload.signalyzer.created_at}}</li>\n        </ul>\n    </li>\n    <li>\n        <b>IHM: </b>\n        <ul>\n            <li>ID: {{msg.payload.ihm.id}}</li>\n            <li>Conexão: {{msg.payload.ihm.connectivity_status}}</li>\n            <li>MAC Address: {{msg.payload.ihm.mac_address}}</li>\n            <li>Data Cadastro: {{msg.payload.ihm.created_at}}</li>\n        </ul>\n    </li>\n</ul>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2640,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "5c6b2155ea6bbb67",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Descrição",
        "info": "",
        "x": 2640,
        "y": 2020,
        "wires": []
    },
    {
        "id": "a42e5b0ca9cb0498",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Conf Descrição",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar id_to_show = flow.get(\"id_to_show\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar position = 0\n\nfor (var i = 0; i < sinalizadores.length; i++) {\n    if (id_to_show == sinalizadores[i].clientID) {\n        position = i\n    }\n}\n\nvar newPayload = {}\nnewPayload.name = sinalizadores[position].name\nnewPayload.clientID = sinalizadores[position].clientID\nnewPayload.current_status = sinalizadores[position].current_status\nnewPayload.tower_mac = sinalizadores[position].tower_mac\nnewPayload.ihm_mac = sinalizadores[position].ihm_mac\n\nif (sinalizadores[position].tower_connectivity == true){\n    newPayload.tower_connectivity = \" ✔️\"\n}\nelse{\n    newPayload.tower_connectivity = \" ❌\"\n}\n\nif (sinalizadores[position].ihm_connectivity == true) {\n    newPayload.ihm_connectivity = \" ✔️\"\n}\nelse {\n    newPayload.ihm_connectivity = \" ❌\"\n}\n\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].name == newPayload.name){\n        if(allClients[i].type == \"Torre\"){\n            newPayload.tower_registration_date = allClients[i].registration_date\n        }\n        else if (allClients[i].type == \"IHM\") {\n            newPayload.ihm_registration_date = allClients[i].registration_date\n        }\n    }\n}\n\n\nmsg = {}\nmsg.payload = newPayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "815ba61b32d31833",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Config Valor Cores",
        "info": "",
        "x": 1950,
        "y": 3620,
        "wires": []
    },
    {
        "id": "eb7d18686335278b",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "8fbc8760c50db03c",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 5",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 240,
        "wires": [
            [
                "eb7d18686335278b"
            ]
        ]
    },
    {
        "id": "71a310297ef075ad",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "8669d6dc222f6a40",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<style>\n    body.nr-dashboard-theme md-content md-card {\n        border-radius: 10px;\n    }\n\n    .nr-dashboard-theme ui-card-panel {\n        border-radius: 10px;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2340,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "284fa71e8da0b6e9",
        "type": "ui_form",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "label": "",
        "group": "ba2b6bb3631a7eac",
        "order": 1,
        "width": "6",
        "height": "1",
        "options": [
            {
                "label": "Data Início",
                "value": "date_begin",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Data Fim",
                "value": "date_end",
                "type": "date",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "date_begin": "",
            "date_end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 1650,
        "y": 1140,
        "wires": [
            [
                "1041f965165ecbf5",
                "1efae357e679c6f0"
            ]
        ]
    },
    {
        "id": "1041f965165ecbf5",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Config date",
        "func": "var date_begin = msg.payload.date_begin\nvar date_end = msg.payload.date_end\n\nfunction formatDate(date) {\n    var separator_date = date.split(\"T\")\n    var new_date = separator_date[0]\n    var new_separator_date = new_date.split(\"-\")\n    var day_begin = new_separator_date[2]\n    var month_begin = new_separator_date[1]\n    var year_begin = new_separator_date[0]\n    return day_begin + \"/\" + month_begin + \"/\" + year_begin\n}\n\nmsg.payload = {}\n//caso o usuario nao passe nenhuma data\nif (date_begin == null && date_end == null) {\n    msg.payload.begin = date_begin\n    msg.payload.end = date_end\n\n}\n//usuario passou apenas data final\nelse if (date_begin == null && date_end != null) {\n    msg.payload.begin = date_begin\n    msg.payload.end = formatDate(date_end)\n}\n//usuario passou apenas data de inicio\nelse if (date_begin != null && date_end == null) {\n    msg.payload.begin = formatDate(date_begin)\n    msg.payload.end = date_end\n}\nelse {\n    msg.payload.begin = formatDate(date_begin)\n    msg.payload.end = formatDate(date_end)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1140,
        "wires": [
            [
                "d0fe25719d86c492"
            ]
        ],
        "info": "Pega data de inicio e de fim e arruma no formato: \"dd/mm/aaaa\""
    },
    {
        "id": "1ea0783d02a0484f",
        "type": "ui_form",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Date selection",
        "label": "",
        "group": "79b4d5c2.bfe4ac",
        "order": 3,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Data Início",
                "value": "date_begin",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Data Fim",
                "value": "date_end",
                "type": "date",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "date_begin": "",
            "date_end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 1580,
        "y": 2160,
        "wires": [
            [
                "c44212ae80dcdb72"
            ]
        ]
    },
    {
        "id": "9888af06fbea5354",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config date",
        "func": "//coloca o payload em outras variaveis\nvar date_begin_flow = flow.get(\"date_begin_flow\")|| \"\"\nvar date_end_flow = flow.get(\"date_end_flow\") || \"\"\n\nvar date_begin = msg.payload.date_begin\nvar date_end = msg.payload.date_end\n\nfunction formatDate(date){\n    var separator_date = date.split(\"T\")\n    var new_date = separator_date[0]\n    var new_separator_date = new_date.split(\"-\")\n    var day_begin = new_separator_date[2]\n    var month_begin = new_separator_date[1]\n    var year_begin = new_separator_date[0]\n    return day_begin + \"/\" + month_begin + \"/\" + year_begin\n}\n\nmsg.payload = {}\n//caso o usuario nao passe nenhuma data\nif (date_begin == null && date_end == null) {\n    msg.payload.begin = date_begin\n    msg.payload.end = date_end\n\n}\n//usuario passou apenas data final\nelse if(date_begin == null && date_end != null){\n    msg.payload.begin = date_begin\n    msg.payload.end = formatDate(date_end)\n}\n//usuario passou apenas data de inicio\nelse if(date_begin != null && date_end == null){\n    msg.payload.begin = formatDate(date_begin)\n    msg.payload.end = date_end\n}\nelse{\n    msg.payload.begin = formatDate(date_begin)\n    msg.payload.end = formatDate(date_end)\n}\n\ndate_begin_flow = msg.payload.begin\ndate_end_flow = msg.payload.end\n\nflow.set(\"date_begin_flow\", date_begin_flow)\nflow.set(\"date_end_flow\", date_end_flow)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2120,
        "wires": [
            [
                "bc2f7a13ddee397c"
            ]
        ],
        "info": "Pega data de inicio e de fim e arruma no formato: \"dd/mm/aaaa\""
    },
    {
        "id": "239802e9717738e1",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Sel Tabela Resumo",
        "func": "var date_begin = flow.get(\"date_begin_flow\")\nvar date_end = flow.get(\"date_end_flow\")\n//var date_begin = msg.payload.begin\n//var date_end = msg.payload.end\nvar id_to_show = flow.get(\"id_to_show\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\n\n//verifica se a data esta entre duas datas\nfunction checkDate(date_resumo_str, date_begin, date_end) {\n\n    var d1 = date_begin.split(\"/\");\n    var d2 = date_end.split(\"/\");\n    var c = date_resumo_str.split(\"/\");\n\n    var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);  // -1 because months are from 0 to 11\n    var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n    var check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n    if (check >= from && check <= to) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\nvar tabela_individual = []\n\n//nao passou nenhuma das datas - recolhe todos os dados\nif(date_begin == null && date_end == null){\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            tabela_individual.push(resumo_sinalizadores[i])\n            \n        }\n    }\n}\n//passou apenas data de fim\nelse if(date_begin == null && date_end != null){\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, resumo_sinalizadores[0].current_date, date_end)\n\n            if (flag == true) {\n                tabela_individual.push(resumo_sinalizadores[i])\n            }\n        }\n    }\n}\n//passou apenas data de inicio\nelse if(date_begin != null && date_end == null){\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, resumo_sinalizadores[resumo_sinalizadores.length - 1].current_date)\n\n            if (flag == true) {\n                tabela_individual.push(resumo_sinalizadores[i])\n            }\n        }\n    }\n}\n//passou as duas datas\nelse{\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, date_end)\n\n            if (flag == true) {\n                tabela_individual.push(resumo_sinalizadores[i])\n            }\n        }\n    }\n}\n\nmsg = {};\nmsg.payload = tabela_individual\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "b6ca060716a4f878",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config time for graph",
        "func": "var date_begin = flow.get(\"date_begin_flow\")\nvar date_end = flow.get(\"date_end_flow\")\n//var date_begin = msg.payload.begin\n//var date_end = msg.payload.end\nvar id_to_show = flow.get(\"id_to_show\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nvar d = new Date()\n\nvar t_green_total = 0\nvar t_red_total = 0\nvar t_yellow_total = 0\nvar t_blue_total = 0\nvar t_gray_total = 0\n\nfunction checkDate(date_resumo_str, date_begin, date_end) {\n\n    var d1 = date_begin.split(\"/\");\n    var d2 = date_end.split(\"/\");\n    var c = date_resumo_str.split(\"/\");\n\n    var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);  // -1 because months are from 0 to 11\n    var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n    var check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n    if (check >= from && check <= to) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\nfunction calculateTime(current_status, time_ended, time_started){\n    \n    if (time_ended == 0) {\n        time_ended = d.getTime()\n    }\n    if (current_status == color_values.green) {\n        t_green_total = t_green_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.red) {\n        t_red_total = t_red_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.yellow) {\n        t_yellow_total = t_yellow_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.blue) {\n        t_blue_total = t_blue_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.gray) {\n        t_gray_total = t_gray_total + (time_ended - time_started)\n    }\n}\n\n//nao passou nenhuma das datas - recolhe de todo periodo \nif(date_begin == null && date_end == null){\n    //encontra o sinalizador selecionado pelo usuario e soma os tempos\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n        }\n    }\n}\n//passou apenas data de fim\nelse if (date_begin == null && date_end != null) {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, resumo_sinalizadores[0].current_date, date_end)\n\n            if (flag == true) {\n                calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n            }\n        }\n    }\n}\n//passou apenas data de inicio\nelse if (date_begin != null && date_end == null) {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, resumo_sinalizadores[resumo_sinalizadores.length - 1].current_date)\n\n            if (flag == true) {\n                calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n            }\n        }\n    }\n}\n//passou as duas datas\nelse {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var i = 0; i < resumo_sinalizadores.length; i++) {\n        if (resumo_sinalizadores[i].clientID == id_to_show) {\n            var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, date_end)\n\n            if (flag == true) {\n                calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n            }\n        }\n    }\n}\n\nfor(var x=0; x<sinalizadores.length; x++){\n    if(sinalizadores[x].clientID == id_to_show){\n        var sinalizador_name = sinalizadores[x].name\n    }\n}\n\nmsg.payload = {};\nmsg.payload.name = sinalizador_name\nmsg.payload.time_green = t_green_total\nmsg.payload.time_red = t_red_total\nmsg.payload.time_yellow = t_yellow_total\nmsg.payload.time_blue = t_blue_total\nmsg.payload.time_gray = t_gray_total\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 2480,
        "wires": [
            [
                "63724ab6a4ba01f2"
            ]
        ]
    },
    {
        "id": "e6401f0a865462b8",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Select interval",
        "info": "",
        "x": 1570,
        "y": 2120,
        "wires": []
    },
    {
        "id": "b74ee7f06dd661d3",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Select interval",
        "info": "",
        "x": 1670,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d0fe25719d86c492",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "function 6",
        "func": "var date_begin = msg.payload.begin\nvar date_end = msg.payload.end\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar color_values = flow.get(\"color_values\", \"bank1\")\nvar chosen_status = flow.get(\"chosen_status\")\n\nvar d = new Date()\n\nvar table = new Array(sinalizadores.length) //vetor que sera passado para o node da tabela\n\nvar t_green_total = 0\nvar t_red_total = 0\nvar t_yellow_total = 0\nvar t_blue_total = 0\nvar t_gray_total = 0\n\nvar stop_counter = 0\n\nfunction formatTime(totalTime) {   //recebe em milisegundos\n    var diffDays = Math.floor(totalTime / 86400000); // days\n    var diffHrs = Math.floor((totalTime % 86400000) / 3600000); // hours\n    \n    var diffMins = Math.floor(((totalTime % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    var diffSecs = Math.floor((((totalTime % 86400000) % 3600000) % 60000) / 1000);  //seconds\n    diffSecs = diffSecs < 10 ? \"0\" + diffSecs : diffSecs;\n    diffHrs = diffHrs + (diffDays * 24)\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var formatedTime = diffHrs + \":\" + diffMins + \":\" + diffSecs\n    return formatedTime;\n}\n\nfunction checkDate(date_resumo_str, date_begin, date_end) {\n\n    var d1 = date_begin.split(\"/\");\n    var d2 = date_end.split(\"/\");\n    var c = date_resumo_str.split(\"/\");\n\n    var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);  // -1 because months are from 0 to 11\n    var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\n    var check = new Date(c[2], parseInt(c[1]) - 1, c[0]);\n\n    if (check >= from && check <= to) {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\nfunction calculateTime(current_status, time_ended, time_started) {\n\n    if (time_ended == 0) {\n        time_ended = d.getTime()\n    }\n    if (current_status == color_values.green) {\n        t_green_total = t_green_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.red) {\n        t_red_total = t_red_total + (time_ended - time_started)\n        stop_counter = stop_counter + 1\n    }\n    else if (current_status == color_values.yellow) {\n        t_yellow_total = t_yellow_total + (time_ended - time_started)\n    }\n    else if (current_status == color_values.blue) {\n        t_blue_total = t_blue_total + (time_ended - time_started)\n        stop_counter = stop_counter + 1\n    }\n    else if (current_status == color_values.gray) {\n        t_gray_total = t_gray_total + (time_ended - time_started)\n    }\n}\n\nfunction clearVariables(){\n    t_gray_total = 0\n    t_red_total = 0\n    t_yellow_total = 0\n    t_blue_total = 0\n    t_gray_total = 0\n    stop_counter = 0\n}\n\n\n//nao passou nenhuma das datas - recolhe de todo periodo \nif (date_begin == null && date_end == null) {\n    for(var j=0; j<sinalizadores.length; j++){\n        for (var i = 0; i < resumo_sinalizadores.length; i++) {\n            if (resumo_sinalizadores[i].clientID == sinalizadores[j].clientID) {\n                calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n            }\n        }\n        table[j] = {\n            clientID: sinalizadores[j].clientID,\n            name: sinalizadores[j].name,\n            time_green_str: formatTime(t_green_total),\n            time_red_str: formatTime(t_red_total),\n            time_yellow_str: formatTime(t_yellow_total),\n            time_blue_str: formatTime(t_blue_total),\n            time_gray_str: formatTime(t_gray_total),\n            stop_counter: stop_counter\n        }\n        clearVariables();\n    }\n}\n//passou apenas data de fim\nelse if (date_begin == null && date_end != null) {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var j = 0; j < sinalizadores.length; j++) {\n        for (var i = 0; i < resumo_sinalizadores.length; i++) {\n            if (resumo_sinalizadores[i].clientID == sinalizadores[j].clientID) {\n                var flag = checkDate(resumo_sinalizadores[i].current_date, resumo_sinalizadores[0].current_date, date_end)\n\n                if(flag == true){\n                    calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n                }\n            }\n        }\n        table[j] = {\n            clientID: sinalizadores[j].clientID,\n            name: sinalizadores[j].name,\n            time_green_str: formatTime(t_green_total),\n            time_red_str: formatTime(t_red_total),\n            time_yellow_str: formatTime(t_yellow_total),\n            time_blue_str: formatTime(t_blue_total),\n            time_gray_str: formatTime(t_gray_total),\n            stop_counter: stop_counter\n        }\n        clearVariables();\n    }\n}\n//passou apenas data de inicio\nelse if (date_begin != null && date_end == null) {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var j = 0; j < sinalizadores.length; j++) {\n        for (var i = 0; i < resumo_sinalizadores.length; i++) {\n            if (resumo_sinalizadores[i].clientID == sinalizadores[j].clientID) {\n                var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, resumo_sinalizadores[resumo_sinalizadores.length - 1].current_date)\n\n                if (flag == true) {\n                    calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n                }\n            }\n        }\n        table[j] = {\n            clientID: sinalizadores[j].clientID,\n            name: sinalizadores[j].name,\n            time_green_str: formatTime(t_green_total),\n            time_red_str: formatTime(t_red_total),\n            time_yellow_str: formatTime(t_yellow_total),\n            time_blue_str: formatTime(t_blue_total),\n            time_gray_str: formatTime(t_gray_total),\n            stop_counter: stop_counter\n        }\n        clearVariables();\n    }\n}\n//passou as duas datas\nelse {\n    //encontra o sinalizador selecionado pelo usuario\n    for (var j = 0; j < sinalizadores.length; j++) {\n        for (var i = 0; i < resumo_sinalizadores.length; i++) {\n            if (resumo_sinalizadores[i].clientID == sinalizadores[j].clientID) {\n                var flag = checkDate(resumo_sinalizadores[i].current_date, date_begin, date_end)\n\n                if (flag == true) {\n                    calculateTime(resumo_sinalizadores[i].current_status, resumo_sinalizadores[i].time_ended, resumo_sinalizadores[i].time_started)\n                }\n            }\n        }\n        table[j] = {\n            clientID: sinalizadores[j].clientID,\n            name: sinalizadores[j].name,\n            time_green_str: formatTime(t_green_total) ,\n            time_red_str: formatTime(t_red_total),\n            time_yellow_str: formatTime(t_yellow_total),\n            time_blue_str: formatTime(t_blue_total),\n            time_gray_str: formatTime(t_gray_total),\n            stop_counter: stop_counter\n        }\n        clearVariables();\n    }\n}\n\nmsg = {}\nmsg.payload = table\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1140,
        "wires": [
            [
                "d447f70d1bd2549e",
                "cc6626c1f5abdb4d"
            ]
        ]
    },
    {
        "id": "db542acc44f8718d",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "group": "79b4d5c2.bfe4ac",
        "name": "Display Date Interval",
        "order": 2,
        "width": 4,
        "height": 2,
        "format": "<p><b>Data Início:</b>{{msg.payload.begin}}</p>\n\n<p><b> Data Final:</b> {{msg.payload.end}}</p>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2760,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "562ad9cf6ffef88a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Adjust Date",
        "func": "var date_begin = flow.get(\"date_begin_flow\")\nvar date_end = flow.get(\"date_end_flow\")\n//var date_begin = msg.payload.begin\n//var date_end = msg.payload.end\n\nvar date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar id_to_show = flow.get(\"id_to_show\", \"bank1\")\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\n\nif(date_begin == null){\n    for(var i=0; i<resumo_sinalizadores.length; i++){\n        if (resumo_sinalizadores[i].clientID == id_to_show){\n            date_begin = resumo_sinalizadores[i].current_date\n            break\n        }\n    }\n}\nif(date_end == null){\n    date_end = new_date\n}\n\nmsg.payload.begin = date_begin\nmsg.payload.end = date_end\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "fb2ce33434415ee8",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "group": "ead3fc9.832a3",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    body.nr-dashboard-theme md-content md-card {\n        border-radius: 10px;\n    }\n\n    .nr-dashboard-theme ui-card-panel {\n        border-radius: 10px;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2220,
        "y": 900,
        "wires": [
            [
                "1d5be367.89640d",
                "2612b81d1d540a0a"
            ]
        ]
    },
    {
        "id": "0ee6eb7d932046c7",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Selecione a Cor",
        "group": "f4f6b202d5b20fa6",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 2080,
        "y": 3660,
        "wires": [
            [
                "1c55be19a8c9fd17"
            ]
        ]
    },
    {
        "id": "f36a1277d750c653",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 8",
        "func": "\nvar cores = [4]\n\ncores[0] = \"Verde\"\ncores[1] = \"Vermelho\"\ncores[2] = \"Amarelo\"\ncores[3] = \"Azul\"\n\nmsg = {}\nmsg.options = cores\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 3660,
        "wires": [
            [
                "0ee6eb7d932046c7"
            ]
        ]
    },
    {
        "id": "3106013f6ebd2435",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1750,
        "y": 3660,
        "wires": [
            [
                "f36a1277d750c653"
            ]
        ]
    },
    {
        "id": "1c55be19a8c9fd17",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att cor para mudar",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\nvar color_to_change = flow.get(\"color_to_change\")\n\ncolor_to_change = msg.payload\n\n\nmsg = {}\n\nif (color_to_change == \"Verde\"){\n    msg.payload = color_values.green\n}\nelse if (color_to_change == \"Vermelho\"){\n    msg.payload = color_values.red\n}\nelse if (color_to_change == \"Amarelo\") {\n    msg.payload = color_values.yellow\n}\nelse if (color_to_change == \"Azul\") {\n    msg.payload = color_values.blue\n}\n\nflow.set(\"color_to_change\", color_to_change)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar color_to_change = \" \"\nflow.set(\"color_to_change\", color_to_change)",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "598063c8b28f9650",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "f4f6b202d5b20fa6",
        "order": 4,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Digite o novo significado para esta cor",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 2170,
        "y": 3700,
        "wires": []
    },
    {
        "id": "8ab5a928c3ad0ddc",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Clear input ",
        "func": "msg = {}\nmsg.payload = \" \"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3780,
        "wires": [
            [
                "797b9c61b8647a5c"
            ]
        ]
    },
    {
        "id": "797b9c61b8647a5c",
        "type": "ui_text_input",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "label": "Novo significado",
        "tooltip": "",
        "group": "f4f6b202d5b20fa6",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 2040,
        "y": 3780,
        "wires": [
            [
                "233c036ea98d016f"
            ]
        ]
    },
    {
        "id": "f2222e4d8c0add6a",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "link in 1",
        "links": [
            "e95389ef51a73ed5"
        ],
        "x": 1715,
        "y": 3780,
        "wires": [
            [
                "8ab5a928c3ad0ddc"
            ]
        ]
    },
    {
        "id": "233c036ea98d016f",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Confere novo significado",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\nvar color_value_can_change = flow.get(\"color_value_can_change\")\nvar new_color_value = flow.get(\"new_color_value\")\n\nnew_color_value = msg.payload\n\ncolor_value_can_change = true\n\nif( color_values.green == new_color_value || \n    color_values.red == new_color_value ||\n    color_values.yellow == new_color_value ||\n    color_values.blue == new_color_value\n){\n    color_value_can_change = false\n}\n\n\n\nflow.set(\"new_color_value\", new_color_value)\nflow.set(\"color_value_can_change\", color_value_can_change)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar color_value_can_change = true\nflow.set(\"color_value_can_change\", color_value_can_change)\n\nvar new_color_value = \"\"\nflow.set(\"new_color_value\", new_color_value)",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 3780,
        "wires": [
            []
        ]
    },
    {
        "id": "48951c0a55e91a72",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "group": "f4f6b202d5b20fa6",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1750,
        "y": 3840,
        "wires": [
            [
                "f86c8f593b9d6d2a"
            ]
        ]
    },
    {
        "id": "f86c8f593b9d6d2a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 10",
        "func": "var color_value_can_change = flow.get(\"color_value_can_change\")\n\nmsg = {}\nmsg.payload = color_value_can_change\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 3840,
        "wires": [
            [
                "68b8b9caeac92ec6"
            ]
        ]
    },
    {
        "id": "68b8b9caeac92ec6",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2070,
        "y": 3840,
        "wires": [
            [
                "1f3b47b7053c8409"
            ],
            [
                "a494bf8233d61c28"
            ]
        ]
    },
    {
        "id": "1f3b47b7053c8409",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att color_value",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\nvar new_color_value = flow.get(\"new_color_value\")\nvar color_to_change = flow.get(\"color_to_change\")\n\nif(color_to_change == \"Verde\"){\n    color_values.green = new_color_value\n}\nelse if(color_to_change == \"Vermelho\"){\n    color_values.red = new_color_value\n}\nelse if (color_to_change == \"Amarelo\") {\n    color_values.yellow = new_color_value\n}\nelse if (color_to_change == \"Azul\") {\n    color_values.blue = new_color_value\n}\n\nflow.set(\"color_values\", color_values, \"bank1\")\n\nmsg.payload = new_color_value\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 3820,
        "wires": [
            [
                "e95389ef51a73ed5",
                "a70707a51bf50683"
            ]
        ]
    },
    {
        "id": "a494bf8233d61c28",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Valor de cor ja usado",
        "func": "msg = {}\nmsg.topic = \"AVISO\"\nmsg.payload = \"Este significado já está sendo utilizado. Digite outro significado para esta cor.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 3860,
        "wires": [
            [
                "3480bec80c1422e0"
            ]
        ]
    },
    {
        "id": "3480bec80c1422e0",
        "type": "ui_toast",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "AVISO",
        "name": "Color_Value ja existe",
        "x": 2500,
        "y": 3860,
        "wires": []
    },
    {
        "id": "e95389ef51a73ed5",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "f2222e4d8c0add6a",
            "de233bd3d1ea564c",
            "eba40c2bbdbd197b"
        ],
        "x": 2365,
        "y": 3820,
        "wires": []
    },
    {
        "id": "de233bd3d1ea564c",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "link in 2",
        "links": [
            "e95389ef51a73ed5"
        ],
        "x": 1795,
        "y": 3720,
        "wires": [
            [
                "f36a1277d750c653"
            ]
        ]
    },
    {
        "id": "63091b79b208f34f",
        "type": "ui_led",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "order": 1,
        "group": "f4f6b202d5b20fa6",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "Verde",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Green",
        "x": 1910,
        "y": 3920,
        "wires": []
    },
    {
        "id": "c3531fa1671a52e4",
        "type": "ui_led",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "order": 5,
        "group": "f4f6b202d5b20fa6",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "Vermelho",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Red",
        "x": 1910,
        "y": 3960,
        "wires": []
    },
    {
        "id": "762558374619fb9a",
        "type": "ui_led",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "order": 11,
        "group": "f4f6b202d5b20fa6",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ffd91a",
                "value": "Amarelo",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Yellow",
        "x": 1910,
        "y": 4000,
        "wires": []
    },
    {
        "id": "9c2ae7ca7ae94e81",
        "type": "ui_led",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "order": 15,
        "group": "f4f6b202d5b20fa6",
        "width": 2,
        "height": 2,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#3744fb",
                "value": "Azul",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Blue",
        "x": 1910,
        "y": 4040,
        "wires": []
    },
    {
        "id": "71f6e1a76f253672",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Verde",
        "payloadType": "str",
        "x": 1770,
        "y": 3920,
        "wires": [
            [
                "63091b79b208f34f"
            ]
        ]
    },
    {
        "id": "2a6e0ce883925f77",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Vermelho",
        "payloadType": "str",
        "x": 1780,
        "y": 3960,
        "wires": [
            [
                "c3531fa1671a52e4"
            ]
        ]
    },
    {
        "id": "40b2d8ef052d9f59",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Amarelo",
        "payloadType": "str",
        "x": 1780,
        "y": 4000,
        "wires": [
            [
                "762558374619fb9a"
            ]
        ]
    },
    {
        "id": "454bb2c7a57826ec",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Azul",
        "payloadType": "str",
        "x": 1770,
        "y": 4040,
        "wires": [
            [
                "9c2ae7ca7ae94e81"
            ]
        ]
    },
    {
        "id": "5807098756557cf9",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "f4f6b202d5b20fa6",
        "order": 2,
        "width": 4,
        "height": 2,
        "name": "text_G",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2610,
        "y": 3940,
        "wires": []
    },
    {
        "id": "684c6dc4b967cd09",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "f4f6b202d5b20fa6",
        "order": 6,
        "width": 4,
        "height": 2,
        "name": "text_R",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2610,
        "y": 3980,
        "wires": []
    },
    {
        "id": "106763079d8a471a",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "f4f6b202d5b20fa6",
        "order": 12,
        "width": 4,
        "height": 2,
        "name": "text_Y",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2610,
        "y": 4020,
        "wires": []
    },
    {
        "id": "78c28a4569ba1999",
        "type": "ui_text",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "group": "f4f6b202d5b20fa6",
        "order": 16,
        "width": 4,
        "height": 2,
        "name": "text_B",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 2610,
        "y": 4060,
        "wires": []
    },
    {
        "id": "4d9bcf9bcc04b7f1",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2130,
        "y": 4000,
        "wires": [
            [
                "a70707a51bf50683"
            ]
        ]
    },
    {
        "id": "1bd4de93037badd5",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 11",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nmsg = {}\nmsg.payload = color_values.green\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 3940,
        "wires": [
            [
                "b791dd8afc66e827"
            ]
        ]
    },
    {
        "id": "1deb1d0e8b3c56f7",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 12",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nmsg = {}\nmsg.payload = color_values.red\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 3980,
        "wires": [
            [
                "f1372b28009e7be4"
            ]
        ]
    },
    {
        "id": "da13b5efb38a8cbe",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 13",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nmsg = {}\nmsg.payload = color_values.yellow\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 4020,
        "wires": [
            [
                "796d2a59c4c12f9d"
            ]
        ]
    },
    {
        "id": "07d48c4273ec8942",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 14",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nmsg = {}\nmsg.payload = color_values.blue\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 4060,
        "wires": [
            [
                "6177e9f7beff6420"
            ]
        ]
    },
    {
        "id": "943150e8067e8d38",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "Att Status Meia Noite",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1440,
        "wires": [
            [
                "812b7d9f0e77132b"
            ]
        ]
    },
    {
        "id": "812b7d9f0e77132b",
        "type": "function",
        "z": "986afd82ee909974",
        "name": "function 15",
        "func": "var date = new Date()\n\nvar full_date = date.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\nvar resumo_sinalizadores = flow.get(\"resumo_sinalizadores\", \"bank1\")\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar newPayload = [{}]\n\n//att para todos os sinalizadores\nfor(var i=0; i<sinalizadores.length; i++){\n    newPayload[i] = {\n        clientID : sinalizadores[i].clientID,\n        name: sinalizadores[i].name,\n        current_status: sinalizadores[i].current_status,\n        time_change_str: new_time,\n        current_date: new_date,\n        time_started: date.getTime(),\n        time_ended : 0\n    }\n}\n\nfor(var l=0; l<newPayload.length; l++){\n    resumo_sinalizadores.push(newPayload[l])   //add no vetor\n}\n\nvar count = 0\nfor (var j = 0; j < newPayload.length; j++) {\n    for (var k = resumo_sinalizadores.length - 1; k >= 0; k--) {\n        if (resumo_sinalizadores[k].clientID == newPayload[j].clientID) {\n            if(count == 1){\n                resumo_sinalizadores[k].time_ended = newPayload[j].time_started\n                break;\n            }\n            ++count;\n        }\n    }\n    count = 0\n}\n\n\nflow.set(\"resumo_sinalizadores\", resumo_sinalizadores, \"bank1\")\n   \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1440,
        "wires": [
            [
                "1962862a2130f2cb"
            ]
        ]
    },
    {
        "id": "1962862a2130f2cb",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "ce090a5e.662658"
        ],
        "x": 525,
        "y": 1440,
        "wires": []
    },
    {
        "id": "5c127e07977766e7",
        "type": "comment",
        "z": "986afd82ee909974",
        "name": "Gerar CSV",
        "info": "Permite que o usuario, atraves da dashboard, selecione o período dos dados \ndo sinalizador, para gerar um arquivo csv",
        "x": 1680,
        "y": 4280,
        "wires": []
    },
    {
        "id": "131b4b8dc460a66c",
        "type": "ui_dropdown",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Drop Status",
        "label": "",
        "tooltip": "",
        "place": "Selecione o Status",
        "group": "ba2b6bb3631a7eac",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 2090,
        "y": 1360,
        "wires": [
            [
                "edab5463a821987a"
            ]
        ]
    },
    {
        "id": "28f00ec4bd73751b",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Color_Values Array",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nvar status = [color_values.green, color_values.red, color_values.yellow, color_values.blue]\n\nmsg = {}\nmsg.options = status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1360,
        "wires": [
            [
                "131b4b8dc460a66c"
            ]
        ]
    },
    {
        "id": "88f6758cb074cd63",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1650,
        "y": 1360,
        "wires": [
            [
                "28f00ec4bd73751b"
            ]
        ]
    },
    {
        "id": "eba40c2bbdbd197b",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "link in 3",
        "links": [
            "e95389ef51a73ed5"
        ],
        "x": 1775,
        "y": 1360,
        "wires": [
            [
                "28f00ec4bd73751b"
            ]
        ]
    },
    {
        "id": "db7f9cea636732e6",
        "type": "ui_button",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "",
        "group": "ba2b6bb3631a7eac",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1810,
        "y": 1460,
        "wires": [
            [
                "0f0a8690d26363a8"
            ]
        ]
    },
    {
        "id": "edab5463a821987a",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Att variavel status escolhido",
        "func": "var chosen_status = flow.get(\"chosen_status\")||\"\"\n\nchosen_status = msg.payload\n\nflow.set(\"chosen_status\", chosen_status)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "0f0a8690d26363a8",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "function 16",
        "func": "var chosen_status = flow.get(\"chosen_status\")\n\nvar sinalizadores = flow.get(\"sinalizadores\", \"bank1\")\n\nvar table = []\n\n//filtrou pelo status\nif (chosen_status != null){\n    for(var i=0; i<sinalizadores.length; i++){\n        if(sinalizadores[i].current_status == chosen_status){\n            table.push(sinalizadores[i])\n        }\n    }\n}\n//nao filtrou nada\nelse if(chosen_status == null){\n    table = sinalizadores\n}\n\nmsg = {}\nmsg.payload = table\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "cb9ed6f169bbb140",
        "type": "ui_template",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "group": "2c09e8f6e779fc72",
        "name": "",
        "order": 1,
        "width": "5",
        "height": "5",
        "format": "<body>\n    <p><b>Tempo Total: </b>{{msg.payload.t_total}}</p>\n    <p><i class=\"fa fa-circle\" aria-hidden=\"true\" style=\"color:green\"></i> : {{msg.payload.t_green}}</p>\n    <p><i class=\"fa fa-circle\" aria-hidden=\"true\" style=\"color:red\"></i> : {{msg.payload.t_red}}</p>\n    <p><i class=\"fa fa-circle\" aria-hidden=\"true\" style=\"color:yellow\"></i> : {{msg.payload.t_yellow}}</p>\n    <p><i class=\"fa fa-circle\" aria-hidden=\"true\" style=\"color:blue\"></i> : {{msg.payload.t_blue}}</p>\n    <p><i class=\"fa fa-circle\" aria-hidden=\"true\" style=\"color:gray\"></i> : {{msg.payload.t_gray}}</p>\n\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2740,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "66796c150b33f719",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config time to show",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\nvar t_total = flow.get(\"t_total\")\nvar t_green = flow.get(\"t_green\")\nvar t_red = flow.get(\"t_red\")\nvar t_yellow = flow.get(\"t_yellow\")\nvar t_blue = flow.get(\"t_blue\")\nvar t_gray = flow.get(\"t_gray\")\n\nfunction formatTime(totalTime) {   //recebe em milisegundos\n    var diffDays = Math.floor(totalTime / 86400000); // days\n    var diffHrs = Math.floor((totalTime % 86400000) / 3600000); // hours\n\n    var diffMins = Math.floor(((totalTime % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    var diffSecs = Math.floor((((totalTime % 86400000) % 3600000) % 60000) / 1000);  //seconds\n    diffSecs = diffSecs < 10 ? \"0\" + diffSecs : diffSecs;\n    diffHrs = diffHrs + (diffDays * 24)\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var formatedTime = diffHrs + \":\" + diffMins + \":\" + diffSecs\n    return formatedTime;\n}\n\nmsg.payload = {}\n\nmsg.payload.t_total = formatTime(t_total)\nmsg.payload.t_green = formatTime(t_green)\nmsg.payload.t_red = formatTime(t_red)\nmsg.payload.t_yellow = formatTime(t_yellow)\nmsg.payload.t_blue = formatTime(t_blue)\nmsg.payload.t_gray = formatTime(t_gray)\nmsg.payload.color_values = color_values\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 2480,
        "wires": [
            [
                "cb9ed6f169bbb140"
            ]
        ],
        "info": "Configura a quantidade de horas que cada status ficou em um formato legivel: hh:mm:ss"
    },
    {
        "id": "5a0cfb62417c321f",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "CREATE NEW",
        "query": "INSERT INTO public.equipement\n   (mac_address , name , type_equipment, color_status, connectivity_status)\n  VALUES('{{msg.payload.macAdd}}', '{{msg.payload.name}}' , '{{msg.payload.type}}', '-', '{{msg.payload.connectivity}}') RETURNING *;",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "cea544e19930f2d4"
            ]
        ],
        "info": "Cria um novo equipamento e insere na tabela equipement"
    },
    {
        "id": "d348875d72c343bc",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "split msg",
        "func": "var new_equipment = flow.get(\"new_equipment\")||{}\n\nvar mensagem = msg.payload  //Ex.: AA100-IHM-00:11:22:33:44:55\nvar separator = mensagem.split(\"-\")  //separa a mensagem\nnew_equipment.name = separator[0] //Ex: AA100\nnew_equipment.type = separator[1]     //Ex: IHM\nnew_equipment.macAdd = separator[2]   //EX: 00:11:22:33:44:55\nnew_equipment.connectivity = \"online\"\nflow.set(\"new_equipment\", new_equipment)\n\nmsg = {}\nmsg.payload = new_equipment\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "8b71a2f29b78cad5"
            ]
        ]
    },
    {
        "id": "5b1e1f4a95e636c2",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "EXIST?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 400,
        "wires": [
            [
                "ec349f3b3013ba0f"
            ],
            [
                "8eab0ea2a3e75784"
            ]
        ]
    },
    {
        "id": "8eab0ea2a3e75784",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "NO",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "new_equipment",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 420,
        "wires": [
            [
                "5a0cfb62417c321f"
            ]
        ]
    },
    {
        "id": "ec349f3b3013ba0f",
        "type": "change",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "YES",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "new_equipment",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 380,
        "wires": [
            [
                "7c1fddbfa19182ef"
            ]
        ]
    },
    {
        "id": "7c1fddbfa19182ef",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "UPDATE",
        "query": "UPDATE public.equipement\nSET connectivity_status = '{{msg.payload.connectivity}}',\n    updated_at = current_timestamp\nWHERE mac_address = '{{msg.payload.macAdd}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 980,
        "y": 380,
        "wires": [
            []
        ],
        "info": "Caso ja exista esse sinalizador no banco, e chegou mensagem dele deste topico,\r\né por que ele estava offline, e agora reconectou com o servidor.\r\nPortanto, devemos atualziar o status de conectividade dele no banco\r\npara online."
    },
    {
        "id": "490b47c687aab3d7",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "split msg",
        "func": "var new_log = flow.get(\"new_log\")||{}\n\nvar mensagem = msg.payload  //Ex.: AA100-00:11:22:33:44:55-green\nvar separator = mensagem.split(\"-\")  //separa a mensagem\n\nmsg.payload = {}\nnew_log.name = separator[0] //Ex: AA100\nnew_log.macAdd = separator[1]     //Ex: 00:11:22:33:44:55\nnew_log.color_status = separator[2]   //EX: green\nnew_log.connectivity = \"online\"\n\nflow.set(\"new_log\", new_log)\n\nmsg.payload.macAdd = new_log.macAdd\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 780,
        "wires": [
            [
                "7d8afd112c4d240a"
            ]
        ]
    },
    {
        "id": "21d92f88bab1646b",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "split msg",
        "func": "var new_log = flow.get(\"new_log\") || {}\n\nvar mensagem = msg.payload  //Ex.: AA100-IHM-00:11:22:33:44:55\nvar separator = mensagem.split(\"-\")  //separa a mensagem\n\nmsg.payload = {}\nnew_log.name = separator[0] //Ex: AA100\nnew_log.type = separator[1]     //Ex: IHM\nnew_log.macAdd = separator[2]   //EX: 00:11:22:33:44:55\nnew_log.connectivity = \"offline\"\nnew_log.color_status = \"gray\"\n\n\nflow.set(\"new_log\", new_log)\nmsg.payload.macAdd = new_log.macAdd\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "7d8afd112c4d240a"
            ]
        ]
    },
    {
        "id": "ea1fa2179048a1a7",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "INSERT LOG",
        "query": "INSERT INTO public.equipement_logs\n   (equipement_id, connectivity , color_status)\n  VALUES('{{msg.payload.id}}', '{{msg.payload.connectivity}}', '{{msg.payload.color_status}}') RETURNING *;",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 880,
        "y": 780,
        "wires": [
            [
                "80f6f6f2d712fb7b",
                "af59f655dbcef04a"
            ]
        ],
        "info": "Insere nova linha na tabela de logs"
    },
    {
        "id": "7d8afd112c4d240a",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\nWHERE mac_address = '{{msg.payload.macAdd}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 540,
        "y": 780,
        "wires": [
            [
                "95b263d0999acab3"
            ]
        ],
        "info": "Pega o id do equipamento no banco"
    },
    {
        "id": "95b263d0999acab3",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "prepare log",
        "func": "var equipment_id = msg.payload[0].id\nvar equipment_name = msg.payload[0].name\nvar new_log = flow.get(\"new_log\")\n\nmsg.payload = {}\nmsg.payload.id = equipment_id\nmsg.payload.name = equipment_name\nmsg.payload.connectivity = new_log.connectivity\nmsg.payload.color_status = new_log.color_status\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 780,
        "wires": [
            [
                "ea1fa2179048a1a7",
                "a4f965b8c7ea4f5d",
                "f008569c1a3599c2"
            ]
        ]
    },
    {
        "id": "80f6f6f2d712fb7b",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 21",
        "func": "var log = msg.payload[0]\n\nvar date_time = new Date(log.created_at)\n\nvar date_time_ms = date_time.getTime()\n\nvar full_date = date_time.toLocaleString('pt-BR', {\n    timeZone: 'America/Sao_Paulo',\n})\nvar date_separator = full_date.split(\" \")\nvar new_date = date_separator[0]    //Ex: \"18/10/2022\"\nvar new_time = date_separator[1]    //Ex: \"15:45:05\"\n\n\nmsg = {}\nmsg.payload = date_time_ms\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e11e06adbe9cfe50",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "SELECT",
        "query": "SELECT connectivity,\n   log_timestamp,\n   e.mac_address,\n   el.color_status,\n   el.created_at,\n   \"name\"\nfrom public.equipement_logs el \nleft join public.equipement e on el.equipement_id = e.id\nwhere e.mac_address  = '{{msg.payload.mac_address}}' and el.created_at between '{{msg.payload.date_begin}}' and '{{msg.payload.date_end}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2100,
        "y": 2320,
        "wires": [
            [
                "a111867d5a32035e",
                "417473bf8f2d8a69"
            ]
        ],
        "info": "Seleciona todos os dados referentes ao sinalizador escolhido"
    },
    {
        "id": "a4f965b8c7ea4f5d",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "UPDATE ",
        "query": "UPDATE public.equipement\nSET connectivity_status = '{{msg.payload.connectivity}}',\n    color_status = '{{msg.payload.color_status}}',\n    updated_at = current_timestamp\nWHERE name = '{{msg.payload.name}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 820,
        "wires": [
            []
        ],
        "info": "Atualiza o sinalizador na tabela equipement.\r\nAtualiza color_status, connectivity_status e update_at"
    },
    {
        "id": "1e1d1267766b9614",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Pass name to DB",
        "func": "var name_to_show = flow.get(\"name_to_show\")\n\nmsg.payload.name = name_to_show\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2140,
        "wires": [
            [
                "182a10176e81afc5"
            ]
        ]
    },
    {
        "id": "182a10176e81afc5",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\nWHERE name = '{{msg.payload.name}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2220,
        "y": 2140,
        "wires": [
            [
                "edf7d55ca2b9dc0e",
                "7345c8fc3bb55383"
            ]
        ],
        "info": "Seleciona o equipamento passando o nome selecionado pelo usuario"
    },
    {
        "id": "edf7d55ca2b9dc0e",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Pass macAdd and date",
        "func": "var macAdd\nvar date_begin = flow.get(\"date_begin\")\nvar date_end = flow.get(\"date_end\")\n\nif(msg.payload[0].type_equipment == \"ihm\"){\n    macAdd = msg.payload[0].mac_address\n}\nelse if(msg.payload[1].type_equipment == \"ihm\"){\n    macAdd = msg.payload[1].mac_address\n}\n\n\nif(date_begin == null){\n    date_begin = msg.payload[0].created_at\n    date_begin = date_begin.toISOString()\n\n    var separator_begin = date_begin.split(\"T\")\n    var time_begin = \"00:00:00\"\n    var new_date_begin = separator_begin[0] + \" \" + time_begin\n    date_begin = new_date_begin\n}\n\nmsg.payload = {}\nmsg.payload.mac_address = macAdd\nmsg.payload.date_begin = date_begin\nmsg.payload.date_end = date_end\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 2140,
        "wires": [
            [
                "e11e06adbe9cfe50",
                "ccf8d98bf109be1e"
            ]
        ],
        "info": "Recebe objeto do equipamento contendo todas suas informações. Organiza e passa o mac Address dele, junto com o datetime\r\nde inicio e de fim (selecionado pelo usuario)"
    },
    {
        "id": "a111867d5a32035e",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config data for table",
        "func": "var data_base_content = msg.payload\nvar resume_table = []\n\nfor (var i = 0; i < data_base_content.length; i++){\n    \n\n    var date_time = new Date(data_base_content[i].created_at)\n    var full_date = date_time.toLocaleString('pt-BR', {\n        timeZone: 'America/Sao_Paulo',\n    })\n    var date_separator = full_date.split(\" \")\n    var new_date = date_separator[0]    //Ex: \"18/10/2022\"\n    var new_time = date_separator[1]    //Ex: \"15:45:05\"\n    \n    resume_table[i] = {\n        name: data_base_content[i].name,\n        current_status: data_base_content[i].color_status,\n        current_date : new_date,\n        time_change_str : new_time\n    }\n}\n\nmsg = {}\nmsg.payload = resume_table\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2320,
        "wires": [
            [
                "aa95499224ace9b0",
                "47493818d817e28b"
            ]
        ]
    },
    {
        "id": "7345c8fc3bb55383",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Conf Descrição DB",
        "func": "var color_values = flow.get(\"color_values\", \"bank1\")\n\nfunction dateTime_correction(old_date_time){\n    var date_time = new Date(old_date_time)\n    var full_date = date_time.toLocaleString('pt-BR', {\n        timeZone: 'America/Sao_Paulo',\n    })\n    return full_date\n}\n\nfunction insertColorValue(color_status) {\n    switch (color_status) {\n        case \"green\":\n            return color_values.green\n            break\n        case \"red\":\n            return color_values.red\n            break\n        case \"yellow\":\n            return color_values.yellow\n            break\n        case \"blue\":\n            return color_values.blue\n            break\n        case \"gray\":\n            return color_values.gray\n            break\n    }\n}\n\nvar ihm = {}\nvar signalyzer = {}\n\nif(msg.payload[0].type_equipment == \"ihm\"){\n    ihm = msg.payload[0]\n    signalyzer = msg.payload[1]\n}\nelse if(msg.payload[0].type_equipment == \"signalyzer\"){\n    signalyzer = msg.payload[0]\n    ihm = msg.payload[1]\n}\n\nihm.color_status = insertColorValue(ihm.color_status)\nihm.created_at = dateTime_correction(ihm.created_at)\nsignalyzer.created_at = dateTime_correction(signalyzer.created_at)\n\nmsg.payload = {}\nmsg.payload = {\n    ihm: ihm,\n    signalyzer: signalyzer\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 2060,
        "wires": [
            [
                "e151f051682dee15"
            ]
        ]
    },
    {
        "id": "0e81164bc81f5837",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "Config msg torre DB",
        "func": "var name = msg.payload.name\nvar color_status = msg.payload.color_status\n\nvar message = name+\"-\"+color_status\n\nmsg = {}\nmsg.payload = message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 200,
        "wires": [
            [
                "a65068fa74520ce5"
            ]
        ]
    },
    {
        "id": "e0fb8dc96c721446",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "a93284da.462418",
        "name": "link in 4",
        "links": [
            "f008569c1a3599c2"
        ],
        "x": 1595,
        "y": 200,
        "wires": [
            [
                "0e81164bc81f5837"
            ]
        ]
    },
    {
        "id": "f008569c1a3599c2",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "e0fb8dc96c721446"
        ],
        "x": 815,
        "y": 880,
        "wires": []
    },
    {
        "id": "30fded0a30a884cf",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "Type",
        "property": "payload[0].type_equipment",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ihm",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "signalyzer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 500,
        "wires": [
            [
                "7c9a1ed626757dba"
            ],
            [
                "92239a3c5cc89b16"
            ]
        ]
    },
    {
        "id": "7c9a1ed626757dba",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "CREATE IHM",
        "query": "insert into public.ihm (is_paired)\nvalues(false) returning id;",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 780,
        "y": 500,
        "wires": [
            [
                "486b8533ba12b506"
            ]
        ],
        "info": "Cria uma nova ihm na tabela ihm"
    },
    {
        "id": "39c1eb8bd37c9e64",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "CREATE Signalyzer",
        "query": "insert into public.signalyzer (paired_ihm_id)\nvalues('{{msg.payload.id}}')returning *;\n",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 800,
        "y": 560,
        "wires": [
            [
                "be335deca55c3d9b"
            ]
        ],
        "info": "Cria um novo sinalizador na tabela signalyzer"
    },
    {
        "id": "cea544e19930f2d4",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 24",
        "func": "var equipement_version = flow.get(\"equipement_version\")||{}\nequipement_version.id = msg.payload[0].id\n\nflow.set(\"equipement_version\", equipement_version)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "30fded0a30a884cf"
            ]
        ]
    },
    {
        "id": "486b8533ba12b506",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 25",
        "func": "var equipement_version = flow.get(\"equipement_version\")\n\nequipement_version.hw_version_id = msg.payload[0].id\n\nmsg = {}\nmsg.payload = equipement_version\nflow.set(\"equipement_version\", equipement_version)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 500,
        "wires": [
            [
                "641b44acaac13d06"
            ]
        ]
    },
    {
        "id": "641b44acaac13d06",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "CREATE equipment_version",
        "query": "insert into public.equipement_version (equipement_id, hw_version_id)\nvalues('{{msg.payload.id}}', '{{msg.payload.hw_version_id}}') returning *;",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 500,
        "wires": [
            [
                "e6fbee5ee9011a28"
            ]
        ],
        "info": "Cria um novo equipamento na tabela equipement_version"
    },
    {
        "id": "fad60bfacdbe3875",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AB100 IHM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AC100-ihm-AA:00:BB:11:CC:22",
        "payloadType": "str",
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "7d1f6a954ebef80a"
            ]
        ]
    },
    {
        "id": "c6c680a62c3ddad3",
        "type": "inject",
        "z": "986afd82ee909974",
        "name": "AB100 Torre",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AC100-signalyzer-AA:00:BB:11:CC:22",
        "payloadType": "str",
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "4026ad91149a33d4"
            ]
        ]
    },
    {
        "id": "4026ad91149a33d4",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [],
        "x": 275,
        "y": 1320,
        "wires": []
    },
    {
        "id": "7d1f6a954ebef80a",
        "type": "link out",
        "z": "986afd82ee909974",
        "name": "",
        "links": [],
        "x": 275,
        "y": 1360,
        "wires": []
    },
    {
        "id": "92239a3c5cc89b16",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "SELECT",
        "query": "SELECT * FROM public.ihm\nWHERE is_paired = false limit 1;",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 420,
        "y": 560,
        "wires": [
            [
                "67750c2c471fb293"
            ]
        ],
        "info": "Verifica se existe uma ihm que nao tem um sinalizador pareado"
    },
    {
        "id": "67750c2c471fb293",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 26",
        "func": "var newPayload = msg.payload[0]\n\nmsg = {}\nmsg.payload = newPayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 560,
        "wires": [
            [
                "39c1eb8bd37c9e64"
            ]
        ]
    },
    {
        "id": "2d70b7bf78bfc9f4",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "UPDATE ihm",
        "query": "UPDATE public.ihm\nSET paired_signalyzer = '{{msg.payload.hw_version_id}}',\n    updated_at = current_timestamp,\n    is_paired = true\nWHERE id = '{{msg.payload.ihm_to_pair}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1190,
        "y": 560,
        "wires": [
            []
        ],
        "info": "Atualiza a ihm ta bela ihm e insere o id do sinalizador que pareou com ele, e seta a flag \r\nis_paired para true"
    },
    {
        "id": "be335deca55c3d9b",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "function 27",
        "func": "var equipement_version = flow.get(\"equipement_version\")\n\nequipement_version.hw_version_id = msg.payload[0].id\n\nequipement_version.ihm_to_pair = msg.payload[0].paired_ihm_id\n\nmsg = {}\nmsg.payload = equipement_version\nflow.set(\"equipement_version\", equipement_version)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "2d70b7bf78bfc9f4",
                "641b44acaac13d06"
            ]
        ]
    },
    {
        "id": "e6fbee5ee9011a28",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "3c9b5419b4bd45f1",
            "ae55c09bfb767c69"
        ],
        "x": 1395,
        "y": 500,
        "wires": []
    },
    {
        "id": "3c9b5419b4bd45f1",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "link in 5",
        "links": [
            "e6fbee5ee9011a28",
            "a8c0faa715eb8cd8",
            "af59f655dbcef04a"
        ],
        "x": 1605,
        "y": 420,
        "wires": [
            [
                "5c62a30cd09e7391"
            ]
        ]
    },
    {
        "id": "5c62a30cd09e7391",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\n",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1800,
        "y": 420,
        "wires": [
            [
                "c9577ad005bab3b2"
            ]
        ],
        "info": "Seleciona toda a tabela equipamentos"
    },
    {
        "id": "216d7a8444752629",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1670,
        "y": 360,
        "wires": [
            [
                "5c62a30cd09e7391"
            ]
        ]
    },
    {
        "id": "c9577ad005bab3b2",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "464c9e9c201f923a",
        "name": "function 28",
        "func": "var table_obj = msg.payload\n\nfunction dateTime_correction(old_date_time) {\n    var date_time = new Date(old_date_time)\n    var full_date = date_time.toLocaleString('pt-BR', {\n        timeZone: 'America/Sao_Paulo',\n    })\n    return full_date\n}\n\nfor (var i = 0; i < table_obj.length; i++){\n    table_obj[i].created_at = dateTime_correction(table_obj[i].created_at)\n    table_obj[i].updated_at = dateTime_correction(table_obj[i].updated_at)\n}\n\nmsg = {}\nmsg.payload = table_obj\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 420,
        "wires": [
            [
                "a5181bf9.a33268",
                "4f46932f.981d7c"
            ]
        ]
    },
    {
        "id": "6ec6859d02da3a5f",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "function 29",
        "func": "var timeline_obj = msg.payload\nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nfunction dateTime_correction(old_date_time) {\n    var date_time = new Date(old_date_time)\n    var full_date = date_time.toLocaleString('pt-BR', {\n        timeZone: 'America/Sao_Paulo',\n    })\n    return full_date\n}\n\nfunction timeStamptoString(timestamp) {\n    var date = new Date(timestamp)\n    var day = date.getDate().toString().padStart(2, '0')\n    var month = (date.getMonth() + 1).toString().padStart(2, '0')\n    var year = date.getFullYear()\n    var hours = (date.getHours() - 3).toString().padStart(2, '0')\n    var minutes = date.getMinutes().toString().padStart(2, '0')\n    var seconds = date.getSeconds().toString().padStart(2, '0')\n    return year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + minutes + \":\" + seconds + \"-03:00\"\n}\n\nfunction getdataArr(mac_address) {\n    var arr = []\n    var y = 0\n    for (var x = 0; x < timeline_obj.length; x++) {\n        if (timeline_obj[x].mac_address == mac_address) {   //achou evento do sinalizador especificado\n            arr[y] = {\n                timeRange: [\n                    timeStamptoString(timeline_obj[x].created_at),\n                    timeline_obj[x].ended_at\n                ],\n                val: timeline_obj[x].color_status\n            }\n            ++y;\n        }\n    }\n    return arr\n}\n\nfunction insertColorValue(color_status){\n    switch(color_status){\n        case \"green\":\n            return color_values.green\n            break\n        case \"red\":\n            return color_values.red\n            break\n        case \"yellow\":\n            return color_values.yellow\n            break\n        case \"blue\":\n            return color_values.blue\n            break\n        case \"gray\":\n            return color_values.gray\n            break\n    }\n}\n\nfunction removeDuplicatesBy(keyFn, array) {\n    var mySet = new Set();\n    return array.filter(function (x) {\n        var key = keyFn(x), isNew = !mySet.has(key);\n        if (isNew) mySet.add(key);\n        return isNew;\n    });\n}\n\n//ordena a array de objetos em ordem alfabetica do atributo mac_address\nfunction compare(a, b) {\n    if (a.mac_address < b.mac_address) {\n        return -1;\n    }\n    if (a.mac_address > b.mac_address) {\n        return 1;\n    }\n    return 0;\n}\n\ntimeline_obj.sort(compare);\n\nvar time_date_now = new Date()\n//time_date_now = dateTime_correction(time_date_now)\n\nvar mac_full_list = []  //lista de todos os macs de todos os logs (com repeticao)\nfor(var x=0; x<timeline_obj.length; x++){\n    mac_full_list[x] = {\n        name: timeline_obj[x].name,\n        mac_address: timeline_obj[x].mac_address\n    }\n    \n    timeline_obj[x].color_status = insertColorValue(timeline_obj[x].color_status)\n\n    if (x == timeline_obj.length - 1) {\n        timeline_obj[x].ended_at = timeStamptoString(time_date_now)\n        break\n    }\n    else if(timeline_obj[x].mac_address == timeline_obj[x+1].mac_address){\n        timeline_obj[x].ended_at = timeStamptoString(timeline_obj[x+1].created_at)\n    }\n    else if (timeline_obj[x].mac_address != timeline_obj[x + 1].mac_address){\n        timeline_obj[x].ended_at = timeStamptoString(time_date_now)\n    }\n\n    \n\n}\n\n//lista com os mac address sem repeticao\nvar mac_list = removeDuplicatesBy(x => x.mac_address, mac_full_list)\n\nvar dataItems = new Array(mac_list.length)\n\nfor (var i = 0; i < mac_list.length; i++) {  //varre o vetor sinalizadores\n    dataItems[i] = {\n        group: mac_list[i].name,\n        data: [\n            {\n                label: \"\",\n                data: getdataArr(mac_list[i].mac_address)\n            }\n        ]\n    }\n}\n\n/*\nfor (var j = 0; j < dataItems.length; j++) {\n    dataItems[j].data[0].data[dataItems[j].data[0].data.length - 1].timeRange[1] = timeStamptoString(date.getTime())\n}\n*/\n\n\n\nmsg.payload = {}\nmsg.payload.dataItems = dataItems\nmsg.payload.startDateTime = '2022-08-04'\nmsg.payload.endDateTime = '2022-08-09'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 900,
        "wires": [
            [
                "52254f729d148a30",
                "f8f3c7d95d68c214"
            ]
        ]
    },
    {
        "id": "5e58566d2621be86",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "SELECT",
        "query": "SELECT connectivity,\n   log_timestamp,\n   e.mac_address,\n   el.color_status,\n   el.created_at,\n   \"name\"\nfrom public.equipement_logs el \nleft join public.equipement e on el.equipement_id = e.id\n",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1880,
        "y": 900,
        "wires": [
            [
                "6ec6859d02da3a5f"
            ]
        ],
        "info": "Seleciona toda a tabela equipamentos"
    },
    {
        "id": "f42cf29d1c3a96da",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1680,
        "y": 900,
        "wires": [
            [
                "5e58566d2621be86"
            ]
        ]
    },
    {
        "id": "af59f655dbcef04a",
        "type": "link out",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "d1cbaaa80a35f8b6",
            "3c9b5419b4bd45f1"
        ],
        "x": 1035,
        "y": 780,
        "wires": []
    },
    {
        "id": "d1cbaaa80a35f8b6",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "link in 6",
        "links": [
            "af59f655dbcef04a"
        ],
        "x": 1785,
        "y": 940,
        "wires": [
            [
                "5e58566d2621be86"
            ]
        ]
    },
    {
        "id": "52254f729d148a30",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2280,
        "y": 840,
        "wires": []
    },
    {
        "id": "c44212ae80dcdb72",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config date DB",
        "func": "var name_to_show = flow.get(\"name_to_show\")\nvar date_begin = flow.get(\"date_begin\")|| \"\"\nvar date_end = flow.get(\"date_end\")||\"\"\n\ndate_begin = msg.payload.date_begin\ndate_end = msg.payload.date_end\n\nif(date_end == null){   //se nao for passado nenhuma data de fim\n    date_end = new Date() //atribui a data atual como a data final\n    date_end = date_end.toISOString();\n    node.warn(date_end)\n}\n\nmsg.payload = {}\n\nif(date_begin == null){     //se nao for passado nenhuma data de inicio\n    msg.payload.date_begin = date_begin    //mantem a data como null\n    flow.set(\"date_begin\", date_begin)\n}\nelse if(date_begin != null){    //se passou data de inicio - ajusta a data\n    var separator_begin = date_begin.split(\"T\")\n    var time_begin = \"00:00:00\"\n    var new_date_begin = separator_begin[0] + \" \" + time_begin\n    msg.payload.date_begin = new_date_begin\n    flow.set(\"date_begin\", new_date_begin)\n}\n\nvar separator_end = date_end.split(\"T\")\nvar time_end = \"23:59:59\"\nvar new_date_end = separator_end[0] + \" \" + time_end\nmsg.payload.date_end = new_date_end\n\nflow.set(\"date_begin\", new_date_begin)\nflow.set(\"date_end\", new_date_end)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2160,
        "wires": [
            [
                "bc2f7a13ddee397c"
            ]
        ]
    },
    {
        "id": "fd6c346609ab6932",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Att variavel DB",
        "func": "/*\nvar id_to_show = flow.get(\"id_to_show\", \"bank1\") || \" \"\nvar equipment_list = flow.get(\"equipment_list\")\n\nvar name_to_show = msg.payload\n\nfor (var i = 0; i < equipment_list.length; i++) {\n    if (equipment_list[i].name == name_to_show) {\n        id_to_show = equipment_list[i].id\n    }\n}\n*/\n\nvar name_to_show = flow.get(\"name_to_show\")||\" \"\nname_to_show = msg.payload\n\nflow.set(\"name_to_show\", name_to_show)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "cea07abdeea8ec7b",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "SELECT",
        "query": "SELECT name, id, type_equipment from public.equipement ",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1800,
        "y": 1900,
        "wires": [
            [
                "d51c4a74d2098eac"
            ]
        ],
        "info": "Seleciona todos os dados referentes ao sinalizador escolhido"
    },
    {
        "id": "d51c4a74d2098eac",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Select Client DB",
        "func": "var equipment_list = flow.get(\"equipment_list\")||[]\nequipment_list = msg.payload\n\n\nvar name_arr = []\nfunction removeDuplicatesBy(keyFn, array) {\n    var mySet = new Set();\n    return array.filter(function (x) {\n        var key = keyFn(x), isNew = !mySet.has(key);\n        if (isNew) mySet.add(key);\n        return isNew;\n    });\n}\n\n//lista com os mac address sem repeticao\nvar equipment_list_withoutDuplicate = removeDuplicatesBy(x => x.name, equipment_list)\n\nfor (var i = 0; i < equipment_list_withoutDuplicate.length; i++){\n    name_arr[i] = equipment_list_withoutDuplicate[i].name\n}\n\nname_arr = name_arr.sort()\n\n\nflow.set(\"equipment_list\", equipment_list_withoutDuplicate)\n\nmsg = {}\nmsg.options = name_arr\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1900,
        "wires": [
            [
                "a8f298c5.155fd8"
            ]
        ]
    },
    {
        "id": "9f16231c1c007635",
        "type": "inject",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1640,
        "y": 1900,
        "wires": [
            [
                "cea07abdeea8ec7b"
            ]
        ]
    },
    {
        "id": "910652968b0de9f7",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "info": "Selecionar o equipamento (signalyzer) correspondente à ihm que\nenviou o comando. ",
        "x": 540,
        "y": 740,
        "wires": []
    },
    {
        "id": "ccf8d98bf109be1e",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Adjust Date Format",
        "func": "var dateTime_begin = msg.payload.date_begin //2022-08-04 00:00:00\nvar dateTime_end = msg.payload.date_end\n\nvar sep1_begin = dateTime_begin.split(\" \")\nvar sep1_end = dateTime_end.split(\" \")\n\nvar date_begin = sep1_begin[0]  //2022-08-04\nvar date_end = sep1_end[0]     \n\nvar separator_begin = date_begin.split(\"-\")\nvar separator_end = date_end.split(\"-\")\n\nvar day_begin = separator_begin[2]      //04\nvar month_begin = separator_begin[1]    //08\nvar year_begin = separator_begin[0]     //2022\n\nvar day_end = separator_end[2]\nvar month_end = separator_end[1]\nvar year_end = separator_end[0]\n\nvar new_date_begin = day_begin+\"/\"+month_begin+\"/\"+year_begin\nvar new_date_end = day_end+\"/\"+month_end+\"/\"+year_end\n\nmsg.payload.begin = new_date_begin\nmsg.payload.end = new_date_end\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 2200,
        "wires": [
            [
                "db542acc44f8718d"
            ]
        ]
    },
    {
        "id": "33f516155378c60c",
        "type": "comment",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "",
        "info": "inserir esse evento de perda de conexão no log - DONE\n\n\nREGRA MASTER: Se um dos dois equipamentos (IHM ou Torre) perder conexão, ambos ficam como\nstatus gray\n\nSe quem perdeu conexão, for:\n- Torre:\n    - Atualiza o equipamento no banco\n    - Conectividade = false\n    - Color_status = gray\n    - Avisar a ihm correspondente\n- IHM\n    - Atualzia o equipamento no banco\n    - Conectividade = false\n    - Color_status = gray\n    - Avisar a torre correspondente",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "417473bf8f2d8a69",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "822c3780a45a9041",
        "name": "Config for graph DB",
        "func": "var data_base_arr = msg.payload \nvar color_values = flow.get(\"color_values\", \"bank1\")\n\nvar t_total = flow.get(\"t_total\") || 0\nvar t_green = flow.get(\"t_green\") || 0\nvar t_red = flow.get(\"t_red\") || 0\nvar t_yellow = flow.get(\"t_yellow\") || 0\nvar t_blue = flow.get(\"t_blue\") || 0\nvar t_gray = flow.get(\"t_gray\") || 0\n\nt_total = 0\nt_green = 0\nt_red = 0\nt_yellow = 0\nt_blue = 0\nt_gray = 0\n\nfunction calculateTime(color_status, t_init, t_end){\n    if (color_status == \"green\") {\n        t_green = t_green + (t_end - t_init)\n    }\n    else if (color_status == \"red\") {\n        t_red = t_red + (t_end - t_init)\n    }\n    else if (color_status == \"yellow\") {\n        t_yellow = t_yellow + (t_end - t_init)\n    }\n    else if (color_status == \"blue\") {\n        t_blue = t_blue + (t_end - t_init)\n    }\n    else if (color_status == \"gray\") {\n        t_gray = t_gray + (t_end - t_init)\n    }\n}\n\n\nfor(var i=0; i<data_base_arr.length; i++){\n    var color_status = msg.payload[i].color_status\n\n    var date_time_init = new Date(msg.payload[i].created_at)    //transforma em um objeto Date\n    var date_time_init_ms = date_time_init.getTime()  //pega o valor em milisegundos\n\n    var date_time_end\n    var date_time_end_ms\n\n    if (i == data_base_arr.length - 1) {  //ultimo da array\n        date_time_end = new Date()          //pega o date time atual\n        date_time_end_ms = date_time_end.getTime()\n    }\n    else{\n        date_time_end = new Date(msg.payload[i + 1].created_at)\n        date_time_end_ms = date_time_end.getTime()\n    }\n    calculateTime(color_status, date_time_init_ms, date_time_end_ms)\n    \n}\n\nvar t_total = t_green + t_red + t_yellow + t_blue + t_gray\n\nvar per_green = (t_green / t_total) * 100\nvar per_red = (t_red / t_total) * 100\nvar per_yellow = (t_yellow / t_total) * 100\nvar per_blue = (t_blue / t_total) * 100\nvar per_gray = (t_gray / t_total) * 100\n\nper_green = per_green.toFixed(2)\nper_red = per_red.toFixed(2)\nper_yellow = per_yellow.toFixed(2)\nper_blue = per_blue.toFixed(2)\nper_gray = per_gray.toFixed(2)\n\n\nflow.set(\"t_total\", t_total)\nflow.set(\"t_green\", t_green)\nflow.set(\"t_red\", t_red)\nflow.set(\"t_yellow\", t_yellow)\nflow.set(\"t_blue\", t_blue)\nflow.set(\"t_gray\", t_gray)\n\n\nmsg.topic = msg.payload[0].name + \"(%)\"\n// make it part of the outgoing msg object\nmsg.payload = [{\n    \"series\": [\"Tempo\"],\n    \"data\": [[per_green, per_red, per_yellow, per_blue, per_gray]],\n    //\"labels\": [\"\", \"\", \"\", \"\", \"\"]\n    \"labels\": [color_values.green, color_values.red, color_values.yellow, color_values.blue, color_values.gray]\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 2440,
        "wires": [
            [
                "98723328.bd031",
                "66796c150b33f719"
            ]
        ]
    },
    {
        "id": "f3de6f1501163f3f",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "link in 7",
        "links": [
            "597484fd.12ea8c",
            "8652110a.c6eb1",
            "aed4dae.7383728",
            "b3be575c.62e288"
        ],
        "x": 275,
        "y": 440,
        "wires": [
            [
                "d348875d72c343bc"
            ]
        ]
    },
    {
        "id": "6dd659648d5eedf5",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "7321907a.ee288",
        "name": "link in 8",
        "links": [
            "e5650ec4.06045",
            "58fd4b6c.f12524",
            "c66e0af8.25b4f8",
            "69bb37ee.e6b6d8"
        ],
        "x": 275,
        "y": 820,
        "wires": [
            [
                "490b47c687aab3d7"
            ]
        ]
    },
    {
        "id": "f8f3c7d95d68c214",
        "type": "template",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "make msg.payload.settings",
        "field": "payload.settings",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"xAxis\":{\n        \"xTickFormat\": \"HH\",\n        \"startDateTime\": \"{{payload.startDateTime}}\",\n        \"endDateTime\": \"{{payload.endDateTime}}\",\n        \"labelsFontSize\": 16,\n        \"labelsColor\": \"#000000\"\n    },\n    \"yAxis\": {\n        \"labelsFontSize\": 16,\n        \"labelsColor\": \"#aaaaaa\"\n    },\n    \"tooltips\": {\n        \"timeFormat\": \"%H:%M:%S\",\n        \"segmentTooltipContent\": \"\"\n    },\n    \"resetZoom\": {\n        \"labelFontSize\": 32,\n        \"labelColor\": \"#000000\"\n    },\n    \"chart\": {\n        \"topMargin\": 60,\n        \"height\": 20,\n        \"lineColors\": [\n          { \"statusColor\": \"#2cb805\", \"statusValue\": \"Em operação\" },\n          { \"statusColor\": \"#fa1515\", \"statusValue\": \"Parada não programada\" },\n          { \"statusColor\": \"#ffd91a\", \"statusValue\": \"Setup\" },\n          { \"statusColor\": \"#3744fb\", \"statusValue\": \"Parada programada\" },\n          { \"statusColor\": \"#8a8a8a\", \"statusValue\": \"Offline\" }\n        ]\n    },\n    \"options\": {\n        \"enableAnimations\": true,\n        \"enableDateMarker\": true\n    }\n}",
        "output": "json",
        "x": 2200,
        "y": 960,
        "wires": [
            [
                "fb2ce33434415ee8"
            ]
        ]
    },
    {
        "id": "2612b81d1d540a0a",
        "type": "debug",
        "z": "986afd82ee909974",
        "g": "874d38f878083d50",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 800,
        "wires": []
    },
    {
        "id": "1efae357e679c6f0",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "Config date DB",
        "func": "var name_to_show = flow.get(\"name_to_show\")\nvar date_begin = flow.get(\"date_begin\")|| \"\"\nvar date_end = flow.get(\"date_end\")||\"\"\n\ndate_begin = msg.payload.date_begin\ndate_end = msg.payload.date_end\n\nif(date_end == null){   //se nao for passado nenhuma data de fim\n    date_end = new Date() //atribui a data atual como a data final\n    date_end = date_end.toISOString();\n    node.warn(date_end)\n}\n\nmsg.payload = {}\n\nif(date_begin == null){     //se nao for passado nenhuma data de inicio\n    msg.payload.date_begin = date_begin    //mantem a data como null\n    flow.set(\"date_begin\", date_begin)\n}\nelse if(date_begin != null){    //se passou data de inicio - ajusta a data\n    var separator_begin = date_begin.split(\"T\")\n    var time_begin = \"00:00:00\"\n    var new_date_begin = separator_begin[0] + \" \" + time_begin\n    msg.payload.date_begin = new_date_begin\n    flow.set(\"date_begin\", new_date_begin)\n}\n\nvar separator_end = date_end.split(\"T\")\nvar time_end = \"23:59:59\"\nvar new_date_end = separator_end[0] + \" \" + time_end\nmsg.payload.date_end = new_date_end\n\nflow.set(\"date_begin\", new_date_begin)\nflow.set(\"date_end\", new_date_end)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "4b3884529a9ae4e3",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "3717a59d168d826b",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\nWHERE name = '{{msg.payload.name}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2060,
        "y": 1240,
        "wires": [
            []
        ],
        "info": "Seleciona o equipamento passando o nome selecionado pelo usuario"
    },
    {
        "id": "d1d671813ee10f73",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "SELECT",
        "query": "SELECT name from public.equipement ",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1790,
        "y": 3000,
        "wires": [
            [
                "3b5c09028095631f"
            ]
        ],
        "info": "Seleciona todos os dados referentes ao sinalizador escolhido"
    },
    {
        "id": "ae55c09bfb767c69",
        "type": "link in",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "link in 9",
        "links": [
            "e6fbee5ee9011a28",
            "34540a23.ec7106",
            "f57884c1.34b248"
        ],
        "x": 1675,
        "y": 3000,
        "wires": [
            [
                "d1d671813ee10f73"
            ]
        ]
    },
    {
        "id": "3b5c09028095631f",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 30",
        "func": "var equipment_list = flow.get(\"equipment_list\") || []\nequipment_list = msg.payload\n\n\nvar name_arr = []\nfunction removeDuplicatesBy(keyFn, array) {\n    var mySet = new Set();\n    return array.filter(function (x) {\n        var key = keyFn(x), isNew = !mySet.has(key);\n        if (isNew) mySet.add(key);\n        return isNew;\n    });\n}\n\n//lista com os mac address sem repeticao\nvar equipment_list_withoutDuplicate = removeDuplicatesBy(x => x.name, equipment_list)\n\nfor (var i = 0; i < equipment_list_withoutDuplicate.length; i++) {\n    name_arr[i] = equipment_list_withoutDuplicate[i].name\n}\n\nname_arr = name_arr.sort()\n\n\nflow.set(\"equipment_list\", equipment_list_withoutDuplicate)\n\nmsg = {}\nmsg.options = name_arr\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 3000,
        "wires": [
            [
                "af4bf9c8.041158",
                "0ee165efa3e9a6e7",
                "e239bb66.dce908"
            ]
        ]
    },
    {
        "id": "452c258c30530535",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att Variavel para excluir DB",
        "func": "var name_to_delete = flow.get(\"name_to_delete\")||\" \"\n\nname_to_delete = msg.payload    //reccebe o nome do sinalizador para excluir\n\nflow.set(\"name_to_delete\", name_to_delete)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//var id_para_excluir = \" \"\n//flow.set(\"id_para_excluir\", id_para_excluir, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 2980,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel \"id_para_excluir\", indicando qual o sinalizador que foi selecionado no Drop Down menu para ser excluído."
    },
    {
        "id": "edede61c0d770ffe",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att variavel para mudar DB",
        "func": "var name_to_change = flow.get(\"name_to_change\")||\" \"\n\nname_to_change = msg.payload\n\nflow.set(\"name_to_change\", name_to_change)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//var id_para_mudar = \" \"0\n//flow.set(\"id_para_mudar\", id_para_mudar, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 3100,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel \"id_para_mudar\", indicando qual o sinalizador que foi selecionado no Drop Down menu para ser renomeado."
    },
    {
        "id": "ca259a3b864d8270",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "SELECT",
        "query": "SELECT * FROM public.equipement\nWHERE name = '{{msg.payload}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2280,
        "y": 3180,
        "wires": [
            [
                "06a1756c3d8d1903"
            ]
        ],
        "info": "Verifica se existe um equipamento com esse mac address no banco"
    },
    {
        "id": "06a1756c3d8d1903",
        "type": "switch",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "EXIST?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2420,
        "y": 3180,
        "wires": [
            [
                "684c82a2f6eb0abe"
            ],
            [
                "1da51a3734e49495"
            ]
        ]
    },
    {
        "id": "684c82a2f6eb0abe",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 31",
        "func": "var name_can_change = flow.get(\"name_can_change\")\nname_can_change = false\n\nflow.set(\"name_can_change\", name_can_change)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "1da51a3734e49495",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 32",
        "func": "var name_can_change = flow.get(\"name_can_change\")\nname_can_change = true\n\nflow.set(\"name_can_change\", name_can_change)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "a7cfe588245ed7f5",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "Att new name DB",
        "func": "var name_to_change = flow.get(\"name_to_change\")\nvar new_name = flow.get(\"new_name\")\n\nmsg.payload = {}\n\nmsg.payload.name_to_change = name_to_change\nmsg.payload.new_name = new_name\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 3360,
        "wires": [
            [
                "fdd13a46e185c8eb"
            ]
        ]
    },
    {
        "id": "5e07e23a0370662e",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 33",
        "func": "var new_name = flow.get(\"new_name\")\nnew_name = msg.payload\n\nflow.set(\"new_name\", new_name)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 3180,
        "wires": [
            [
                "ca259a3b864d8270"
            ]
        ]
    },
    {
        "id": "fdd13a46e185c8eb",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "UPDATE ",
        "query": "UPDATE public.equipement\nSET name = '{{msg.payload.new_name}}'\nWHERE name = '{{msg.payload.name_to_change}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2500,
        "y": 3360,
        "wires": [
            [
                "ca1e2b57.702fc8"
            ]
        ],
        "info": "Atualiza o sinalizador na tabela equipement.\r\nAtualiza color_status, connectivity_status e update_at"
    },
    {
        "id": "ecf796734a073562",
        "type": "function",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "function 34",
        "func": "var name_to_delete = flow.get(\"name_to_delete\")\n\nmsg.payload = name_to_delete\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 3540,
        "wires": [
            [
                "a978bf1dc6a72f5e"
            ]
        ]
    },
    {
        "id": "a978bf1dc6a72f5e",
        "type": "postgresql",
        "z": "986afd82ee909974",
        "g": "352edda8f59a3cab",
        "name": "DELETE",
        "query": "DELETE FROM public.equipement\nWHERE name = '{{msg.payload}}'",
        "postgreSQLConfig": "270590d0.3af0a",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2500,
        "y": 3540,
        "wires": [
            [
                "34540a23.ec7106"
            ]
        ],
        "info": "Deleta linha da tabela\r\n\r\n"
    },
    {
        "id": "688cddae.069644",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AD100-ON",
        "payloadType": "str",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "a5e4f5fb.092328"
            ]
        ]
    },
    {
        "id": "334f60ea.719ce",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AD100-OFF",
        "payloadType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "a12e8cb7.19b8d"
            ]
        ]
    },
    {
        "id": "e123f175.df9fc",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AE100-ON",
        "payloadType": "str",
        "x": 100,
        "y": 500,
        "wires": [
            [
                "b1239d6c.22a93"
            ]
        ]
    },
    {
        "id": "3ac435d2.16d64a",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AE100-OFF",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "27e40270.aa532e"
            ]
        ]
    },
    {
        "id": "d457896b.44daf8",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "5b1f1502.96599c"
            ]
        ]
    },
    {
        "id": "1a42312a.fb936f",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1600,
        "y": 320,
        "wires": [
            [
                "5b1f1502.96599c"
            ]
        ]
    },
    {
        "id": "85a89306.c989",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Att variavel",
        "func": "var cliente_parada_table = flow.get(\"cliente_parada_table\", \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].nome == msg.payload){\n        cliente_parada_table = allClients[i].clientID\n    }\n}\n\n//cliente_parada_table = msg.payload\n\nflow.set(\"cliente_parada_table\",cliente_parada_table, \"bank1\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar cliente_parada_table = \" \"\nflow.set(\"cliente_parada_table\",cliente_parada_table, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 640,
        "wires": [
            []
        ],
        "info": "Atualiza a variavel do sinalizador selecionado no dropdown menu"
    },
    {
        "id": "eebcdd8c.33fc5",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Sel Tabela Resumo",
        "func": "var sinalizador\nvar cliente_parada_table = flow.get(\"cliente_parada_table\", \"bank1\")\nvar resumo_injetora = flow.get(\"resumo_injetora\", \"bank1\")\nvar parada_log = flow.get(\"parada_log\", \"bank1\")\nvar clientes = flow.get(\"allClients\", \"bank1\")\nvar position = 0\n\nvar tabela_individual = []\nvar x = 0\n\nfor(var j=0; j<resumo_injetora.length; j++){\n    if(resumo_injetora[j].clientID == cliente_parada_table){\n        tabela_individual[x] = resumo_injetora[j]\n        x++\n    }\n}\n\n\n/*\nfor(var i=0; i<clientes.length; i++){\n    if(cliente_parada_table == clientes[i].nome){\n        position = i\n    }\n}\n\nsinalizador = parada_log[position]\n*/\n\nmsg = {};\nmsg.payload = tabela_individual\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "bdf99e02.7bca",
                "3bdae01.273ac2"
            ]
        ]
    },
    {
        "id": "a5bf5388.f4073",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Seleciona Grafico",
        "func": "var sinalizador\nvar cliente_parada_table = flow.get(\"cliente_parada_table\", \"bank1\")\nvar clientes = flow.get(\"allClients\", \"bank1\")\nvar position = 0\n\nfor(var i=0; i<clientes.length; i++){\n    if(cliente_parada_table == clientes[i].clientID){\n        position = i\n    }\n}\n\nsinalizador = clientes[position]\n\nmsg = {};\nmsg.payload = sinalizador\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "f52a86e3.18db58"
            ]
        ]
    },
    {
        "id": "de2da5e9.dd4fa8",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Dropdown Menu",
        "info": "Utilizado para selecionar o sinalizador que deseja verificar a tabela de paradas e o grafico de pizza.\n\n1) Select Sinalizador\n    Nesse nó estão cadastrados as opções possiveis.\n    Para cada sinalizador novo, deve-se cadastrar uma nova opção neste nó\n    \n2) Função Att variável\n    Com a seleção no dropdown menu, esta função vai atualizar uma variavel flow.\n    Esta variavel é responsavel por indicar qual sinalizador foi selecionado.\n    \n3)ENTER\n    Botão criado para fazer um inject após o usuário selecionar o sinalizador no dropdown menu.\n    Este inject entra na função Sel Tabela Parada, que a partir da variavel flow setada no nó \"Att varivavel\", pega o veto de objetos do sinalizador escolhido.\n    Este vetor de objetos é gerado nas estruturas \"Tabela Paradas\".\n    Retorna então este vetor de objetos para o nó da tabela de paradas\n    \n4) Refresh\n    Botão que atualiza a tabela e o grafico ques estão sendo mostrados na dashboard",
        "x": 380,
        "y": 600,
        "wires": []
    },
    {
        "id": "f56c299e.b53ca8",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "LOG Paradas",
        "info": "LOG com intuito de apresentar apenas os eventos de paradas, seja ela programada, ou não programada.",
        "x": 1530,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ef9373fd.e79c4",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "Somente paradas",
        "property": "payload.status_atual",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Fora de operação",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1940,
        "y": 1160,
        "wires": [
            [
                "39545869.b6d418",
                "b68299e.2c51768"
            ]
        ],
        "info": "Filtro para passar apenas quando for alguma parada"
    },
    {
        "id": "889d3325.3c2ad",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "not update",
        "property": "payload.update",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "nao",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1200,
        "wires": [
            []
        ],
        "info": "Para evitar de passar quando for um evento de \"update\""
    },
    {
        "id": "85b179c5.f863f8",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar torres = msg.payload\n\nmsg = {};\nmsg.payload = torres[pos_atual]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1160,
        "wires": [
            [
                "ef9373fd.e79c4"
            ]
        ]
    },
    {
        "id": "39545869.b6d418",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Config Log Paradas",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar dashboardLog = flow.get('dashboardLog', \"bank1\")|| [];\n\ndashboardLog.push(msg.payload);\nif (dashboardLog.length > 1000){\n    // Delete oldest message if > 20\n    dashboardLog.shift();\n    dashboardLog.length = 1000;\n} \n\n// store the value back\nflow.set('dashboardLog',dashboardLog, \"bank1\");\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = dashboardLog;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1140,
        "wires": [
            [
                "e414c53f.280878"
            ]
        ],
        "info": "Gera a array de objetos para então passar para o próximo nó"
    },
    {
        "id": "bdf99e02.7bca",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "f6160f3e.3cad9"
        ],
        "x": 695,
        "y": 700,
        "wires": []
    },
    {
        "id": "f52a86e3.18db58",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "OUT_PIE_CHART",
        "links": [
            "ea8aea5e.445b08"
        ],
        "x": 695,
        "y": 740,
        "wires": []
    },
    {
        "id": "51e6a233.19565c",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AG100-ON",
        "payloadType": "str",
        "x": 100,
        "y": 660,
        "wires": [
            [
                "a8fd4e66.8069b"
            ]
        ]
    },
    {
        "id": "8978d65b.dfc918",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AG100-OFF",
        "payloadType": "str",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "235d9270.376a7e"
            ]
        ]
    },
    {
        "id": "aeabda5.de60828",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AF100-ON",
        "payloadType": "str",
        "x": 100,
        "y": 580,
        "wires": [
            [
                "bc0db255.d8bec"
            ]
        ]
    },
    {
        "id": "6a4775d4.40784c",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AF100-OFF",
        "payloadType": "str",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "bc3dc86f.7e65a8"
            ]
        ]
    },
    {
        "id": "6658e20e.83db7c",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Select Clients",
        "func": "var clientes = flow.get(\"allClients\", \"bank1\")\nvar i\nvar client_array = []\n\nfor(i=0; i<clientes.length; i++){\n    client_array[i] = clientes[i].nome\n}\n\nmsg = {};\nmsg.options = client_array\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 640,
        "wires": [
            [
                "1ccd39a6.950096"
            ]
        ],
        "info": "Cria uma array de todos os sinalizadores cadastrados.\nE passa essa array para as opções do Dropdown Menu."
    },
    {
        "id": "23a47a60.5432a6",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "IN_Select_Sinalizador",
        "links": [
            "d0ff24c2.1aa818",
            "760b19a7.5dcf28",
            "8f0965f8.c68668",
            "1384d1b0.f3483e",
            "c375ec64.ad0b4"
        ],
        "x": 315,
        "y": 640,
        "wires": [
            [
                "6658e20e.83db7c"
            ]
        ]
    },
    {
        "id": "7e9f8f76.10d56",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 560,
        "wires": [
            [
                "e7fc2d44.19339"
            ]
        ]
    },
    {
        "id": "1790d51e.cee62b",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1620,
        "y": 600,
        "wires": [
            [
                "e7fc2d44.19339"
            ]
        ]
    },
    {
        "id": "f6160f3e.3cad9",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "IN_Tabela_Paradas",
        "links": [
            "bdf99e02.7bca"
        ],
        "x": 1475,
        "y": 580,
        "wires": [
            [
                "7e9f8f76.10d56",
                "1790d51e.cee62b"
            ]
        ]
    },
    {
        "id": "f774862d.ece558",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Resumo Sinalizador",
        "info": "Tabela criada para mostrar todos os eventos de cada sinalizador\n\nDados da tabela:\n- Status atual\n- Hora em que foi atualizado para este status\n- \n\nEssa tabela mostra os dados de apenas um sinalizador, que é selecionado no Dropdown Menu",
        "x": 1550,
        "y": 520,
        "wires": []
    },
    {
        "id": "76a176ad.320548",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "IN_Tabela_Geral",
        "links": [
            "84be5184.1343b",
            "75f385c6.1ca90c",
            "1384d1b0.f3483e",
            "8f0965f8.c68668",
            "c375ec64.ad0b4",
            "a3f97681.c0fe48",
            "461ca6c2.938898"
        ],
        "x": 1475,
        "y": 320,
        "wires": [
            [
                "d457896b.44daf8",
                "1a42312a.fb936f"
            ]
        ]
    },
    {
        "id": "349db12c.45ab8e",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "84be5184.1343b",
            "1384d1b0.f3483e"
        ],
        "x": 1475,
        "y": 1160,
        "wires": [
            [
                "85b179c5.f863f8"
            ]
        ]
    },
    {
        "id": "c6bc1534.a85408",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Conf gráfico",
        "func": "\n\nvar t_on = msg.payload.time_ON\nvar t_off = msg.payload.time_OFF\n\nvar t_total = t_on + t_off\n\nvar per_on = (t_on/t_total)*100\nvar per_off = (t_off/t_total)*100\n\n\nper_on = per_on.toFixed(2)\nper_off = per_off.toFixed(2)\n\nmsg.topic = msg.payload.nome+\"(%)\"\n// make it part of the outgoing msg object\nmsg.payload=[{\n    \"series\": [\"Tempo\"],\n    \"data\": [ [per_on,per_off,] ],\n    \"labels\": [\"Em operação\", \"Fora de operação\"]\n}];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 820,
        "wires": [
            [
                "68160254.edb37c"
            ]
        ],
        "info": "Recebe o objeto do sinalizador em questão e acessa os valores dos tempos de cada status.\nCom isso, faz as contas para definir a porcentagem de cada tempo em relação ao tempo total já decorrido.\n\nPassa essas informações de porcentagem para o nó do gráfico"
    },
    {
        "id": "321ef5c.143cc0a",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Pie Chart",
        "info": "Configurações para os gráficos pizzas.\n\nDados: Porcentagem dos tempos de cada status.",
        "x": 1520,
        "y": 780,
        "wires": []
    },
    {
        "id": "ea8aea5e.445b08",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "IN_Grafico_Pizza",
        "links": [
            "f52a86e3.18db58",
            "c375ec64.ad0b4"
        ],
        "x": 1475,
        "y": 820,
        "wires": [
            [
                "c6bc1534.a85408"
            ]
        ]
    },
    {
        "id": "2d5ecb8a.be15f4",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Tabela Geral",
        "info": "",
        "x": 1530,
        "y": 240,
        "wires": []
    },
    {
        "id": "fc395e77.ddff2",
        "type": "mqtt in",
        "z": "b79a169e.a116d8",
        "name": "",
        "topic": "esp32/injetora",
        "qos": "2",
        "datatype": "auto",
        "broker": "72296687.029568",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 300,
        "wires": [
            [
                "2fe57c1c.362a74",
                "ab6db771.60b268"
            ]
        ]
    },
    {
        "id": "c61e2c2f.2d848",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "MQTT_IN",
        "info": "",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8dcb926.4ecff8",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Config msg - csv",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar newPayload = {};\n\nvar data = new Date();\nvar yyyy = data.getFullYear();\nvar mm = data.getMonth() < 9 ? \"0\" + (data.getMonth() + 1) : (data.getMonth() + 1); // getMonth() is zero-based\nvar dd  = data.getDate() < 10 ? \"0\" + data.getDate() : data.getDate();\nvar hh = data.getHours() < 10 ? \"0\" + data.getHours() : data.getHours();\nvar mmm  = data.getMinutes() < 10 ? \"0\" + data.getMinutes() : data.getMinutes();\n\n\nnewPayload.Cliente = msg.payload[pos_atual].clientID;\nnewPayload.Nome = msg.payload[pos_atual].nome;\nnewPayload.Status = msg.payload[pos_atual].status_atual;\nnewPayload.Data = msg.payload[pos_atual].data;\nnewPayload.Tempo_Verde = msg.payload[pos_atual].time_ON_string;\nnewPayload.Tempo_Vermelho = msg.payload[pos_atual].time_OFF_string;\n\nnewPayload.Horario = msg.payload[pos_atual].time_change_string\nnewPayload.Count_stop = msg.payload[pos_atual].countOFF\n\n// Generate out file name pattern\nmsg.fname = \"Injetora\"+newPayload.Cliente+\"-\"+ dd + mm + yyyy + \".csv\";\n// Full filename with path for the file node later\nmsg.filename = \"/home/pi/Documents/datalog/Smart/\"+ msg.fname;\n\n// We save the current payload into a different place on the msg object\nmsg.filecontent = newPayload;\n\n// We are passing the file name search pattern to fs node to tell us if the file exists or not\nmsg.payload = {\"pattern\":msg.fname};\n\nnode.status({fill:\"blue\",shape:\"ring\",text:msg.fname});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 940,
        "wires": [
            [
                "5182e27f.2efd8c"
            ]
        ],
        "info": "Configuração da mensagem do arquivo .csv que irá ser gerado.\n\nSeta o caminho da pasta onde o arquivo deve ser salvo."
    },
    {
        "id": "1e3ed5cf.a3a57a",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "$count(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 1020,
        "wires": [
            [
                "fcba624f.840f9"
            ],
            [
                "177c62b2.69694d"
            ]
        ]
    },
    {
        "id": "177c62b2.69694d",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1760,
        "y": 1040,
        "wires": [
            [
                "cc06098a.bd6e98"
            ]
        ]
    },
    {
        "id": "cc06098a.bd6e98",
        "type": "csv",
        "z": "b79a169e.a116d8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Cliente,Nome,Status,Data,Tempo_Verde,Tempo_Vermelho,Horario,Count_stop",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1910,
        "y": 1040,
        "wires": [
            [
                "45ac7153.7cae",
                "2c0370f4.84c2c"
            ]
        ]
    },
    {
        "id": "fcba624f.840f9",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filecontent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1760,
        "y": 1000,
        "wires": [
            [
                "10774842.860078"
            ]
        ]
    },
    {
        "id": "10774842.860078",
        "type": "csv",
        "z": "b79a169e.a116d8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "Cliente,Nome,Status,Data,Tempo_Verde,Tempo_Vermelho,Horario,Count_stop",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1910,
        "y": 1000,
        "wires": [
            [
                "2c0370f4.84c2c",
                "45ac7153.7cae"
            ]
        ]
    },
    {
        "id": "45ac7153.7cae",
        "type": "file",
        "z": "b79a169e.a116d8",
        "name": "file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2050,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2c0370f4.84c2c",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 1000,
        "wires": []
    },
    {
        "id": "744f0a3c.4c2f74",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "IN_Conf_CSV_VT300",
        "links": [
            "84be5184.1343b",
            "1384d1b0.f3483e"
        ],
        "x": 1475,
        "y": 940,
        "wires": [
            [
                "a8dcb926.4ecff8"
            ]
        ]
    },
    {
        "id": "c643573c.57c038",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "CSV File",
        "info": "Estrutura para gerar o arquivo .csv\n\nestrutura unica para cada sinalizador\n\n",
        "x": 1520,
        "y": 900,
        "wires": []
    },
    {
        "id": "b68299e.2c51768",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Conf msg Telegram",
        "func": "var sinalizador = msg.payload.nome\nvar status = msg.payload.status_atual\nvar horario = msg.payload.time_change_string\n\nvar chatID = flow.get(\"chatID\", \"bank1\")\nnode.warn(chatID)\nvar message = \"Sinalizador: \"+sinalizador+\"\\r\\nStatus: \"+status+\"\\r\\nHorário: \"+horario\n\n//msg.payload = {chatId : -556367846, type : 'message', content : message};\nmsg.payload = {chatId : chatID, type : 'message', content : message};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1180,
        "wires": [
            [
                "7bab79ff.c2a798",
                "9c88eac0.5acda8"
            ]
        ]
    },
    {
        "id": "89a3c029.e160d",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "List Clients ID",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar i\nvar client_array = []\n\nfor(var j=0; j<allClients.length; j++){\n    \n    client_array[j] = allClients[j].nome\n}\n\n\n/*\nfor(i=0; i<torres.length; i++){\n    client_array[i] = torres[i].clientID\n}\n*/\nmsg = {};\nmsg.options = client_array\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 940,
        "wires": [
            [
                "e6bd752d.157ce8"
            ]
        ]
    },
    {
        "id": "92c20ffc.26589",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "d0ff24c2.1aa818",
            "760b19a7.5dcf28",
            "8f0965f8.c68668",
            "1384d1b0.f3483e",
            "911f49fd.e33048",
            "a3f97681.c0fe48"
        ],
        "x": 315,
        "y": 940,
        "wires": [
            [
                "89a3c029.e160d"
            ]
        ]
    },
    {
        "id": "9a7c1d02.a1426",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Renomear Sinalizador",
        "info": "",
        "x": 400,
        "y": 900,
        "wires": []
    },
    {
        "id": "91956732.c54df8",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Att flow variable",
        "func": "var id_para_mudar = flow.get(\"id_para_mudar\", \"bank1\")\n\nid_para_mudar = msg.payload\n\nflow.set(\"id_para_mudar\", id_para_mudar, \"bank1\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar id_para_mudar = \" \"\nflow.set(\"id_para_mudar\", id_para_mudar, \"bank1\")",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "795a1e1c.3ab2f",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Confere novo nome",
        "func": "var new_name = flow.get(\"new_name\")\nnew_name = msg.payload\n//var id_para_mudar = flow.get(\"id_para_mudar\", \"bank1\")\nvar position\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nnode.warn(new_name)\n\nvar name_can_change = flow.get(\"name_can_change\")\nname_can_change = true\n\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].nome == new_name){\n        node.warn(\"Esse nome ja esta sendo utilizado por outro equipamento!\")\n        name_can_change = false\n    }\n}\n\nflow.set(\"new_name\", new_name)\nflow.set(\"name_can_change\", name_can_change)\nmsg = {};\nmsg.payload = name_can_change\n\n/*\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].nome == id_para_mudar){\n        allClients[j].nome = new_name\n    }\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar new_name = \"\"\nflow.set(\"new_name\", new_name)\n\nvar name_can_change = true\nflow.set(\"name_can_change\", name_can_change)",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "a1a2a440.936a88"
            ]
        ]
    },
    {
        "id": "12ac7ef2.33d8d1",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "var chatID = msg.payload.chatId;\n//flow.set(\"chatID\", chatID, \"bank1\");\n\nvar helpMessage = \"/help - Mostra os comandos\";\n\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"/list - lista de Sinalizadores\";\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"/file - arquivo .csv\";\nhelpMessage += \"\\r\\n\"\nhelpMessage += \"\\r\\nYour chat id is: \"+ msg.payload.chatId;\nhelpMessage += \"\\r\\n\"\n\n\n\nmsg.payload.content = helpMessage\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1440,
        "wires": [
            [
                "7bab79ff.c2a798"
            ]
        ]
    },
    {
        "id": "2bde5ef7.72ca72",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Comando Help",
        "info": "Comando /help do telegram\n\nRetorna o chatID da conversa/grupo",
        "x": 1540,
        "y": 1400,
        "wires": []
    },
    {
        "id": "60f43c48.10ab14",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "var chatID = flow.get(\"chatID\", \"bank1\");\n\nvar doc = Buffer.from(msg.payload);\n\nvar fileOptions = {\n    filename : msg.filename,\n    contentType : \"text/csv\"\n}\n\nvar payload = {\n    type: \"document\",\n    chatId: chatID,\n    content: doc,\n    fileOptions : fileOptions\n}\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1440,
        "wires": [
            [
                "7bab79ff.c2a798"
            ]
        ],
        "info": "Prepara o arquivo csv para ser enviado pelo Telegram"
    },
    {
        "id": "8dc97f0b.d1ce",
        "type": "file in",
        "z": "b79a169e.a116d8",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1890,
        "y": 1440,
        "wires": [
            [
                "60f43c48.10ab14"
            ]
        ]
    },
    {
        "id": "e8c3e20c.14ec1",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "create question",
        "func": "var chatID = msg.payload.chatId;\n//flow.set(\"chatID\", chatID, \"bank1\");\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nvar arrInjetoras = []\n\nfor(var i=0; i<allClients.length; i++){\n    arrInjetoras[i] = allClients[i].nome\n}\n\nmsg.payload.type = 'message';\nmsg.payload.content = 'Deseja o arquivo de qual injetora?';\n//msg.payload.options = {reply_to_message_id : msg.payload.messageId}\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    keyboard: [\n      arrInjetoras],\n      'resize_keyboard' : true, \n      'one_time_keyboard' : true\n  })\n};\n\nmsg.payload.options = opts;\n\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1540,
        "wires": [
            [
                "7dada031.d0717"
            ]
        ]
    },
    {
        "id": "bede8057.a233",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Comando File",
        "info": "Comando /file\n\nFunção: enviar o arquivo .csv do sinalizador desejado\n\nDepois de acionar o comando:\n- Retorna pergunta de qual sinalizador\n- Espera a resposta na mensagem enviada\n- Pega o sinalizador respondido, procura no sistema, busca o arquivo .csv correspondente, e envia o arquivo",
        "x": 1530,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9c88eac0.5acda8",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2440,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2fe57c1c.362a74",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 280,
        "wires": []
    },
    {
        "id": "7411f7f.aba8e08",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "node.warn(\"Oi\")\nvar chatID = msg.payload.chatId;\nflow.set(\"chatID\", chatID, \"bank1\");\n\nvar message = \"Olá, eu sou o Notify Bot!\"\nmessage += \"\\r\\n\"\nmessage += \"Eu te avisarei quando alguma das máquinas, com sinalizadores Notify instaladas, estiver fora de operação.\"\nmessage += \"\\r\\n\"\nmessage += \"/help: visualizar comandos\"\n\nmsg.payload.content = message\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1280,
        "wires": [
            [
                "7bab79ff.c2a798"
            ]
        ]
    },
    {
        "id": "f01b54c1.5e77f8",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Comando Oi",
        "info": "Ao receber um \"Oi\", o bot responde o usuário, se identificando",
        "x": 1530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2676eda3.334422",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "achou",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sim",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nao",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 1620,
        "wires": [
            [
                "8dc97f0b.d1ce"
            ],
            []
        ]
    },
    {
        "id": "9c90e40c.cb7f18",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "var torres = flow.get(\"torres\", \"bank1\")\nvar allClients =flow.get(\"allClients\", \"bank1\")\n\nvar chatID = msg.payload.chatId;\nflow.set(\"chatID\", chatID, \"bank1\");\n\nvar resposta = \"Segue a lista de Equipamentos Notify cadastrados:\"\nresposta += \"\\r\\n\\r\\n\"\n\nfor(var i=0; i<allClients.length; i++){\n    \n    \n    resposta += \"- \"+allClients[i].nome\n    \n    if(allClients[i].status_atual == \"Em operação\"){\n        resposta += \" - 🟢\"\n    }\n    else if(allClients[i].status_atual == \"Fora de operação\"){\n        resposta += \" - 🔴\"\n    }\n    \n    if(allClients[i].conectividade == true){\n        resposta += \" : Online\"\n        \n    }\n    else{\n        resposta += \" : Offline\"\n    }\n    resposta += \"\\r\\n\"\n}\n\nmsg.payload.content = resposta\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1740,
        "wires": [
            [
                "a554850a.872718"
            ]
        ]
    },
    {
        "id": "c3a36bf5.0a8908",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Comando List",
        "info": "Comando /list: bot retorna uma lista com os sinalizadores cadastrados ",
        "x": 1530,
        "y": 1700,
        "wires": []
    },
    {
        "id": "436c5b93.781a04",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1420,
        "wires": [
            [
                "f56423ff.40329"
            ]
        ]
    },
    {
        "id": "f56423ff.40329",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "#:(bank1)::resumo_injetora",
                "pt": "flow"
            },
            {
                "t": "delete",
                "p": "#:(bank1)::dashboardLog",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 1420,
        "wires": [
            [
                "8dd862e1.78451"
            ]
        ]
    },
    {
        "id": "2e7738af.184418",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "É um comando?",
        "func": "var mensagem = msg.payload.content\nvar resposta\nvar chatID = msg.payload.chatId;\nflow.set(\"chatID\", chatID, \"bank1\");\n\nvar allClients = flow.get(\"allClients\", \"bank1\")||[]\nisCliente = false\nisComando = false\n\nvar comandos = [[\"oi\"],\n                [\"Oi\"],\n                [\"/list\"],\n                [\"/help\"],\n                [\"/file\"],\n                [\"SIM\"],\n                [\"NAO\"],\n                [\"/reset\"]\n]\n\nfor(var i=0; i<allClients.length; i++){\n    if(mensagem == allClients[i].nome){\n        isCliente = true\n    }\n}\n\nfor(var j=0; j<comandos.length; j++){\n    if(comandos[j] == mensagem){\n        isComando = true\n    }\n}\n\nif(isCliente == false && isComando == false){\n    node.warn(\"Mensagem diferente de qualquer comando que eu aceito\")\n    resposta = \"Desculpa, não reconheço este comando. Para visualizar os comandos, digite /help\"\n}\n\n/*\nif(mensagem != \"Oi\" && mensagem != \"oi\" && mensagem != \"/list\" && mensagem != \"/help\" && mensagem != \"/file\" && flag == true){\n    node.warn(\"Mensagem diferente de qualquer comando que eu aceito\")\n    resposta = \"Desculpa, não reconheço este comando. Para visualizar os comandos, digite /help\"\n}\n*/\n\nmsg.payload.content = resposta\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1880,
        "wires": [
            [
                "d3b00ce4.1a8e1"
            ]
        ],
        "info": "Verifica se é algum comando. Se não for, ele responde dizendo que não reconheceu o comando e diz que se o usuario quiser verificar os comandos, basta digital /help"
    },
    {
        "id": "7c48af03.a3828",
        "type": "mqtt in",
        "z": "b79a169e.a116d8",
        "name": "",
        "topic": "esp32/connection",
        "qos": "2",
        "datatype": "auto",
        "broker": "bab3ea8ecb465b5b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 400,
        "y": 1880,
        "wires": [
            [
                "a65bf63d.298028"
            ]
        ],
        "info": "Topico onde os ESPs vao responder a chamada"
    },
    {
        "id": "69271b8e.56b7f4",
        "type": "mqtt out",
        "z": "b79a169e.a116d8",
        "name": "",
        "topic": "esp32/hi",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bab3ea8ecb465b5b",
        "x": 740,
        "y": 1720,
        "wires": [],
        "info": "Topico onde o broker vai realizar uma chamada para todos os ESPs."
    },
    {
        "id": "d11b5f89.18a7f",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Chamada",
        "func": "var askForClients = \"hi\"\n\nmsg.payload = askForClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1720,
        "wires": [
            [
                "69271b8e.56b7f4"
            ]
        ]
    },
    {
        "id": "a65bf63d.298028",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Preenche chamada",
        "func": "var chamada = flow.get(\"chamada\")||[];\n\nobjChamada = {};\n\nmensagem = msg.payload  //Ex.: AA100-IHM\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\nobjChamada.tipo = separator[1]  //Ex: IHM \nobjChamada.clientID = separator[0] //cliente   Ex.: AA100\n\npodeAdicionar = true\n\nfor(var j=0; j<chamada.length; j++){\n    if(chamada[j].clientID == objChamada.clientID && chamada[j].tipo == objChamada.tipo){ //se ja existe no vetor\n        podeAdicionar = false\n    }\n}\n\nif(podeAdicionar == true){\n    chamada.push(objChamada)\n}\n\n\nflow.set(\"chamada\", chamada)\n\nmsg.payload = chamada\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1880,
        "wires": [
            []
        ],
        "info": "Recebe a resposta dos ESPs, e cria um vetor com todos que responderam"
    },
    {
        "id": "69492c3c.aa32d4",
        "type": "inject",
        "z": "b79a169e.a116d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 1720,
        "wires": [
            [
                "d11b5f89.18a7f",
                "b6232cf2.acff9"
            ]
        ]
    },
    {
        "id": "b6232cf2.acff9",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 580,
        "y": 1780,
        "wires": [
            [
                "d2e0f01b.425da"
            ]
        ]
    },
    {
        "id": "d2e0f01b.425da",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Confere a chamada",
        "func": "var chamada = flow.get(\"chamada\")||[]\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nisOnline = false\n\nfor(var i=0; i<allClients.length; i++){\n    \n    for(var j=0; j<chamada.length; j++){\n        \n        if(allClients[i].clientID === chamada[j].clientID){\n            \n            if(allClients[i].tipo === chamada[j].tipo){\n                //client online\n                isOnline = true; \n            }\n              \n        }\n    }\n    if(isOnline == true){\n        allClients[i].conectividade = true\n    }\n    else{\n        allClients[i].conectividade = false\n        allClients[i].status_atual = \"Fora de operação\"\n    }\n    isOnline = false\n}\n\nchamada = []\n\nflow.set(\"chamada\", chamada)\nflow.set(\"allClients\", allClients, \"bank1\")\n\nmsg.payload = allClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1780,
        "wires": [
            [
                "461ca6c2.938898"
            ]
        ],
        "info": "Depois de esperar 5s da chamada, verifica quem respondeu, e atualiza a variavel \"conectividade\" de cada cliente, com \"Offline\" ou \"Online\"."
    },
    {
        "id": "aa75519d.c308f",
        "type": "mqtt in",
        "z": "b79a169e.a116d8",
        "name": "",
        "topic": "esp32/compliment",
        "qos": "2",
        "datatype": "auto",
        "broker": "bab3ea8ecb465b5b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 120,
        "wires": [
            [
                "616d6e34.907a3"
            ]
        ],
        "info": "Topico onde os ESPs vao se apresentar toda vez que se conectarem com o broker"
    },
    {
        "id": "616d6e34.907a3",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Cadastra cliente",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\npodeAdd = true\nvar allClients = flow.get(\"allClients\", \"bank1\")||[]\nvar cliente = {};\n\nmensagem = msg.payload  //Ex.: AA100-IHM\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\ncliente.clientID = separator[0] //cliente   Ex.: AA100\n\nvar pos\nvar flag = false\n\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].clientID == separator[0]){\n        pos = j;\n        flag = true\n    }\n}\n\nif(flag == true){\n    cliente.nome = allClients[pos].nome\n}\nelse{\n    cliente.nome = separator[0]     //nome. Default = ID\n    cliente.status_atual = \"Fora de operação\"\n    cliente.time_ON = 0\n    cliente.time_OFF = 0\n    cliente.time_ON_string = \"00:00\"\n    cliente.time_OFF_string = \"00:00\"\n    cliente.time_change = data.getTime()\n    cliente.countOFF = 0\n    cliente.data = data_hoje\n    cliente.cadastro_data = data_hoje\n}\n\ncliente.tipo = separator[1]  //Ex: IHM \ncliente.macAdd = separator[2]   \ncliente.conectividade = true\n\n\nfor(var i=0; i< allClients.length; i++){\n    if(allClients[i].clientID == cliente.clientID && allClients[i].tipo == cliente.tipo){\n        podeAdd = false\n        allClients[i].conectividade = true\n        allClients[i].time_change = data.getTime()\n        allClients[i].data = data_hoje\n    }\n}\n\nif(podeAdd == true){\n    allClients.push(cliente)\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\n\nmsg.payload = allClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "8f0965f8.c68668",
                "4aafac67.191b94"
            ]
        ],
        "info": "Recebe o cumprimento de cada aparelho conectado com o broker, e inclui no vetor de clientes"
    },
    {
        "id": "124ef5b3.9b101a",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Chamada dos clients",
        "info": "A cada 10 minutos, é feito uma especie de chamada para todos os clientes.\n",
        "x": 420,
        "y": 1680,
        "wires": []
    },
    {
        "id": "8f0965f8.c68668",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "92c20ffc.26589",
            "23a47a60.5432a6",
            "98ba4a21.8c2648",
            "76a176ad.320548",
            "30a99d8e.d8d4c2",
            "71d4ce48.35911"
        ],
        "x": 515,
        "y": 120,
        "wires": []
    },
    {
        "id": "f789f96f.2f1e18",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1680,
        "y": 1740,
        "wires": [
            [
                "9c90e40c.cb7f18"
            ]
        ]
    },
    {
        "id": "2f0bfe2f.f4db22",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Reset Sinalizadores pela Dashboard",
        "info": "Os sinalizadores serão resetados, automaticamente, todos os dias, à meia-noite.\nOu podem ser resetados manualmente através da dashboard, pelo botão reset sinalizadores.",
        "x": 220,
        "y": 1300,
        "wires": []
    },
    {
        "id": "6d96badf.385224",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "ESP is Connected",
        "info": "Toda vez que um ESP se conecta com o broker, ele envia uma mensagem contendo seu ID, seu tipo e seu MAC address. EX: AA100-Torre",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "428ca8e7.de2488",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "switch answer",
        "func": "var data = new Date();\nvar yyyy = data.getFullYear();\nvar mm = data.getMonth() < 9 ? \"0\" + (data.getMonth() + 1) : (data.getMonth() + 1); // getMonth() is zero-based\nvar dd  = data.getDate() < 10 ? \"0\" + data.getDate() : data.getDate();\nvar hh = data.getHours() < 10 ? \"0\" + data.getHours() : data.getHours();\nvar mmm  = data.getMinutes() < 10 ? \"0\" + data.getMinutes() : data.getMinutes();\n\nvar inj_selected = msg.payload.content\nvar achou = \"nao\";\nnode.warn(\"Entrei\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar position\nfor(var i=0; i<allClients.length; i++){\n    if(allClients[i].nome == inj_selected){\n        position = i\n        node.warn(\"Achei\")\n        achou = \"sim\";\n        \n    }\n}\n\nif(achou == \"sim\"){\n    var fname = \"Injetora\"+allClients[position].nome+\"-\"+ dd + mm + yyyy + \".csv\";\n    msg.filename = \"/home/pi/Documents/datalog/\"+fname\n}\nelse{\n    achou = \"nao\"\n}\n\nmsg.achou = achou;\n\n//var fname = \"Sinalizador\"+torres[position].name+\"-\"+ dd + mm + yyyy + \".csv\";\n//msg.filename = \"/home/pi/Documents/datalog/\"+fname\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 1620,
        "wires": [
            [
                "2676eda3.334422"
            ]
        ],
        "info": "Recebe a resposta do usuário, e checa se existe o Sinalizador que ele escreveu.\n\n- Se sim, retorna o arquivo correspondente;\n- Se nao, avisa o usuario que nao encontrou"
    },
    {
        "id": "fc291164.13305",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Confirm reset",
        "func": "msg.payload.type = 'message';\nmsg.payload.content = 'Tem certeza de que deseja realizar o reset dos sinalizadores?';\n\nvar opts = {\n  reply_markup: JSON.stringify({\n    keyboard: [\n      ['SIM'],\n      ['NAO']],\n      'resize_keyboard' : true, \n      'one_time_keyboard' : true\n  })\n};\n\nmsg.payload.options = opts;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "aa19dcb5.7af53"
            ]
        ]
    },
    {
        "id": "90d0ebf.72c3a18",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SIM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NAO",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1480,
        "wires": [
            [
                "f56423ff.40329"
            ],
            []
        ]
    },
    {
        "id": "ca4b0f90.778f8",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Confirmação Reiniciar",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Tem certeza de que quer reiniciar os sinalizadores?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "59ab7931.b44b28"
            ]
        ]
    },
    {
        "id": "4a40d7b3.f79108",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 1340,
        "wires": [
            [
                "f56423ff.40329"
            ]
        ]
    },
    {
        "id": "ab6db771.60b268",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Conf_Principal",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\nvar pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar time_now = data.getTime()  \n\nfunction calculaTempo(tempoTotal){\n    var diffDays = Math.floor(tempoTotal / 86400000); // days\n    var diffHrs = Math.floor((tempoTotal % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.round(((tempoTotal % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    //node.warn(diffDays + \" dias, \" + diffHrs + \" horas, \" + diffMins+\" minutos\");\n    var tempoCalculado = diffHrs+\":\"+diffMins\n    return tempoCalculado;\n}\n\nmensagem = msg.payload  //Ex.: AC100-ON\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\nvar statusAtual = separator[1]  //status Ex.: ON\nvar clientID = separator[0] //cliente   Ex.: AC100\n\nif(statusAtual == \"ON\"){\n    statusAtual = \"Em operação\"\n}\nelse{\n    statusAtual = \"Fora de operação\"\n}\n\nvar pos_clientNome\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].clientID == clientID){ //encontra o cliente no vetor de clientes ja cadastrados\n        pos_atual = j   //salva a posicao desse cliente no vetor\n        if(allClients[j].time_change == 0){ //nesse caso primeira vez que recebe informacao\n            allClients[j].status_atual = statusAtual\n        }\n        else{   //nao eh a primeira vez que recebe informacao\n            if(allClients[j].status_atual == \"Em operação\" && statusAtual == \"Fora de operação\"){    //estava ON e agora recebeu OFF\n                //atualiza tempo ON\n                allClients[j].time_ON = allClients[j].time_ON + time_now - allClients[j].time_change\n                allClients[j].time_ON_string = calculaTempo(allClients[j].time_ON)\n                allClients[j].countOFF = allClients[j].countOFF + 1 //soma mais uma parada\n            }\n            else if(allClients[j].status_atual == \"Fora de operação\" && statusAtual == \"Em operação\"){ //estava OFF e agora recebeu ON\n                //atualiza tempo OFF\n                allClients[j].time_OFF = allClients[j].time_OFF + time_now - allClients[j].time_change\n                allClients[j].time_OFF_string = calculaTempo(allClients[j].time_OFF)\n            }\n            allClients[j].status_atual = statusAtual    //atualiza status atual\n            allClients[j].data = data_hoje\n        }\n        allClients[j].time_change = time_now    //atualiza tempo de mudança\n        allClients[j].time_change_string = calculaTempo(allClients[j].time_change)\n        allClients[j].conectividade = true;\n    }\n}\n\nflow.set(\"allClients\", allClients, \"bank1\") //atualiza vetor global\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\n\n/*\nvar podeCriar = 1\nvar i\nfor(i=0; i<torres.length; i++){ //verifica se esse cliente ja esta no vetor\n    if(torres[i].clientID == clientID){   //se o cliente ja existe no vetor\n        podeCriar = 0\n        pos_atual = i   //guarda a posição desse cliente no vetor\n    }\n}\nif(podeCriar == 0){ //torre ja está na array - atualização de tempo\n    node.warn(\"Esse sinalizador ja esta cadastrado\")\n    var tempo_status_troca = data.getTime()\n    var tempoTotal = tempo_status_troca - torres[pos_atual].tempo_status_atual  //tempo total em milisegundos\n\n    if(torres[pos_atual].statusAtual == \"Setup\"){\n        torres[pos_atual].tempo_YELLOW = tempoTotal + torres[pos_atual].tempo_YELLOW;\n    }\n    else if(torres[pos_atual].statusAtual == \"Em operação\"){\n        torres[pos_atual].tempo_GREEN = tempoTotal + torres[pos_atual].tempo_GREEN;\n    }\n    else if(torres[pos_atual].statusAtual == \"Parada programada\"){\n        torres[pos_atual].tempo_BLUE = tempoTotal + torres[pos_atual].tempo_BLUE;\n    }\n    else if(torres[pos_atual].statusAtual == \"Parada não programada\"){\n        torres[pos_atual].tempo_RED = tempoTotal + torres[pos_atual].tempo_RED;\n    }\n    \n    \n    if(statusAtual == \"green\"){\n        statusAtual = \"Em operação\"\n    }\n    else if(statusAtual == \"red\"){\n        statusAtual = \"Parada não programada\"\n        torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n    }\n    else if(statusAtual == \"yellow\"){\n        statusAtual = \"Setup\"\n    }\n    else if(statusAtual == \"blue\"){\n        statusAtual = \"Parada programada\"\n        torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n    }\n    \n    torres[pos_atual].statusAtual = statusAtual\n    torres[pos_atual].tempo_status_atual = data.getTime()\n    torres[pos_atual].hora_troca = horas+\":\"+minutos\n    torres[pos_atual].update = \"nao\"\n    \n}\nelse{   //novo cliente, coloca no final do vetor torres\n    var cont_parada = 0\n    if(statusAtual == \"green\"){\n        statusAtual = \"Em operação\"\n    }\n    else if(statusAtual == \"red\"){\n        statusAtual = \"Parada não programada\"\n        //torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n        cont_parada = cont_parada + 1\n    }\n    else if(statusAtual == \"yellow\"){\n        statusAtual = \"Setup\"\n    }\n    else if(statusAtual == \"blue\"){\n        statusAtual = \"Parada programada\"\n        //torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n        cont_parada = cont_parada + 1\n    }\n    \n    var obj_torre = {\n        clientID : clientID,\n        name : allClients[pos_clientNome].nome, //inicia com o mesmo identificador default\n        statusAtual : statusAtual,\n        data : data_hoje,\n        tempo_GREEN : 0,\n        tempo_RED : 0,\n        tempo_YELLOW : 0,\n        tempo_BLUE : 0,\n        tempo_status_atual : data.getTime(),\n        hora_troca : horas+\":\"+minutos,\n        color : \" \",\n        count_stop : cont_parada,\n        update : \"nao\",\n    }; //objeto auxiliar que guarda as infos que recebeu da msg atual\n    torres.push(obj_torre);\n    pos_atual = torres.length - 1   //posição do ciente é o ultimo do vetor\n    if (torres.length > 50){    //tam. Max de torres = 50\n        // Delete oldest message if > 50\n        torres.shift();\n        torres.length = 50;\n    }\n}\n\n\n\n\nflow.set(\"torres\", torres, \"bank1\")\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n//node.warn(flow.get(\"torres\"))\n*/\n\nmsg = {};\nmsg.payload = allClients\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar pos_atual = 0;\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\n",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "1adb41f8.d1c7ce",
                "1384d1b0.f3483e"
            ]
        ],
        "info": "Função recebe a mensagem enviada pelo controle (IHM)\n\nCom essa mensagem, ele verifica se está vindo de uma nova torre (não cadastrada) ou de uma torre já cadastrada.\n\nNo caso de uma nova, ele cria um novo objeto para esta nova torre, e inclui no final do vetor de objetos global \"torres\". E atualiza o status.\nNo caso de ser uma mensagem de uma torre já cadastrada, ele atualiza o tempo e o status de acordo com a mensagem."
    },
    {
        "id": "1adb41f8.d1c7ce",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "2d9fd139.255eee",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Time string for table",
        "func": "var clients = msg.payload\n\nfunction calculaTempo(tempoTotal){\n    var diffDays = Math.floor(tempoTotal / 86400000); // days\n    var diffHrs = Math.floor((tempoTotal % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.round(((tempoTotal % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    //node.warn(diffDays + \" dias, \" + diffHrs + \" horas, \" + diffMins+\" minutos\");\n    var tempoCalculado = diffHrs+\":\"+diffMins\n    return tempoCalculado;\n}\n\nfor(var j=0; j<clients.length; j++){\n    clients[j].time_ON = calculaTempo(clients[j].time_ON)\n    clients[j].time_OFF = calculaTempo(clients[j].time_OFF)\n}\n\n\nmsg.payload = clients\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 300,
        "wires": [
            [
                "84be5184.1343b"
            ]
        ]
    },
    {
        "id": "9d717167.87cf5",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Update time",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\nvar update = flow.get(\"allClients\", \"bank1\")\nvar time_now = data.getTime()  \n\nfunction calculaTempo(tempoTotal){\n    var diffDays = Math.floor(tempoTotal / 86400000); // days\n    var diffHrs = Math.floor((tempoTotal % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.round(((tempoTotal % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    //node.warn(diffDays + \" dias, \" + diffHrs + \" horas, \" + diffMins+\" minutos\");\n    var tempoCalculado = diffHrs+\":\"+diffMins\n    return tempoCalculado;\n}\n\nfor(var j=0; j<update.length; j++){\n    \n    if(update[j].conectividade == true){   //update tempo se sinalizador estiver conectado ao servidor\n        if(update[j].status_atual == \"Em operação\"){\n            update[j].time_ON = update[j].time_ON + time_now - update[j].time_change\n            update[j].time_ON_string = calculaTempo(update[j].time_ON)\n        }\n        else{\n            update[j].time_OFF = update[j].time_OFF + time_now - update[j].time_change\n            update[j].time_OFF_string = calculaTempo(update[j].time_OFF)\n        }\n        update[j].time_change = time_now\n    }\n    /*\n    if(update[j].status_atual == \"Em operação\"){\n        update[j].time_ON = update[j].time_ON + time_now - update[j].time_change\n    }\n    else{\n        update[j].time_OFF = update[j].time_OFF + time_now - update[j].time_change\n    }\n    update[j].time_change = time_now\n    */\n}\n\nflow.set(\"allClients\", update, \"bank1\")\n\nmsg = {};\nmsg.payload = update\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 360,
        "wires": [
            [
                "c375ec64.ad0b4"
            ]
        ]
    },
    {
        "id": "56f6a38e.1c447c",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Time string for table",
        "func": "var clients = msg.payload\n\n\nfunction calculaTempo(tempoTotal){\n    var diffDays = Math.floor(tempoTotal / 86400000); // days\n    var diffHrs = Math.floor((tempoTotal % 86400000) / 3600000); // hours\n    diffHrs = diffHrs < 10 ? \"0\" + diffHrs : diffHrs;\n    var diffMins = Math.round(((tempoTotal % 86400000) % 3600000) / 60000); // minutes\n    diffMins = diffMins < 10 ? \"0\" + diffMins : diffMins;\n    //node.warn(diffDays + \" dias, \" + diffHrs + \" horas, \" + diffMins+\" minutos\");\n    var tempoCalculado = diffHrs+\":\"+diffMins\n    return tempoCalculado;\n}\n\nfor(var j=0; j<clients.length; j++){\n    clients[j].time_ON = calculaTempo(clients[j].time_ON)\n    clients[j].time_OFF = calculaTempo(clients[j].time_OFF)\n}\n\nmsg.payload = clients\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 360,
        "wires": [
            [
                "75f385c6.1ca90c"
            ]
        ]
    },
    {
        "id": "1384d1b0.f3483e",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "23a47a60.5432a6",
            "92c20ffc.26589",
            "76a176ad.320548",
            "30a99d8e.d8d4c2",
            "744f0a3c.4c2f74",
            "349db12c.45ab8e",
            "98ba4a21.8c2648"
        ],
        "x": 735,
        "y": 300,
        "wires": []
    },
    {
        "id": "84be5184.1343b",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "76a176ad.320548",
            "349db12c.45ab8e",
            "30a99d8e.d8d4c2",
            "744f0a3c.4c2f74",
            "98ba4a21.8c2648",
            "71d4ce48.35911"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "75f385c6.1ca90c",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "76a176ad.320548",
            "98ba4a21.8c2648",
            "71d4ce48.35911"
        ],
        "x": 1135,
        "y": 360,
        "wires": []
    },
    {
        "id": "c375ec64.ad0b4",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "23a47a60.5432a6",
            "98ba4a21.8c2648",
            "76a176ad.320548",
            "71d4ce48.35911",
            "ea8aea5e.445b08"
        ],
        "x": 735,
        "y": 360,
        "wires": []
    },
    {
        "id": "34d8b505.8836ea",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Full events array",
        "func": "var pos_atual = flow.get(\"pos_atual\", \"bank1\")\n\nvar newPayload = {}\n\nnewPayload.clientID = msg.payload[pos_atual].clientID\nnewPayload.status_atual = msg.payload[pos_atual].status_atual\nnewPayload.time_change_string = msg.payload[pos_atual].time_change_string\n\n\nvar resumo_injetora = flow.get(\"resumo_injetora\", \"bank1\")||[]\n\nresumo_injetora.push(newPayload)\nif (resumo_injetora.length > 1000){\n    // Delete oldest message if > 20\n    resumo_injetora.shift();\n    resumo_injetora.length = 1000;\n} \n\n\nflow.set(\"resumo_injetora\", resumo_injetora, \"bank1\")\n\n\nmsg = {}\nmsg.payload = resumo_injetora\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 440,
        "wires": [
            [
                "33014e6f.adc852"
            ]
        ]
    },
    {
        "id": "30a99d8e.d8d4c2",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "84be5184.1343b",
            "1384d1b0.f3483e",
            "8f0965f8.c68668"
        ],
        "x": 1475,
        "y": 440,
        "wires": [
            [
                "34d8b505.8836ea"
            ]
        ]
    },
    {
        "id": "33014e6f.adc852",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 440,
        "wires": []
    },
    {
        "id": "3bdae01.273ac2",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 700,
        "wires": []
    },
    {
        "id": "b7fa590e.d54818",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Lista todos os eventos",
        "info": "Lista todos os eventos de todos os Sinalizadores, dentro de uma array.\n\nCada objeto contem:\n - ID: cientID\n - Status: status_atual\n - Hora da troca: time_change_string",
        "x": 1560,
        "y": 400,
        "wires": []
    },
    {
        "id": "a1a2a440.936a88",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "3233faa5.9f53a6"
            ],
            [
                "c4c7ff82.d3273"
            ]
        ]
    },
    {
        "id": "50323d49.0d76e4",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Att novo nome",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\nvar id_para_mudar = flow.get(\"id_para_mudar\", \"bank1\")\nvar new_name = flow.get(\"new_name\")\n\n\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].nome == id_para_mudar){\n        allClients[j].nome = new_name\n    }\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1140,
        "wires": [
            [
                "a3f97681.c0fe48"
            ]
        ]
    },
    {
        "id": "c4c7ff82.d3273",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Nome ja usado",
        "func": "msg = {}\nmsg.topic = \"Este nome já está sendo utilizado. Digite outro nome.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "49a99ce7.4e5864"
            ]
        ]
    },
    {
        "id": "8e64b435.9414a8",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Reset Sinalizadores pelo Telegram",
        "info": "",
        "x": 220,
        "y": 1500,
        "wires": []
    },
    {
        "id": "4c76c20e.5ee2cc",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Resposta da Chamada",
        "info": "",
        "x": 420,
        "y": 1840,
        "wires": []
    },
    {
        "id": "1e7197b9.a88f98",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Att lista",
        "func": "var allClients = flow.get(\"allClients\", \"bank1\")\n\nmsg = {}\nmsg.payload = allClients\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 700,
        "wires": [
            [
                "155f3405.7caddc",
                "85ae034d.a2a1d"
            ]
        ]
    },
    {
        "id": "71d4ce48.35911",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "84be5184.1343b",
            "75f385c6.1ca90c",
            "c375ec64.ad0b4",
            "a3f97681.c0fe48",
            "461ca6c2.938898",
            "8f0965f8.c68668"
        ],
        "x": 1475,
        "y": 700,
        "wires": [
            [
                "1e7197b9.a88f98"
            ]
        ]
    },
    {
        "id": "911f49fd.e33048",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "92c20ffc.26589",
            "dee99161.4c8c1",
            "5f9777e9.0c3b98"
        ],
        "x": 215,
        "y": 940,
        "wires": []
    },
    {
        "id": "72543525.cd317c",
        "type": "ui_media",
        "z": "b79a169e.a116d8",
        "group": "b5deeefa.dab7b",
        "name": "",
        "width": 4,
        "height": 3,
        "order": 2,
        "category": "",
        "file": "IDV.-Notify-(sem-fundo) - solo.png",
        "layout": "adjust",
        "showcontrols": true,
        "loop": true,
        "onstart": true,
        "scope": "local",
        "tooltip": "",
        "x": 2210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "a3f97681.c0fe48",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "92c20ffc.26589",
            "dee99161.4c8c1",
            "98ba4a21.8c2648",
            "76a176ad.320548",
            "71d4ce48.35911"
        ],
        "x": 915,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cd856a38.82fd58",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Clear input ",
        "func": "msg = {}\nmsg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "e51545de.135f28"
            ]
        ]
    },
    {
        "id": "dee99161.4c8c1",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "911f49fd.e33048",
            "a3f97681.c0fe48"
        ],
        "x": 95,
        "y": 1020,
        "wires": [
            [
                "cd856a38.82fd58"
            ]
        ]
    },
    {
        "id": "a5b80d6e.04475",
        "type": "ui_media",
        "z": "b79a169e.a116d8",
        "group": "c54f908.e18107",
        "name": "",
        "width": 4,
        "height": 3,
        "order": 15,
        "category": "Logo",
        "file": "IDV.-Notify-(sem-fundo) - solo.png",
        "layout": "adjust",
        "showcontrols": true,
        "loop": true,
        "onstart": true,
        "scope": "local",
        "tooltip": "",
        "x": 2210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7ca18610.63ad78",
        "type": "ui_media",
        "z": "b79a169e.a116d8",
        "group": "160e81fb.f1c86e",
        "name": "",
        "width": 4,
        "height": 3,
        "order": 13,
        "category": "Logo",
        "file": "IDV.-Notify-(sem-fundo) - solo.png",
        "layout": "adjust",
        "showcontrols": true,
        "loop": true,
        "onstart": true,
        "scope": "local",
        "tooltip": "",
        "x": 2210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "688d7363.c09bac",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Lista dos Sinalizadores",
        "info": "",
        "x": 1560,
        "y": 660,
        "wires": []
    },
    {
        "id": "3233faa5.9f53a6",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Nome válido",
        "func": "var new_name = flow.get(\"new_name\")\n\nmsg = {}\n\nmsg.topic = \"Novo nome \"+new_name+\" é válido!\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "49a99ce7.4e5864"
            ]
        ]
    },
    {
        "id": "b09c4d96.5b8fc",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "",
        "func": "var name_can_change = flow.get(\"name_can_change\")\n\nmsg = {}\nmsg.payload = name_can_change\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "88a202e3.a6bc4"
            ]
        ]
    },
    {
        "id": "88a202e3.a6bc4",
        "type": "switch",
        "z": "b79a169e.a116d8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "50323d49.0d76e4"
            ],
            [
                "21733833.7963b8"
            ]
        ]
    },
    {
        "id": "21733833.7963b8",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Nome ja usado",
        "func": "msg = {}\nmsg.topic = \"AVISO\"\nmsg.payload = \"Este nome já está sendo utilizado. Digite outro nome.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1180,
        "wires": [
            [
                "55be3785.6807f8"
            ]
        ]
    },
    {
        "id": "36650140.32790e",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Save new name",
        "info": "",
        "x": 380,
        "y": 1120,
        "wires": []
    },
    {
        "id": "155f3405.7caddc",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 680,
        "wires": [
            [
                "36423b04.d4e9c4"
            ]
        ]
    },
    {
        "id": "85ae034d.a2a1d",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1770,
        "y": 720,
        "wires": [
            [
                "36423b04.d4e9c4"
            ]
        ]
    },
    {
        "id": "24853c8b.b5dbc4",
        "type": "change",
        "z": "b79a169e.a116d8",
        "name": "clear out the table",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1650,
        "y": 140,
        "wires": [
            [
                "be4a2d14.fc355"
            ]
        ]
    },
    {
        "id": "acad42dc.a938b",
        "type": "delay",
        "z": "b79a169e.a116d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1640,
        "y": 180,
        "wires": [
            [
                "be4a2d14.fc355"
            ]
        ]
    },
    {
        "id": "98ba4a21.8c2648",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "84be5184.1343b",
            "75f385c6.1ca90c",
            "1384d1b0.f3483e",
            "8f0965f8.c68668",
            "c375ec64.ad0b4",
            "a3f97681.c0fe48",
            "461ca6c2.938898"
        ],
        "x": 1475,
        "y": 160,
        "wires": [
            [
                "24853c8b.b5dbc4",
                "acad42dc.a938b"
            ]
        ]
    },
    {
        "id": "461ca6c2.938898",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "98ba4a21.8c2648",
            "76a176ad.320548",
            "71d4ce48.35911"
        ],
        "x": 915,
        "y": 1780,
        "wires": []
    },
    {
        "id": "23a5f5b8.c25eba",
        "type": "ui_media",
        "z": "b79a169e.a116d8",
        "group": "4b29cbbf.bb9374",
        "name": "",
        "width": 4,
        "height": 3,
        "order": 3,
        "category": "Logo",
        "file": "IDV.-Notify-(sem-fundo) - solo.png",
        "layout": "adjust",
        "showcontrols": true,
        "loop": true,
        "onstart": true,
        "scope": "local",
        "tooltip": "",
        "x": 2210,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "defee776.b00eb8",
        "type": "comment",
        "z": "b79a169e.a116d8",
        "name": "Tabela Detalhada",
        "info": "",
        "x": 1540,
        "y": 100,
        "wires": []
    },
    {
        "id": "8dd862e1.78451",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Zera os tempos",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\nvar allClients = flow.get(\"allClients\", \"bank1\")\n\nfor(var i=0; i<allClients.length; i++){\n    allClients[i].time_ON = 0\n    allClients[i].time_OFF = 0\n    allClients[i].time_ON_string = \"00:00\"\n    allClients[i].time_OFF_string = \"00:00\"\n    allClients[i].countOFF = 0\n    allClients[i].time_change = data.getTime()\n}\n\nflow.set(\"allClients\", allClients, \"bank1\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1420,
        "wires": [
            []
        ],
        "info": "Função para zerar os tempos ON e OFF de cada sinalizador.\nTambém atualiza o tempo de mudança para o atual."
    },
    {
        "id": "ac86e1ff.9414d",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [],
        "x": 855,
        "y": 300,
        "wires": [
            [
                "2d9fd139.255eee"
            ]
        ]
    },
    {
        "id": "7242a4d.ee4f75c",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [],
        "x": 855,
        "y": 360,
        "wires": [
            [
                "56f6a38e.1c447c"
            ]
        ]
    },
    {
        "id": "5f9777e9.0c3b98",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "911f49fd.e33048"
        ],
        "x": 495,
        "y": 360,
        "wires": [
            [
                "9d717167.87cf5"
            ]
        ]
    },
    {
        "id": "a5e4f5fb.092328",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 205,
        "y": 420,
        "wires": []
    },
    {
        "id": "a12e8cb7.19b8d",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 235,
        "y": 460,
        "wires": []
    },
    {
        "id": "b1239d6c.22a93",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 195,
        "y": 500,
        "wires": []
    },
    {
        "id": "27e40270.aa532e",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 235,
        "y": 540,
        "wires": []
    },
    {
        "id": "bc0db255.d8bec",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 195,
        "y": 580,
        "wires": []
    },
    {
        "id": "a8fd4e66.8069b",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 195,
        "y": 660,
        "wires": []
    },
    {
        "id": "235d9270.376a7e",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 235,
        "y": 700,
        "wires": []
    },
    {
        "id": "bc3dc86f.7e65a8",
        "type": "link out",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "e2a37efb.a4334"
        ],
        "x": 235,
        "y": 620,
        "wires": []
    },
    {
        "id": "e2a37efb.a4334",
        "type": "link in",
        "z": "b79a169e.a116d8",
        "name": "",
        "links": [
            "a5e4f5fb.092328",
            "a12e8cb7.19b8d",
            "b1239d6c.22a93",
            "27e40270.aa532e",
            "bc0db255.d8bec",
            "bc3dc86f.7e65a8",
            "a8fd4e66.8069b",
            "235d9270.376a7e"
        ],
        "x": 495,
        "y": 300,
        "wires": [
            [
                "ab6db771.60b268"
            ]
        ]
    },
    {
        "id": "46997430.c9422c",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Conf_Principal",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\nvar pos_atual = flow.get(\"pos_atual\", \"bank1\")\nvar allClients = flow.get(\"allClients\", \"bank1\")\nvar time_now = data.getTime()  \n\nmensagem = msg.payload  //Ex.: AC100-ON\nvar separator = mensagem.split(\"-\")  //separa o cliente do status\n\nvar statusAtual = separator[1]  //status Ex.: ON\nvar clientID = separator[0] //cliente   Ex.: AC100\n\nif(statusAtual == \"ON\"){\n    statusAtual = \"Em operação\"\n}\nelse{\n    statusAtual = \"Fora de operação\"\n}\n\nvar pos_clientNome\nfor(var j=0; j<allClients.length; j++){\n    if(allClients[j].clientID == clientID){ //encontra o cliente no vetor de clientes ja cadastrados\n        pos_atual = j   //salva a posicao desse cliente no vetor\n        if(allClients[j].time_change == 0){ //nesse caso primeira vez que recebe informacao\n            allClients[j].status_atual = statusAtual\n        }\n        else{   //nao eh a primeira vez que recebe informacao\n            if(allClients[j].status_atual == \"Em operação\" && statusAtual == \"Fora de operação\"){    //estava ON e agora recebeu OFF\n                //atualiza tempo ON\n                allClients[j].time_ON = allClients[j].time_ON + time_now - allClients[j].time_change\n                allClients[j].countOFF = allClients[j].countOFF + 1 //soma mais uma parada\n            }\n            else if(allClients[j].status_atual == \"Fora de operação\" && statusAtual == \"Em operação\"){ //estava OFF e agora recebeu ON\n                //atualiza tempo OFF\n                allClients[j].time_OFF = allClients[j].time_OFF + time_now - allClients[j].time_change\n            }\n            allClients[j].status_atual = statusAtual    //atualiza status atual\n            allClients[j].data = data_hoje\n        }\n        allClients[j].time_change = time_now    //atualiza tempo de mudança\n        allClients[j].time_change_string = horas+\":\"+minutos\n        allClients[j].conectividade = true;\n    }\n}\n\nflow.set(\"allClients\", allClients, \"bank1\") //atualiza vetor global\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\n\n/*\nvar podeCriar = 1\nvar i\nfor(i=0; i<torres.length; i++){ //verifica se esse cliente ja esta no vetor\n    if(torres[i].clientID == clientID){   //se o cliente ja existe no vetor\n        podeCriar = 0\n        pos_atual = i   //guarda a posição desse cliente no vetor\n    }\n}\nif(podeCriar == 0){ //torre ja está na array - atualização de tempo\n    node.warn(\"Esse sinalizador ja esta cadastrado\")\n    var tempo_status_troca = data.getTime()\n    var tempoTotal = tempo_status_troca - torres[pos_atual].tempo_status_atual  //tempo total em milisegundos\n\n    if(torres[pos_atual].statusAtual == \"Setup\"){\n        torres[pos_atual].tempo_YELLOW = tempoTotal + torres[pos_atual].tempo_YELLOW;\n    }\n    else if(torres[pos_atual].statusAtual == \"Em operação\"){\n        torres[pos_atual].tempo_GREEN = tempoTotal + torres[pos_atual].tempo_GREEN;\n    }\n    else if(torres[pos_atual].statusAtual == \"Parada programada\"){\n        torres[pos_atual].tempo_BLUE = tempoTotal + torres[pos_atual].tempo_BLUE;\n    }\n    else if(torres[pos_atual].statusAtual == \"Parada não programada\"){\n        torres[pos_atual].tempo_RED = tempoTotal + torres[pos_atual].tempo_RED;\n    }\n    \n    \n    if(statusAtual == \"green\"){\n        statusAtual = \"Em operação\"\n    }\n    else if(statusAtual == \"red\"){\n        statusAtual = \"Parada não programada\"\n        torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n    }\n    else if(statusAtual == \"yellow\"){\n        statusAtual = \"Setup\"\n    }\n    else if(statusAtual == \"blue\"){\n        statusAtual = \"Parada programada\"\n        torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n    }\n    \n    torres[pos_atual].statusAtual = statusAtual\n    torres[pos_atual].tempo_status_atual = data.getTime()\n    torres[pos_atual].hora_troca = horas+\":\"+minutos\n    torres[pos_atual].update = \"nao\"\n    \n}\nelse{   //novo cliente, coloca no final do vetor torres\n    var cont_parada = 0\n    if(statusAtual == \"green\"){\n        statusAtual = \"Em operação\"\n    }\n    else if(statusAtual == \"red\"){\n        statusAtual = \"Parada não programada\"\n        //torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n        cont_parada = cont_parada + 1\n    }\n    else if(statusAtual == \"yellow\"){\n        statusAtual = \"Setup\"\n    }\n    else if(statusAtual == \"blue\"){\n        statusAtual = \"Parada programada\"\n        //torres[pos_atual].count_stop = torres[pos_atual].count_stop + 1 //add contagem de paradas\n        cont_parada = cont_parada + 1\n    }\n    \n    var obj_torre = {\n        clientID : clientID,\n        name : allClients[pos_clientNome].nome, //inicia com o mesmo identificador default\n        statusAtual : statusAtual,\n        data : data_hoje,\n        tempo_GREEN : 0,\n        tempo_RED : 0,\n        tempo_YELLOW : 0,\n        tempo_BLUE : 0,\n        tempo_status_atual : data.getTime(),\n        hora_troca : horas+\":\"+minutos,\n        color : \" \",\n        count_stop : cont_parada,\n        update : \"nao\",\n    }; //objeto auxiliar que guarda as infos que recebeu da msg atual\n    torres.push(obj_torre);\n    pos_atual = torres.length - 1   //posição do ciente é o ultimo do vetor\n    if (torres.length > 50){    //tam. Max de torres = 50\n        // Delete oldest message if > 50\n        torres.shift();\n        torres.length = 50;\n    }\n}\n\n\n\n\nflow.set(\"torres\", torres, \"bank1\")\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n//node.warn(flow.get(\"torres\"))\n*/\n\nmsg = {};\nmsg.payload = allClients\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nvar pos_atual = 0;\nflow.set(\"pos_atual\", pos_atual, \"bank1\")\n\n",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            []
        ],
        "info": "Função recebe a mensagem enviada pelo controle (IHM)\n\nCom essa mensagem, ele verifica se está vindo de uma nova torre (não cadastrada) ou de uma torre já cadastrada.\n\nNo caso de uma nova, ele cria um novo objeto para esta nova torre, e inclui no final do vetor de objetos global \"torres\". E atualiza o status.\nNo caso de ser uma mensagem de uma torre já cadastrada, ele atualiza o tempo e o status de acordo com a mensagem."
    },
    {
        "id": "3f070137.3bacde",
        "type": "function",
        "z": "b79a169e.a116d8",
        "name": "Update time",
        "func": "var data = new Date()\nvar dia = data.getDate().toString().padStart(2, '0')\nvar mes = (data.getMonth()+1).toString().padStart(2, '0')\nvar ano = data.getFullYear()\nvar horas = data.getHours().toString().padStart(2, '0')\nvar minutos = data.getMinutes().toString().padStart(2, '0')\nvar data_hoje = dia+\"/\"+mes+\"/\"+ano;\n\nvar update = flow.get(\"allClients\", \"bank1\")\nvar time_now = data.getTime()  \n\nfor(var j=0; j<update.length; j++){\n    \n    if(update[j].conectividade == true){   //update tempo se sinalizador estiver conectado ao servidor\n        if(update[j].status_atual == \"Em operação\"){\n            update[j].time_ON = update[j].time_ON + time_now - update[j].time_change\n        }\n        else{\n            update[j].time_OFF = update[j].time_OFF + time_now - update[j].time_change\n        }\n        update[j].time_change = time_now\n    }\n    /*\n    if(update[j].status_atual == \"Em operação\"){\n        update[j].time_ON = update[j].time_ON + time_now - update[j].time_change\n    }\n    else{\n        update[j].time_OFF = update[j].time_OFF + time_now - update[j].time_change\n    }\n    update[j].time_change = time_now\n    */\n}\n\nflow.set(\"allClients\", update, \"bank1\")\n\nmsg = {};\nmsg.payload = update\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4aafac67.191b94",
        "type": "debug",
        "z": "b79a169e.a116d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "ad050669.14bba8",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "ENTER",
        "group": "bb15abb8.10dae8",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Enter",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "eebcdd8c.33fc5",
                "a5bf5388.f4073"
            ]
        ]
    },
    {
        "id": "8f4f5d9a.5dffd",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "bb15abb8.10dae8",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "eebcdd8c.33fc5",
                "a5bf5388.f4073"
            ]
        ]
    },
    {
        "id": "d781b3ad.eef2b",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "2e329927.ce2b26",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "update",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "9d717167.87cf5"
            ]
        ]
    },
    {
        "id": "cf13e8a4.d958e8",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "a5c77f56.c9f86",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 80,
        "y": 940,
        "wires": [
            [
                "911f49fd.e33048"
            ]
        ]
    },
    {
        "id": "2dcfb1eb.6de60e",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "2e329927.ce2b26",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Reset Sinalizadores",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 240,
        "y": 1340,
        "wires": [
            [
                "ca4b0f90.778f8"
            ]
        ]
    },
    {
        "id": "8d67a3a.ec3436",
        "type": "ui_button",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "c54f908.e18107",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 350,
        "y": 1160,
        "wires": [
            [
                "b09c4d96.5b8fc"
            ]
        ]
    },
    {
        "id": "1ccd39a6.950096",
        "type": "ui_dropdown",
        "z": "b79a169e.a116d8",
        "name": "Select Sinalizador",
        "label": "Selecione o sinalizador",
        "tooltip": "",
        "place": "Select option",
        "group": "bb15abb8.10dae8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 630,
        "y": 640,
        "wires": [
            [
                "85a89306.c989"
            ]
        ]
    },
    {
        "id": "e6bd752d.157ce8",
        "type": "ui_dropdown",
        "z": "b79a169e.a116d8",
        "name": "",
        "label": "Selecione para renomear",
        "tooltip": "",
        "place": "Select option",
        "group": "c54f908.e18107",
        "order": 1,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 670,
        "y": 940,
        "wires": [
            [
                "91956732.c54df8"
            ]
        ]
    },
    {
        "id": "e51545de.135f28",
        "type": "ui_text_input",
        "z": "b79a169e.a116d8",
        "name": "",
        "label": "Novo nome",
        "tooltip": "",
        "group": "c54f908.e18107",
        "order": 5,
        "width": 9,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "795a1e1c.3ab2f"
            ]
        ]
    },
    {
        "id": "28325569.d24eca",
        "type": "ui_text",
        "z": "b79a169e.a116d8",
        "group": "c54f908.e18107",
        "order": 3,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Digite o novo nome no campo abaixo. Em seguida aperte em SAVE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 540,
        "y": 1060,
        "wires": []
    },
    {
        "id": "49a99ce7.4e5864",
        "type": "ui_text",
        "z": "b79a169e.a116d8",
        "group": "c54f908.e18107",
        "order": 7,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "{{msg.topic}}",
        "format": "",
        "layout": "row-left",
        "x": 1070,
        "y": 1020,
        "wires": []
    },
    {
        "id": "68160254.edb37c",
        "type": "ui_chart",
        "z": "b79a169e.a116d8",
        "name": "",
        "group": "bb15abb8.10dae8",
        "order": 6,
        "width": 6,
        "height": 4,
        "label": "{{msg.topic}}",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#2cb805",
            "#f91515",
            "#ffd91a",
            "#3744fb",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1750,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "59ab7931.b44b28",
        "type": "ui_toast",
        "z": "b79a169e.a116d8",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "topic": "",
        "name": "Confirmation",
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "4a40d7b3.f79108"
            ]
        ]
    },
    {
        "id": "55be3785.6807f8",
        "type": "ui_toast",
        "z": "b79a169e.a116d8",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "AVISO",
        "name": "Nome ja existente",
        "x": 970,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e414c53f.280878",
        "type": "ui_template",
        "z": "b79a169e.a116d8",
        "group": "b5deeefa.dab7b",
        "name": "Log Paradas",
        "order": 1,
        "width": 6,
        "height": 5,
        "format": "<ul>\n <li ng-repeat=\"x in msg.payload\">\n <font color=\"red\"><b>{{x.nome}}</b></font>\n    <ul>\n        <li><b>{{x.status_atual}}</b></li>\n        <li><b>{{x.time_change_string}}</b></li>\n    </ul>\n </li>\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 2410,
        "y": 1140,
        "wires": [
            []
        ],
        "info": "O LOG de paradas vai mostrar apenas o clientID, o status (que deve ser parada programada ou parada não programada), e o horário que a troca para este status ocorreu."
    },
    {
        "id": "5b1f1502.96599c",
        "type": "ui_table",
        "z": "b79a169e.a116d8",
        "group": "2e329927.ce2b26",
        "name": "Tabela Geral Smart",
        "order": 1,
        "width": 14,
        "height": 10,
        "columns": [
            {
                "field": "nome",
                "title": "Sinalizador",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status_atual",
                "title": "Status Atual",
                "width": "18%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "countOFF",
                "title": "Nº Paradas",
                "width": "15%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_ON_string",
                "title": "Tempo ON",
                "width": "15%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_OFF_string",
                "title": "Tempo OFF",
                "width": "15%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conectividade",
                "title": "Conectividade",
                "width": "18%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1810,
        "y": 300,
        "wires": []
    },
    {
        "id": "e7fc2d44.19339",
        "type": "ui_table",
        "z": "b79a169e.a116d8",
        "group": "bb15abb8.10dae8",
        "name": "Resumo Sinalizador",
        "order": 5,
        "width": 6,
        "height": 4,
        "columns": [
            {
                "field": "status_atual",
                "title": "Status",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_change_string",
                "title": "Hora",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1840,
        "y": 580,
        "wires": []
    },
    {
        "id": "36423b04.d4e9c4",
        "type": "ui_table",
        "z": "b79a169e.a116d8",
        "group": "a5c77f56.c9f86",
        "name": "Lista Sinalizadores",
        "order": 1,
        "width": 14,
        "height": 10,
        "columns": [
            {
                "field": "clientID",
                "title": "ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "nome",
                "title": "Nome",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "macAdd",
                "title": "MAC Address",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "cadastro_data",
                "title": "Data de Cadastro",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1970,
        "y": 700,
        "wires": []
    },
    {
        "id": "be4a2d14.fc355",
        "type": "ui_table",
        "z": "b79a169e.a116d8",
        "group": "4b29cbbf.bb9374",
        "name": "Tabela Geral",
        "order": 1,
        "width": 28,
        "height": 8,
        "columns": [
            {
                "field": "clientID",
                "title": "ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "nome",
                "title": "Sinalizador",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "macAdd",
                "title": "MAC Address",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status_atual",
                "title": "Status Atual",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "countOFF",
                "title": "Nº Paradas",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_ON_string",
                "title": "Tempo ON",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time_OFF_string",
                "title": "Tempo OFF",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conectividade",
                "title": "Conectividade",
                "width": "",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "data",
                "title": "Data Atual",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "cadastro_data",
                "title": "Data Cadastro",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1830,
        "y": 160,
        "wires": []
    },
    {
        "id": "8c307a74.e481c8",
        "type": "telegram receiver",
        "z": "b79a169e.a116d8",
        "name": "Receive any message",
        "bot": "517f5ac4.21b994",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 1560,
        "y": 1880,
        "wires": [
            [
                "2e7738af.184418"
            ],
            [
                "2e7738af.184418"
            ]
        ],
        "info": "Verifica todas as mensagens enviadas ao bot, para verificar se é um comando ou não"
    },
    {
        "id": "5c8a523a.4a681c",
        "type": "telegram receiver",
        "z": "b79a169e.a116d8",
        "name": "",
        "bot": "517f5ac4.21b994",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 1550,
        "y": 1620,
        "wires": [
            [
                "428ca8e7.de2488"
            ],
            []
        ]
    },
    {
        "id": "b66ed51.d976b28",
        "type": "telegram receiver",
        "z": "b79a169e.a116d8",
        "name": "/reset receiver",
        "bot": "517f5ac4.21b994",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 450,
        "y": 1480,
        "wires": [
            [
                "90d0ebf.72c3a18"
            ],
            []
        ]
    },
    {
        "id": "423d5c27.684274",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "/help",
        "command": "/help",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 1510,
        "y": 1440,
        "wires": [
            [
                "12ac7ef2.33d8d1"
            ]
        ]
    },
    {
        "id": "68928ca4.58cd94",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "/file",
        "command": "/file",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 1510,
        "y": 1540,
        "wires": [
            [
                "e8c3e20c.14ec1"
            ]
        ]
    },
    {
        "id": "97fd4a49.890d58",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "Oi",
        "command": "Oi",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 1510,
        "y": 1280,
        "wires": [
            [
                "7411f7f.aba8e08"
            ]
        ]
    },
    {
        "id": "bcd24cd5.c26ac",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "/list",
        "command": "/list",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 1510,
        "y": 1740,
        "wires": [
            [
                "d11b5f89.18a7f",
                "f789f96f.2f1e18",
                "b6232cf2.acff9"
            ]
        ]
    },
    {
        "id": "4992b65f.814518",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "oi",
        "command": "oi",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 1510,
        "y": 1340,
        "wires": [
            [
                "7411f7f.aba8e08"
            ]
        ]
    },
    {
        "id": "ca23226.3ced9e",
        "type": "telegram command",
        "z": "b79a169e.a116d8",
        "name": "/reset",
        "command": "/reset",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "517f5ac4.21b994",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 430,
        "y": 1540,
        "wires": [
            [
                "fc291164.13305"
            ]
        ]
    },
    {
        "id": "7bab79ff.c2a798",
        "type": "telegram sender",
        "z": "b79a169e.a116d8",
        "name": "",
        "bot": "517f5ac4.21b994",
        "haserroroutput": false,
        "outputs": 1,
        "x": 2430,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "7dada031.d0717",
        "type": "telegram sender",
        "z": "b79a169e.a116d8",
        "name": "send question",
        "bot": "517f5ac4.21b994",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1910,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "a554850a.872718",
        "type": "telegram sender",
        "z": "b79a169e.a116d8",
        "name": "send list",
        "bot": "517f5ac4.21b994",
        "haserroroutput": false,
        "outputs": 1,
        "x": 2040,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "d3b00ce4.1a8e1",
        "type": "telegram sender",
        "z": "b79a169e.a116d8",
        "name": "",
        "bot": "517f5ac4.21b994",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1990,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "aa19dcb5.7af53",
        "type": "telegram sender",
        "z": "b79a169e.a116d8",
        "name": "send question",
        "bot": "517f5ac4.21b994",
        "haserroroutput": false,
        "outputs": 1,
        "x": 800,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "5182e27f.2efd8c",
        "type": "fs-file-lister",
        "z": "b79a169e.a116d8",
        "name": "",
        "start": "/home/pi/Documents/datalog/Smart/",
        "pattern": "",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 1800,
        "y": 940,
        "wires": [
            [
                "1e3ed5cf.a3a57a"
            ]
        ]
    },
    {
        "id": "68b84190.6ce51",
        "type": "comment",
        "z": "674c4d9b.3bfa14",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "64b132c8.0e004c",
        "type": "inject",
        "z": "674c4d9b.3bfa14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/pi/Documents/datalog",
        "payloadType": "str",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "349b4b2.72ce5b4",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a file\n    obj = {};\n    obj [msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "d7dc747e.afcb38"
            ]
        ]
    },
    {
        "id": "a9e36a44.cc0f98",
        "type": "template",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>File Name</th><th>Size</th><th>Created</th><th>Changed</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 980,
        "y": 220,
        "wires": [
            [
                "889062b8.83001"
            ]
        ]
    },
    {
        "id": "9cac9f7c.22618",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Convert timestamps",
        "func": "var data = new Date();\nvar horas = data.getHours().toString().padStart(2, '0');\nvar min = data.getMinutes().toString().padStart(2, '0');\nvar dia = data.getDate().toString().padStart(2, '0');\nvar mes = (data.getMonth()+1).toString().padStart(2, '0');\nvar ano = data.getFullYear();\n\nvar time =dia+\"/\"+mes+\"/\"+ano+\" - \"+horas+\":\"+min;\n\nfor (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = time;\n    msg.payload[i].stat.changed = time;\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "a9e36a44.cc0f98"
            ]
        ]
    },
    {
        "id": "19fb9c62.e778f4",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    // and delete the context/selection as we are deleting the file as well\n    flow.set(\"fileselected\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "c73c80d5.5a924"
            ]
        ]
    },
    {
        "id": "c73c80d5.5a924",
        "type": "file",
        "z": "674c4d9b.3bfa14",
        "name": "Delete file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 580,
        "y": 380,
        "wires": [
            [
                "6fb02816.7ff3f8",
                "ca2a4744.2a5d58"
            ]
        ]
    },
    {
        "id": "1cd9c785.208ef8",
        "type": "http in",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "1a6519c6.41afa6"
            ]
        ]
    },
    {
        "id": "e412a880.0af308",
        "type": "http response",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 520,
        "wires": []
    },
    {
        "id": "1a6519c6.41afa6",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "84cfc4f5.eb4518"
            ]
        ],
        "outputLabels": [
            "Folder selected"
        ]
    },
    {
        "id": "84cfc4f5.eb4518",
        "type": "file in",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 620,
        "y": 520,
        "wires": [
            [
                "7153bbe0.80ff74"
            ]
        ]
    },
    {
        "id": "7153bbe0.80ff74",
        "type": "change",
        "z": "674c4d9b.3bfa14",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 520,
        "wires": [
            [
                "e412a880.0af308"
            ]
        ]
    },
    {
        "id": "da6661e2.9adb5",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "128ae726.b4c849"
            ]
        ]
    },
    {
        "id": "128ae726.b4c849",
        "type": "file in",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 480,
        "y": 640,
        "wires": [
            [
                "ec4a1a49.61a7d8"
            ]
        ]
    },
    {
        "id": "ec4a1a49.61a7d8",
        "type": "csv",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "d9a08a78.945d98"
            ]
        ]
    },
    {
        "id": "9dc1def.2f6392",
        "type": "debug",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 580,
        "wires": []
    },
    {
        "id": "d9a08a78.945d98",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Format data for chart",
        "func": "var chart = [{\n    \"series\":[],\n    \"data\":[],\n    \"labels\":[msg.filename]\n}];\n\n\n/*\nvar pressure = [];\nvar out2 = [];\n\nfor (var i=0; i<msg.payload.length; i++) {\n    pressure.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].pressure});\n    out2.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].out2*200});\n\n}\nchart[0].data.push(pressure);\nchart[0].data.push(out2);\n*/\n\nlet columns = 0;\n\nfor(var series in msg.payload[0]) {\n    if(series!==\"timestamp\") {\n        chart[0].series.push(series);\n        chart[0].data.push([]);\n        columns++;\n    }\n}\n\n\nfor (var j=0; j<msg.payload.length; j++) {\n   for(var i=0;i<columns;i++) {\n       chart[0].data[i].push({\"x\":msg.payload[j].timestamp, \"y\":msg.payload[j][chart[0].series[i]]});\n   } \n}\n\n\n\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "d82c56d5.0698a8",
        "type": "change",
        "z": "674c4d9b.3bfa14",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Delete confirmation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to delete this file?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 320,
        "wires": [
            [
                "a52704d8.21d978"
            ]
        ]
    },
    {
        "id": "3d782881.a91038",
        "type": "switch",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 320,
        "wires": [
            [
                "19fb9c62.e778f4"
            ]
        ]
    },
    {
        "id": "6331130d.670edc",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Folder handling",
        "func": "let folder = context.get(\"folder\");\nif (folder===undefined) {\n    folder=\"/\";\n    context.set(\"folder\", folder);\n}\n\nlet hidden = context.get(\"hidden\");\nif (hidden===undefined) {\n    hidden=false;\n    context.set(\"hidden\", hidden);\n}\n\nif (msg.topic===\"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop();\n    folder=the_arr.join('/'); \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"change\") {\n    folder=msg.payload;    \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"hidden\") {\n    hidden=msg.payload;    \n    context.set(\"hidden\", hidden);\n}\n\nmsg.payload = {\"start\":folder, \"hidden\": hidden};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "6fb02816.7ff3f8",
                "dd118106.d419e",
                "ca2a4744.2a5d58"
            ]
        ]
    },
    {
        "id": "f6291650.e95c28",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Change folder",
        "func": "// Get the filename from the flow context\nlet folderselected = flow.get(\"folderselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (folderselected===undefined) {\n    return;\n}\n\nmsg.topic = \"change\";\nmsg.payload = folderselected;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 440,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "baca9eab.c8ca6",
        "type": "function",
        "z": "674c4d9b.3bfa14",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a foler\n    obj = {};\n    obj [\"[\"+msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')+\"]\"]=msg.payload[i].name;\n    //obj [msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "252164e6.bf3d7c"
            ]
        ]
    },
    {
        "id": "e4cd66f6.68d958",
        "type": "change",
        "z": "674c4d9b.3bfa14",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "fileselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "912afb9e.c92ef8",
        "type": "change",
        "z": "674c4d9b.3bfa14",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "folderselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8c2ee10e.d3cda",
        "type": "ui_button",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "b457ad02.7c2dc",
        "type": "ui_button",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "d82c56d5.0698a8"
            ]
        ]
    },
    {
        "id": "315c060c.ffbeca",
        "type": "ui_button",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Up",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "arrow_upwards",
        "payload": "",
        "payloadType": "str",
        "topic": "up",
        "topicType": "str",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "ef1abde7.c3aeb",
        "type": "ui_button",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Open",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "folder_open",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "f6291650.e95c28"
            ]
        ]
    },
    {
        "id": "9df92709.f70708",
        "type": "ui_button",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "autorenew",
        "payload": "/home/pi/Documents/datalog",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "d7dc747e.afcb38",
        "type": "ui_dropdown",
        "z": "674c4d9b.3bfa14",
        "name": "File Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a file",
        "group": "160e81fb.f1c86e",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 950,
        "y": 160,
        "wires": [
            [
                "e4cd66f6.68d958"
            ]
        ]
    },
    {
        "id": "252164e6.bf3d7c",
        "type": "ui_dropdown",
        "z": "674c4d9b.3bfa14",
        "name": "Folder Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a folder",
        "group": "160e81fb.f1c86e",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 960,
        "y": 260,
        "wires": [
            [
                "912afb9e.c92ef8"
            ]
        ]
    },
    {
        "id": "2f11e8b6.bd8c28",
        "type": "ui_switch",
        "z": "674c4d9b.3bfa14",
        "name": "",
        "label": "Hidden",
        "tooltip": "Show hidden files or not",
        "group": "160e81fb.f1c86e",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "hidden",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "check_box",
        "oncolor": "#000000",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "check_box_outline_blank",
        "offcolor": "#000000",
        "animate": true,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "6331130d.670edc"
            ]
        ]
    },
    {
        "id": "dd118106.d419e",
        "type": "ui_text",
        "z": "674c4d9b.3bfa14",
        "group": "160e81fb.f1c86e",
        "order": 4,
        "width": 9,
        "height": 1,
        "name": "",
        "label": "Folder:",
        "format": "{{msg.payload.start}}",
        "layout": "row-left",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "a52704d8.21d978",
        "type": "ui_toast",
        "z": "674c4d9b.3bfa14",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "topic": "",
        "name": "Confirmation",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "3d782881.a91038"
            ]
        ]
    },
    {
        "id": "889062b8.83001",
        "type": "ui_template",
        "z": "674c4d9b.3bfa14",
        "group": "160e81fb.f1c86e",
        "name": "",
        "order": 7,
        "width": 24,
        "height": 7,
        "format": "<style>\n    body.nr-dashboard-theme md-content md-card {\n        border-radius: 10px;\n    }\n\n    .nr-dashboard-theme ui-card-panel {\n        border-radius: 10px;\n    }\n</style>\n\n<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1140,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6fb02816.7ff3f8",
        "type": "fs-file-lister",
        "z": "674c4d9b.3bfa14",
        "name": "Files",
        "start": "/home/pi/Documents/datalog",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 550,
        "y": 160,
        "wires": [
            [
                "349b4b2.72ce5b4",
                "9cac9f7c.22618"
            ]
        ]
    },
    {
        "id": "ca2a4744.2a5d58",
        "type": "fs-file-lister",
        "z": "674c4d9b.3bfa14",
        "name": "Folders",
        "start": "/home/pi/Documents/datalog",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "directories",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 560,
        "y": 260,
        "wires": [
            [
                "baca9eab.c8ca6"
            ]
        ]
    }
]